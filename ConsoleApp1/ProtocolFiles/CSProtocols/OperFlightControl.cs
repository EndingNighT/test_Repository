// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: OperFlightControl.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto3FlightInfo {

  /// <summary>Holder for reflection information generated from OperFlightControl.proto</summary>
  public static partial class OperFlightControlReflection {

    #region Descriptor
    /// <summary>File descriptor for OperFlightControl.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OperFlightControlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdPcGVyRmxpZ2h0Q29udHJvbC5wcm90bxIScHJvdG8zX2ZsaWdodF9pbmZv",
            "Gg5NZXRhRGF0YS5wcm90byLiBQoOUHJvdG9fVGVzdEluZm8SGwoOSXNVc2lu",
            "Z0JhdHRlcnkYASABKAhIAIgBARIYCgtJc1VzaW5nRnVlbBgCIAEoCEgBiAEB",
            "EhsKDkZ1ZWxSZW1haW5pbmcxGAMgASgFSAKIAQESGwoORnVlbFJlbWFpbmlu",
            "ZzIYBCABKAVIA4gBARIdChBNaW5Nb3RvclZvbHRhZ2UxGAUgASgCSASIAQES",
            "HQoQTWluTW90b3JWb2x0YWdlMhgGIAEoAkgFiAEBEh0KFUNydWlzZUZ1ZWxF",
            "bmdpbmVSUE1zMRgHIAMoCBIdChVDcnVpc2VGdWVsRW5naW5lUlBNczIYCCAD",
            "KAgSFQoNTWlsbGlzZWNvbmRzMRgJIAMoBRIVCg1NaWxsaXNlY29uZHMyGAog",
            "AygFEhYKDkJhdHRlcnlDdXJyZW50GAsgAygCEhgKEEJhdHRlcnlSZW1haW5p",
            "bmcYDCADKAISFwoKVGVzdFN0cmluZxgNIAEoCUgGiAEBEhMKC1Rlc3RTdHJp",
            "bmdzGA4gAygJEjcKDE1lc3NhZ2VMZXZlbBgPIAEoDjIcLk1ldGFEYXRhLlBy",
            "b3RvX01lc3NhZ2VMZXZlbEgHiAEBEjMKDU1lc3NhZ2VMZXZlbHMYECADKA4y",
            "HC5NZXRhRGF0YS5Qcm90b19NZXNzYWdlTGV2ZWwSJQoDTExBGBEgASgLMhMu",
            "TWV0YURhdGEuUHJvdG9fTExBSAiIAQESJQoITWVzc2FnZXMYEiADKAsyEy5N",
            "ZXRhRGF0YS5Qcm90b19MTEFCEQoPX0lzVXNpbmdCYXR0ZXJ5Qg4KDF9Jc1Vz",
            "aW5nRnVlbEIRCg9fRnVlbFJlbWFpbmluZzFCEQoPX0Z1ZWxSZW1haW5pbmcy",
            "QhMKEV9NaW5Nb3RvclZvbHRhZ2UxQhMKEV9NaW5Nb3RvclZvbHRhZ2UyQg0K",
            "C19UZXN0U3RyaW5nQg8KDV9NZXNzYWdlTGV2ZWxCBgoEX0xMQSLfAwoTUHJv",
            "dG9fRmx5QmFzZVN0YXR1cxIMCgROYW1lGAEgASgJEhkKDE1pbGxpc2Vjb25k",
            "cxgCIAEoBUgAiAEBEhUKCEFpclNwZWVkGAMgASgCSAGIAQESGAoLR3JvdW5k",
            "U3BlZWQYBCABKAJIAogBARIqCgRNb2RlGAUgASgOMhcuTWV0YURhdGEuUHJv",
            "dG9fRmx5TW9kZUgDiAEBEioKCFBvc2l0aW9uGAYgASgLMhMuTWV0YURhdGEu",
            "UHJvdG9fTExBSASIAQESNgoLT3JpZW50YXRpb24YByABKAsyHC5NZXRhRGF0",
            "YS5Qcm90b19FdWxlckFuZ2xlc0ZIBYgBARIZCgxJc0luT25Hcm91bmQYCCAB",
            "KAhIBogBARIRCgRNYXNzGAkgASgCSAeIAQESGQoMUHJvZHVjdE1vZGVsGAog",
            "ASgJSAiIAQESDwoCUkgYCyABKAFICYgBAUIPCg1fTWlsbGlzZWNvbmRzQgsK",
            "CV9BaXJTcGVlZEIOCgxfR3JvdW5kU3BlZWRCBwoFX01vZGVCCwoJX1Bvc2l0",
            "aW9uQg4KDF9PcmllbnRhdGlvbkIPCg1fSXNJbk9uR3JvdW5kQgcKBV9NYXNz",
            "Qg8KDV9Qcm9kdWN0TW9kZWxCBQoDX1JIIvwBCg9Qcm90b19Qb3dlckluZm8S",
            "GwoOSXNVc2luZ0JhdHRlcnkYASABKAhIAIgBARIWCg5CYXR0ZXJ5Vm9sdGFn",
            "ZRgCIAMoAhIWCg5CYXR0ZXJ5Q3VycmVudBgDIAMoAhIYChBCYXR0ZXJ5UmVt",
            "YWluaW5nGAQgAygCEhcKD0JhdHRlcnlDYXBhY2l0eRgFIAMoAhIYCgtJc1Vz",
            "aW5nRnVlbBgGIAEoCEgBiAEBEhoKDUZ1ZWxSZW1haW5pbmcYByABKAJIAogB",
            "AUIRCg9fSXNVc2luZ0JhdHRlcnlCDgoMX0lzVXNpbmdGdWVsQhAKDl9GdWVs",
            "UmVtYWluaW5nIvUBChBQcm90b19UYXNrU3RhdHVzEioKBE1vZGUYBSABKA4y",
            "Fy5NZXRhRGF0YS5Qcm90b19GbHlNb2RlSACIAQESHgoRQ29udHJvbFRhc2tT",
            "dGF0ZXMYBiABKAlIAYgBARIZCgxJc0luT25Hcm91bmQYCCABKAhIAogBARIU",
            "CgdGbHlUaW1lGAkgASgCSAOIAQESGAoLRmx5RGlzdGFuY2UYCiABKAJIBIgB",
            "AUIHCgVfTW9kZUIUChJfQ29udHJvbFRhc2tTdGF0ZXNCDwoNX0lzSW5Pbkdy",
            "b3VuZEIKCghfRmx5VGltZUIOCgxfRmx5RGlzdGFuY2UizQMKFlByb3RvX0Zs",
            "aWdodFBsYW5QYXJhbXMSHAoURGVmYXVsdFR1cm5pbmdSYWRpdXMYASABKAIS",
            "GAoQTWluVHVybmluZ1JhZGl1cxgCIAEoAhIbChNEZWZhdWx0Q2lyY2xlUmFk",
            "aXVzGAMgASgCEhcKD01pbkNpcmNsZVJhZGl1cxgEIAEoAhIsCiREZWZhdWx0",
            "VmVydGljYWxUYWtlT2ZmUmVsYXRpdmVIZWlnaHQYBSABKAISKQohRGVmYXVs",
            "dFRha2VPZmZDbGltYlJlbGF0aXZlSGVpZ2h0GAYgASgCEiEKGURlZmF1bHRW",
            "ZXJ0aWNhbExhbmRIZWlnaHQYByABKAISJAocSGFzVGFrZU9mZkFuZExhbmRD",
            "bGltYkNpcmNsZRgIIAEoCBIrCiNEZWZhdWx0VGFrZU9mZkFuZExhbmRDaXJj",
            "bGVEaXN0YW5jZRgJIAEoAhInCh9NYXhUYWtlT2ZmQW5kTGFuZENpcmNsZURp",
            "c3RhbmNlGAogASgCEjAKKEFsdGl0dWRlQ2hhbmdlQ2lyY2xlUHJldmlld0Ns",
            "aW1iQW5nbGVBYnMYCyABKAISGwoTTGFuZERlc2NlbnRBbmdsZUFicxgMIAEo",
            "AiKkAQohUHJvdG9fQWlyY3JhZnRTdGF0ZXNGb3JGbGlnaHRQbGFuEhkKEVRh",
            "cmdldENydWlzZVNwZWVkGAEgASgCEhYKDlZUT0xDbGltYlNwZWVkGAIgASgC",
            "EhgKEFZUT0xEZXNjZW50U3BlZWQYAyABKAISMgoqQWlyY3JhZnRPcmlnaW5I",
            "ZWlnaHRBYm92ZUxhbmRpbmdHZWFyQm90dG9tGAQgASgCImAKFVByb3RvX0Fs",
            "dGl0dWRlRGVmSW5mbxIhChlBaXJjcmFmdFJlZmVyZW5jZUFsdGl0dWRlGAEg",
            "ASgBEhEKCU1pbkFsdEFHTBgCIAEoARIRCglNYXhBbHRBR0wYAyABKAEi/RkK",
            "EVByb3RvX0ZseVByb2dyZXNzEhkKDE1pbGxpc2Vjb25kcxgBIAEoDUgAiAEB",
            "EhYKCVRhc2tTdGF0ZRgCIAEoBUgBiAEBEhcKClNjaGVkdWxlSUQYAyABKA1I",
            "AogBARIhChRDdXJyZW50UGxhbkl0ZW1JbmRleBgEIAEoBUgDiAEBEhoKDUhv",
            "cml6TmF2aU1vZGUYBiABKA1IBIgBARIZCgxWZXJ0TmF2aU1vZGUYByABKA1I",
            "BYgBARIZCgxMb25Jbm5lck1vZGUYCCABKA1IBogBARIZCgxMYXRJbm5lck1v",
            "ZGUYCSABKA1IB4gBARIdChBSb3RvckV4cGFuZFN0YXRlGAogASgNSAiIAQES",
            "FwoKQ2FyZ29TdGF0ZRgLIAEoDUgJiAEBEiIKFUVxdWl2U2VhTGV2ZWxBaXJz",
            "cGVlZBgMIAEoAkgKiAEBEhcKCkFpckRlbnNpdHkYDSABKAJIC4gBARIeChFS",
            "ZWZlcmVuY2VBbHRpdHVkZRgOIAEoAUgMiAEBEhsKDlRhcmdldEFsdGl0dWRl",
            "GA8gASgBSA2IAQESJQoYTGFuZGluZ0dlYXJBbHRBR0xCeVJhZGFyGBAgASgC",
            "SA6IAQESIwoWRGV0ZWN0ZWRHcm91bmRBbHRpdHVkZRgRIAEoAkgPiAEBEiEK",
            "FERpYWdub3N0aWNBY3Rpb25UeXBlGBIgASgFSBCIAQESGAoLRmx5RGlzdGFu",
            "Y2UYEyABKAFIEYgBARI6Ci1DdXJyZW50UGxhbkl0ZW1PclRlbXBvcmFyeVBh",
            "dGhDb21wbGV0ZVBlcmNlbnQYFCABKAJIEogBARJVCihHb3RvVGhpc1BvaW50",
            "QWZ0ZXJUYWtlb2ZmU2VjdGlvbkZpbmlzaGVkGBUgASgLMh4uTWV0YURhdGEu",
            "UHJvdG9fUG9pbnRPbkZseVBhdGhIE4gBARIXCgpGbHlTZWNvbmRzGBYgASgN",
            "SBSIAQESGwoOVGFyZ2V0Rmx5U3BlZWQYFyABKAJIFYgBARIiChVNYWduZXRp",
            "Y0NvbmZpZ3VyYXRpb24YGCABKA1IFogBARImChlXaW5nQ3J1aXNlTG9uT3Zl",
            "cnJpZGVNb2RlGBkgASgNSBeIAQESKQocSXNBbGxDcnVpc2VGdWVsRW5naW5l",
            "UG93ZXJPbhgaIAEoCEgYiAEBEikKHElzQWxsQ3J1aXNlRnVlbEVuZ2luZVJ1",
            "bm5pbmcYGyABKAhIGYgBARIoChtTaG91bGRDcnVpc2VFbmdpbmVBdmFpbGFi",
            "bGUYHCABKAhIGogBARIXCgpJc09uR3JvdW5kGB0gASgISBuIAQESHQoQSXND",
            "bWRSb3RvckV4cGFuZBgeIAEoCEgciAEBEhsKDklzQ21kQ2FyZ29Mb2NrGB8g",
            "ASgISB2IAQESIgoVSXNBR0xCeVNvbmFyQXZhaWxhYmxlGCAgASgISB6IAQES",
            "IwoWSXNJblRlc3RNb3RvclNlcnZvTW9kZRghIAEoCEgfiAEBEhsKDklzVXNl",
            "UGl0b3RUdWJlGCIgASgISCCIAQESJQoYSXNNb3RvcnNBbmRTZXJ2b3NFbmFi",
            "bGVkGCMgASgISCGIAQESGQoMSGFzTGlmdGVkT2ZmGCQgASgISCKIAQESKAob",
            "SXNGbGlnaHRTY2hlZHVsZUhhc0ZpbmlzaGVkGCUgASgISCOIAQESIQoUSXNQ",
            "aWxvdENvbnRyb2xBY3RpdmUYJiABKAhIJIgBARIiChVJc1dpbmdDcnVpc2VI",
            "YXNGYWlsZWQYJyABKAhIJYgBARIlChhJc0VtZXJnZW5jeUxhbmRSZXF1ZXN0",
            "ZWQYKCABKAhIJogBARIcCg9Jc0VtZXJnZW5jeUxhbmQYKSABKAhIJ4gBARIZ",
            "CgxIYXNFeGNlcHRpb24YKiABKAhIKIgBARIZCgxJc0luU2FmZU1vZGUYKyAB",
            "KAhIKYgBARIeChFJc0luVGVtcG9yYXJ5UGF0aBgsIAEoCEgqiAEBEiIKFUlz",
            "R05TU0RhdGFRdWFsaXR5R29vZBgtIAEoCEgriAEBEh8KEklzUmVqZWN0aW5n",
            "VGFrZU9mZhguIAEoCEgsiAEBEiEKFElzQnJlYWtQb2ludFJlY29yZGVkGC8g",
            "ASgISC2IAQESKgodSXNJbkhpZ2hQb3NBY2N1cmFjeVJvdG9yTW9kZXMYMCAB",
            "KAhILogBARIgChNJc1RhcmdldEFsdGl0dWRlQUdMGDEgASgISC+IAQESGgoN",
            "SXNQb3NGaWxlT3BlbhgyIAEoCEgwiAEBEioKHUlzQ2FtZXJhQXV0b1Nob290",
            "UGVyaW9kaWNhbGx5GDMgASgISDGIAQESJAoXSXNSZXF1ZXN0T3Blbk9uYm9h",
            "cmRMb2cYNCABKAhIMogBARIdChBJc09uYm9hcmRMb2dPcGVuGDUgASgISDOI",
            "AQESLwoiRW5hYmxlRmxpZ2h0Q29udHJvbEJvYXJkQXV0b0hlYXRlchg2IAEo",
            "CEg0iAEBEiEKFElzQXV0b1NlbGZEcml2ZVNwZWVkGDcgASgISDWIAQESKQoc",
            "SXNUYXJnZXRBaXJzcGVlZEVsc2VHbmRzcGVlZBg4IAEoCEg2iAEBEiQKF0lz",
            "TG93QWx0aXR1ZGVQcm90ZWN0aW9uGDkgASgISDeIAQFCDwoNX01pbGxpc2Vj",
            "b25kc0IMCgpfVGFza1N0YXRlQg0KC19TY2hlZHVsZUlEQhcKFV9DdXJyZW50",
            "UGxhbkl0ZW1JbmRleEIQCg5fSG9yaXpOYXZpTW9kZUIPCg1fVmVydE5hdmlN",
            "b2RlQg8KDV9Mb25Jbm5lck1vZGVCDwoNX0xhdElubmVyTW9kZUITChFfUm90",
            "b3JFeHBhbmRTdGF0ZUINCgtfQ2FyZ29TdGF0ZUIYChZfRXF1aXZTZWFMZXZl",
            "bEFpcnNwZWVkQg0KC19BaXJEZW5zaXR5QhQKEl9SZWZlcmVuY2VBbHRpdHVk",
            "ZUIRCg9fVGFyZ2V0QWx0aXR1ZGVCGwoZX0xhbmRpbmdHZWFyQWx0QUdMQnlS",
            "YWRhckIZChdfRGV0ZWN0ZWRHcm91bmRBbHRpdHVkZUIXChVfRGlhZ25vc3Rp",
            "Y0FjdGlvblR5cGVCDgoMX0ZseURpc3RhbmNlQjAKLl9DdXJyZW50UGxhbkl0",
            "ZW1PclRlbXBvcmFyeVBhdGhDb21wbGV0ZVBlcmNlbnRCKwopX0dvdG9UaGlz",
            "UG9pbnRBZnRlclRha2VvZmZTZWN0aW9uRmluaXNoZWRCDQoLX0ZseVNlY29u",
            "ZHNCEQoPX1RhcmdldEZseVNwZWVkQhgKFl9NYWduZXRpY0NvbmZpZ3VyYXRp",
            "b25CHAoaX1dpbmdDcnVpc2VMb25PdmVycmlkZU1vZGVCHwodX0lzQWxsQ3J1",
            "aXNlRnVlbEVuZ2luZVBvd2VyT25CHwodX0lzQWxsQ3J1aXNlRnVlbEVuZ2lu",
            "ZVJ1bm5pbmdCHgocX1Nob3VsZENydWlzZUVuZ2luZUF2YWlsYWJsZUINCgtf",
            "SXNPbkdyb3VuZEITChFfSXNDbWRSb3RvckV4cGFuZEIRCg9fSXNDbWRDYXJn",
            "b0xvY2tCGAoWX0lzQUdMQnlTb25hckF2YWlsYWJsZUIZChdfSXNJblRlc3RN",
            "b3RvclNlcnZvTW9kZUIRCg9fSXNVc2VQaXRvdFR1YmVCGwoZX0lzTW90b3Jz",
            "QW5kU2Vydm9zRW5hYmxlZEIPCg1fSGFzTGlmdGVkT2ZmQh4KHF9Jc0ZsaWdo",
            "dFNjaGVkdWxlSGFzRmluaXNoZWRCFwoVX0lzUGlsb3RDb250cm9sQWN0aXZl",
            "QhgKFl9Jc1dpbmdDcnVpc2VIYXNGYWlsZWRCGwoZX0lzRW1lcmdlbmN5TGFu",
            "ZFJlcXVlc3RlZEISChBfSXNFbWVyZ2VuY3lMYW5kQg8KDV9IYXNFeGNlcHRp",
            "b25CDwoNX0lzSW5TYWZlTW9kZUIUChJfSXNJblRlbXBvcmFyeVBhdGhCGAoW",
            "X0lzR05TU0RhdGFRdWFsaXR5R29vZEIVChNfSXNSZWplY3RpbmdUYWtlT2Zm",
            "QhcKFV9Jc0JyZWFrUG9pbnRSZWNvcmRlZEIgCh5fSXNJbkhpZ2hQb3NBY2N1",
            "cmFjeVJvdG9yTW9kZXNCFgoUX0lzVGFyZ2V0QWx0aXR1ZGVBR0xCEAoOX0lz",
            "UG9zRmlsZU9wZW5CIAoeX0lzQ2FtZXJhQXV0b1Nob290UGVyaW9kaWNhbGx5",
            "QhoKGF9Jc1JlcXVlc3RPcGVuT25ib2FyZExvZ0ITChFfSXNPbmJvYXJkTG9n",
            "T3BlbkIlCiNfRW5hYmxlRmxpZ2h0Q29udHJvbEJvYXJkQXV0b0hlYXRlckIX",
            "ChVfSXNBdXRvU2VsZkRyaXZlU3BlZWRCHwodX0lzVGFyZ2V0QWlyc3BlZWRF",
            "bHNlR25kc3BlZWRCGgoYX0lzTG93QWx0aXR1ZGVQcm90ZWN0aW9uIosGChVQ",
            "cm90b19BaXJjcmFmdFNldHRpbmcSFAoMQWlyY3JhZnROYW1lGAEgASgJEhkK",
            "DElzT3BlbkVuZ2luZRgCIAEoCEgAiAEBEiQKF0lzTG93QWx0aXR1ZGVQcm90",
            "ZWN0aW9uGAMgASgISAGIAQESLwoiSXNFbmFibGVCYXR0ZXJ5RW5lcmd5TG93",
            "QXV0b1JldHVybhgEIAEoCEgCiAEBEjYKKUlzRW5hYmxlRmx5UGxhbk1vZGVB",
            "dXRvUmV0dXJuV2hlbkxpbmtMb3N0GAUgASgISAOIAQESLAofSXNFbmFibGVF",
            "eGl0UklDTW9kZVdoZW5MaW5rTG9zdBgGIAEoCEgEiAEBEicKGklzRGlzYWJs",
            "ZUVtZXJnZW5jeUF1dG9MYW5kGAcgASgISAWIAQESHwoSSXNBdXRvVmVydFBv",
            "cnRNb2RlGAggASgISAaIAQESJAoXSXNBdXRvU2VsZkRyaXZlQWlyc3BlZWQY",
            "CSABKAhIB4gBARIoChtJc0ZvcmNlRXhwYW5kUm90b3JzT25Hcm91bmQYCiAB",
            "KAhICIgBARJGCgdQYXlsb2FkGAsgASgLMjAucHJvdG8zX2ZsaWdodF9pbmZv",
            "LlByb3RvX0FpcmNyYWZ0UGF5bG9hZFNldHRpbmdICYgBAUIPCg1fSXNPcGVu",
            "RW5naW5lQhoKGF9Jc0xvd0FsdGl0dWRlUHJvdGVjdGlvbkIlCiNfSXNFbmFi",
            "bGVCYXR0ZXJ5RW5lcmd5TG93QXV0b1JldHVybkIsCipfSXNFbmFibGVGbHlQ",
            "bGFuTW9kZUF1dG9SZXR1cm5XaGVuTGlua0xvc3RCIgogX0lzRW5hYmxlRXhp",
            "dFJJQ01vZGVXaGVuTGlua0xvc3RCHQobX0lzRGlzYWJsZUVtZXJnZW5jeUF1",
            "dG9MYW5kQhUKE19Jc0F1dG9WZXJ0UG9ydE1vZGVCGgoYX0lzQXV0b1NlbGZE",
            "cml2ZUFpcnNwZWVkQh4KHF9Jc0ZvcmNlRXhwYW5kUm90b3JzT25Hcm91bmRC",
            "CgoIX1BheWxvYWQixAMKHFByb3RvX0FpcmNyYWZ0UGF5bG9hZFNldHRpbmcS",
            "HwoSSXNTdG9wUmVjb3JkT25MYW5kGAEgASgISACIAQESIwoWSXNCZWdpblJl",
            "Y29yZE9uVGFrZU9mZhgCIAEoCEgBiAEBEi8KIklzR2ltYmFsQ2FtZXJhU0RD",
            "YXJkRGVzdHJveVBvd2VyT24YAyABKAhIAogBARIjChZJc0NhbWVyYVJlY29y",
            "ZGluZ1ZpZGVvGAQgASgISAOIAQESGQoMSXNPU0RFbmFibGVkGAUgASgISASI",
            "AQESHAoPSXNSYW5nZXJFbmFibGVkGAYgASgISAWIAQESHwoSSXNZYXdGb2xs",
            "b3dFbmFibGVkGAcgASgISAaIAQFCFQoTX0lzU3RvcFJlY29yZE9uTGFuZEIZ",
            "ChdfSXNCZWdpblJlY29yZE9uVGFrZU9mZkIlCiNfSXNHaW1iYWxDYW1lcmFT",
            "RENhcmREZXN0cm95UG93ZXJPbkIZChdfSXNDYW1lcmFSZWNvcmRpbmdWaWRl",
            "b0IPCg1fSXNPU0RFbmFibGVkQhIKEF9Jc1JhbmdlckVuYWJsZWRCFQoTX0lz",
            "WWF3Rm9sbG93RW5hYmxlZCKLAgoOUHJvdG9fR25zc0luZm8SQgoRUG9zaXRp",
            "b25pbmdTdGF0dXMYASABKA4yIi5NZXRhRGF0YS5Qcm90b19HTlNTTG9jYXRp",
            "b25TdGF0dXNIAIgBARI3CghSVEtTdGF0ZRgCIAEoDjIgLk1ldGFEYXRhLlBy",
            "b3RvX1JUS1NvbHV0aW9uU3RhdGVIAYgBARIqCghQb3NpdGlvbhgDIAEoCzIT",
            "Lk1ldGFEYXRhLlByb3RvX0xMQUgCiAEBEhQKB1NhdGVOdW0YBCABKAVIA4gB",
            "AUIUChJfUG9zaXRpb25pbmdTdGF0dXNCCwoJX1JUS1N0YXRlQgsKCV9Qb3Np",
            "dGlvbkIKCghfU2F0ZU51bSJoChVQcm90b19BaXJjcmFmdE1lc3NhZ2USKwoF",
            "TGV2ZWwYASABKA4yHC5NZXRhRGF0YS5Qcm90b19NZXNzYWdlTGV2ZWwSDwoH",
            "TWVzc2FnZRgCIAEoCRIRCglUaW1lU3RhbXAYAyABKAMiMQodQWlyY3JhZnRD",
            "b250cm9sQ2VudGVyTWVzc2FnZXMSEAoITWVzc2FnZXMYASADKAkiVQoWUHJv",
            "dG9fQWlyY3JhZnRNZXNzYWdlcxI7CghNZXNzYWdlcxgBIAMoCzIpLnByb3Rv",
            "M19mbGlnaHRfaW5mby5Qcm90b19BaXJjcmFmdE1lc3NhZ2UiOgoQUG9ydG9f",
            "Qm9vbERvdWJsZRIRCglCb29sVmFsdWUYASABKAgSEwoLRG91YmxlVmFsdWUY",
            "AiABKAEigAcKF1Byb3RvX0F0dGl0dWRlSW5kaWNhdG9yEioKCFBsYW5lTExB",
            "GAEgASgLMhMuTWV0YURhdGEuUHJvdG9fTExBSACIAQESNwoQUGxhbmVPcmll",
            "bnRhdGlvbhgCIAEoCzIYLk1ldGFEYXRhLlByb3RvX01hdHJpeDNGSAGIAQES",
            "OgoTUGxhbmVCb2R5RnJhbWVTcGVlZBgDIAEoCzIYLk1ldGFEYXRhLlByb3Rv",
            "X1ZlY3RvcjNGSAKIAQESNAoNUGxhbmVFTlVTcGVlZBgEIAEoCzIYLk1ldGFE",
            "YXRhLlByb3RvX1ZlY3RvcjNGSAOIAQESHwoSQ2FsaWJyYXRlZEFpcnNwZWVk",
            "GAUgASgCSASIAQESJQoYQmF0dGVyeVJlbWFpbkVuZXJneVJhdGlvGAYgASgC",
            "SAWIAQESOwoIUGxhbmVBR0wYByABKAsyJC5wcm90bzNfZmxpZ2h0X2luZm8u",
            "UG9ydG9fQm9vbERvdWJsZUgGiAEBEiAKE1BsYW5lUmVsYXRpdmVIZWlnaHQY",
            "CCABKAFIB4gBARIlChhQbGFuZVBpdGNoRXJyb3JMb3dTcGRQU1AYCSABKAFI",
            "CIgBARImChlQbGFuZVBpdGNoRXJyb3JIaWdoU3BkUFNQGAogASgBSAmIAQES",
            "HAoPQm9keUZyYW1lWkFjY2VsGAsgASgBSAqIAQESIAoTQ3J1aXNlVGhyb3R0",
            "bGVSYXRpbxgMIAEoAUgLiAEBEh0KEFJvdG9yVGhydXN0UmF0aW8YDSABKAFI",
            "DIgBARIQCgNBb0EYDiABKAFIDYgBAUILCglfUGxhbmVMTEFCEwoRX1BsYW5l",
            "T3JpZW50YXRpb25CFgoUX1BsYW5lQm9keUZyYW1lU3BlZWRCEAoOX1BsYW5l",
            "RU5VU3BlZWRCFQoTX0NhbGlicmF0ZWRBaXJzcGVlZEIbChlfQmF0dGVyeVJl",
            "bWFpbkVuZXJneVJhdGlvQgsKCV9QbGFuZUFHTEIWChRfUGxhbmVSZWxhdGl2",
            "ZUhlaWdodEIbChlfUGxhbmVQaXRjaEVycm9yTG93U3BkUFNQQhwKGl9QbGFu",
            "ZVBpdGNoRXJyb3JIaWdoU3BkUFNQQhIKEF9Cb2R5RnJhbWVaQWNjZWxCFgoU",
            "X0NydWlzZVRocm90dGxlUmF0aW9CEwoRX1JvdG9yVGhydXN0UmF0aW9CBgoE",
            "X0FvQSImChBQcm90b19GbGlnaHRQbGFuEhIKCkZsaWdodFBsYW4YASABKAwi",
            "4UkKElByb3RvX0dlbmVyYXRlSW5mbxIbCg5Jc1JlY2VpdmluZ0hvdBgBIAEo",
            "CEgAiAEBEiUKGElzTW90b3JzQW5kU2Vydm9zRW5hYmxlZBgCIAEoCEgBiAEB",
            "EiMKFklzSW5UZXN0TW90b3JTZXJ2b01vZGUYAyABKAhIAogBARIjChZSZWNl",
            "aXZlZEJ5dGVzUGVyU2Vjb25kGAQgASgBSAOIAQESHwoSU2VudEJ5dGVzUGVy",
            "U2Vjb25kGAUgASgBSASIAQESIgoVQ29ubmVjdGVkRGF0YUxpbmtOYW1lGAYg",
            "ASgJSAWIAQESNAonQWlyY3JhZnRVc2VGdWVsRW5naW5lRm9yRml4ZWRXaW5n",
            "Q3J1aXNlGAcgASgISAaIAQESIwobQWN0dWFsVGhyb3R0bGVTZXJ2b1Bvc2l0",
            "aW9uGAggAygCEiIKGkN5bGluZGVySGVhZE1heFRlbXBlcmF0dXJlGAkgAygC",
            "EiEKGUVzdGltYXRlZFByb3BlbGxlclRocnVzdE4YCiADKAISHAoUQ3J1aXNl",
            "RnVlbEVuZ2luZVJQTXMYCyADKAUSKAobU2hvdWxkQ3J1aXNlRW5naW5lQXZh",
            "aWxhYmxlGAwgASgISAeIAQESKQocSXNBbGxDcnVpc2VGdWVsRW5naW5lUG93",
            "ZXJPbhgNIAEoCEgIiAEBEikKHElzQWxsQ3J1aXNlRnVlbEVuZ2luZVJ1bm5p",
            "bmcYDiABKAhICYgBARIrCh5GbGlnaHRDb250cm9sVXNlQWlyc3BlZWRTZW5z",
            "b3IYDyABKAhICogBARIbCg5Jc1VzZVBpdG90VHViZRgQIAEoCEgLiAEBEhkK",
            "DElzSW5TYWZlTW9kZRgRIAEoCEgMiAEBEh8KEkRvTm90VXNlQmFyb1NlbnNv",
            "chgSIAEoCEgNiAEBEiUKGFRvdGFsUm90b3JBbmRDcnVpc2VQb3dlchgTIAEo",
            "AkgOiAEBEhwKD01pbk1vdG9yVm9sdGFnZRgUIAEoAkgPiAEBEigKG01pbkJh",
            "dHRlcnlSZW1haW5FbmVyZ3lSYXRpbxgVIAEoAkgQiAEBEiUKGFNob3dGdWxs",
            "QmF0dGVyeUVuZHVyYW5jZRgWIAEoCEgRiAEBEhcKCklzT25Hcm91bmQYFyAB",
            "KAhIEogBARIgChNBdXRvTGFuZEVuZXJneVJhdGlvGBggASgCSBOIAQESLQog",
            "RW5hYmxlQmF0dGVyeUVuZXJneUxvd0F1dG9SZXR1cm4YGSABKAhIFIgBARIp",
            "ChxBdXRvUmV0dXJuQmF0dGVyeUVuZXJneVJhdGlvGBogASgCSBWIAQESIQoU",
            "UmVtYWluQ3J1aXNlRW5lcmd5V2gYGyABKAJIFogBARIgChNSZW1haW5Sb3Rv",
            "ckVuZXJneVdoGBwgASgCSBeIAQESRQoMTG9uSW5uZXJNb2RlGB0gASgOMiou",
            "TWV0YURhdGEuUHJvdG9fRkNDb250cm9sSW5uZXJMb29wTG9uTW9kZXNIGIgB",
            "ARIZCgxBaXJjcmFmdE1hc3MYHiABKAJIGYgBARIbCg5UYXJnZXRGbHlTcGVl",
            "ZBgfIAEoAkgaiAEBEiIKFUNydWlzZVBvd2VyRXN0aW1hdGlvbhggIAEoAUgb",
            "iAEBEiEKFENydWlzZUVuZXJneVBlck1ldGVyGCEgASgBSByIAQESHQoQUmVt",
            "YWluQ3J1aXNlVGltZRgiIAEoAUgdiAEBEh0KEFJlbWFpbkNydWlzZURpc3QY",
            "IyABKAFIHogBARIgChNWVE9MUG93ZXJFc3RpbWF0aW9uGCQgASgBSB+IAQES",
            "FwoKQWlyRGVuc2l0eRglIAEoAkggiAEBEhsKDlJlbWFpblZUT0xUaW1lGCYg",
            "ASgBSCGIAQESMwomQWlyY3JhZnRIb3JpekRpc3RUb0xhbmRBbG9uZ0ZsaWdo",
            "dFBsYW4YJyABKAJIIogBARIeChFIYXNGaXhlZFdpbmdNb2RlcxgoIAEoCEgj",
            "iAEBEkEKEFJvdG9yRXhwYW5kU3RhdGUYKSABKA4yIi5NZXRhRGF0YS5Qcm90",
            "b19Sb3RvckZvbGRpbmdTdGF0ZXNIJIgBARIhChRIYXNSZXRyYWN0YWJsZVJv",
            "dG9ycxgqIAEoCEgliAEBEiUKGElzQXV0b1JldHJhY3RMYW5kaW5nR2Vhchgr",
            "IAEoCEgmiAEBEiMKFklzTGFuZGluZ0dlYXJSZXRyYWN0ZWQYLCABKAhIJ4gB",
            "ARI/ChBSVEtTb2x1dGlvblN0YXRlGC0gASgOMiAuTWV0YURhdGEuUHJvdG9f",
            "UlRLU29sdXRpb25TdGF0ZUgoiAEBEiUKA0xMQRguIAEoCzITLk1ldGFEYXRh",
            "LlByb3RvX0xMQUgpiAEBEjcKDEV1bGVyQW5nbGVzRhgvIAEoCzIcLk1ldGFE",
            "YXRhLlByb3RvX0V1bGVyQW5nbGVzRkgqiAEBEhsKDlRhcmdldEFsdGl0dWRl",
            "GDAgASgBSCuIAQESHgoRUmVmZXJlbmNlQWx0aXR1ZGUYMSABKAFILIgBARIZ",
            "CgxUcnVlQWlyU3BlZWQYMiABKAJILYgBARIaCg1Hcm91bmQyRFNwZWVkGDMg",
            "ASgCSC6IAQESIgoVU3RyYWlnaHREaXN0VG9UYWtlT2ZmGDQgASgCSC+IAQES",
            "GAoLRmx5RGlzdGFuY2UYNSABKAFIMIgBARIXCgpGbHlTZWNvbmRzGDYgASgN",
            "SDGIAQESHQoQSGFzRXN0aW1hdGVkV2luZBg3IAEoCEgyiAEBEh8KEkVzdGlt",
            "YXRlZFdpbmRBbmdsZRg4IAEoAUgziAEBEh8KEkVzdGltYXRlZFdpbmRTcGVl",
            "ZBg5IAEoAUg0iAEBEiUKGFdyaXRlQ2FtZXJhUG9zRGF0YVRvRmlsZRg6IAEo",
            "CEg1iAEBEiUKGFVuZG93bmxvYWRlZFBvc0RhdGFDb3VudBg7IAEoDUg2iAEB",
            "EikKHEF2ZXJhZ2VSb3RvclRocnVzdFJhdGlvRm9yMUcYPCABKAJIN4gBARI0",
            "Cg1QbGFuZUVOVVNwZWVkGD0gASgLMhguTWV0YURhdGEuUHJvdG9fVmVjdG9y",
            "M0ZIOIgBARIeChFJc0dOU1MyREF2YWlsYWJsZRg+IAEoCEg5iAEBEh8KEklz",
            "R05TU0FsdEF2YWlsYWJsZRg/IAEoCEg6iAEBEh0KEFVzaW5nR25zc1NhdGVO",
            "dW0YQCABKAVIO4gBARIiChVJc0dOU1NEYXRhUXVhbGl0eUdvb2QYQSABKAhI",
            "PIgBARIeChFHTlNTc29tZU5vdFVzYWJsZRhCIAEoCEg9iAEBEiEKFElzSVJT",
            "UmVhZHlGb3JUYWtlb2ZmGEMgASgISD6IAQESJgoZSXNJblNlbnNvckNhbGli",
            "cmF0aW9uTW9kZRhEIAEoCEg/iAEBEhoKDUlzSW5Ob01hZ01vZGUYRSABKAhI",
            "QIgBARIuCiFJc1VzaW5nVmlzdWFsUG9zaXRpb25TeXN0ZW1Gb3JJUlMYRiAB",
            "KAhIQYgBARIkChdJc0ZseVRlc3RQYXJhbXNNb2RpZmllZBhHIAEoCEhCiAEB",
            "EioKHUlzSW5BdXRvVmVydFBvcnRPcGVyYXRpb25Nb2RlGEggASgISEOIAQES",
            "KAobSXNBdXRvUG9ydExhbmRFbHNlQWx0ZXJMYW5kGEkgASgISESIAQESHgoR",
            "SXNWZXJ0aWNhbExhbmRpbmcYSiABKAhIRYgBARIxCiRJc0luTGFuZGluZ0Nv",
            "bnN0RGVzY2VudEFuZEFsaWduUGhhc2UYSyABKAhIRogBARIxCiRJc1ZlcnRM",
            "YW5kUGF1c2VUb3VjaERvd25Gb3JBbGlnbm1lbnQYTCABKAhIR4gBARJdCh9Q",
            "cmVjaXNpb25MYW5kTWF4QWxsb3dhYmxlRXJyb3JzGE0gASgLMi8uTWV0YURh",
            "dGEuUHJvdG9fUHJlY2lzaW9uTGFuZE1heEFsbG93YWJsZUVycm9yc0hIiAEB",
            "EiQKF0xhbmRpbmdHbG9iYWwyRFBvc0Vycm9yGE4gASgBSEmIAQESHwoSTGFu",
            "ZEFjdGl2ZVlhd0FsaWduGE8gASgISEqIAQESIAoTTGFuZFBhc3NpdmVZYXdB",
            "bGlnbhhQIAEoCEhLiAEBEiIKFVBvcnRUYWJsZUhlYWRpbmdBbmdsZRhRIAEo",
            "AUhMiAEBEh8KEllhd0FuZ2xlQWxpZ25FcnJvchhSIAEoAUhNiAEBEiYKGUlz",
            "UHJvdG9jb2xWZXJzaW9uQ29uZmxpY3QYUyABKAhITogBARIpChxDYW5FbnRl",
            "ckhpZ2hQb3NBY2N1Um90b3JNb2RlGFQgASgISE+IAQESIwoWU2VydmVyRXJy",
            "b3JzSGFzTWVzc2FnZRhVIAEoCEhQiAEBEi8KIlJlY2VpdmVkQWlyY3JhZnRN",
            "ZXNzYWdlc0Vycm9yQ291bnQYViABKAVIUYgBARIxCiRSZWNlaXZlZEFpcmNy",
            "YWZ0TWVzc2FnZXNXYXJuaW5nQ291bnQYVyABKAVIUogBARIdChBJc0luRW5n",
            "aW5lZXJNb2RlGFggASgISFOIAQESJwoaSXNMb3dOelByb3RlY3Rpb25BY3Rp",
            "dmF0ZWQYWSABKAhIVIgBARIpChxJc0hpZ2hBb0FQcm90ZWN0aW9uQWN0aXZh",
            "dGVkGFogASgISFWIAQESLgohSXNIaWdoU3RydWN0TnpQcm90ZWN0aW9uQWN0",
            "aXZhdGVkGFsgASgISFaIAQESIwoWSXNMb3dTcGVlZFBTUEFjdGl2YXRlZBhc",
            "IAEoCEhXiAEBEiQKF0lzSGlnaFNwZWVkUFNQQWN0aXZhdGVkGF0gASgISFiI",
            "AQESKQocSXNBbHRpdHVkZURyb3BGbG9vckFjdGl2YXRlZBheIAEoCEhZiAEB",
            "EisKHklzQWx0aXR1ZGVSaXNlQ2VpbGluZ0FjdGl2YXRlZBhfIAEoCEhaiAEB",
            "Eh4KEUFsdGl0dWRlRGV2aWF0aW9uGGAgASgCSFuIAQESJAoXSXNBbHRpdHVk",
            "ZURldmlhdGlvbkhpZ2gYYSABKAhIXIgBARIjChZJc0FsdGl0dWRlRGV2aWF0",
            "aW9uTG93GGIgASgISF2IAQESHgoRSXNSb2xsTG9zdENvbnRyb2wYYyABKAhI",
            "XogBARIfChJJc1BpdGNoTG9zdENvbnRyb2wYZCABKAhIX4gBARIrCh5FbWVy",
            "Z2VuY3lMYW5kQmVjYXVzZUJhdHRlcnlMb3cYZSABKAhIYIgBARIsCh9FbWVy",
            "Z2VuY3lMYW5kQmVjYXVzZUZseVRpbWVIaWdoGGYgASgISGGIAQESHwoSSXNS",
            "ZWplY3RpbmdUYWtlT2ZmGGcgASgISGKIAQESNwoMR3lyb0hGUk1TRFBTGGgg",
            "ASgLMhwuTWV0YURhdGEuUHJvdG9fR3lyb0hGUk1TRFBTSGOIAQESIAoTSXNM",
            "b2dGaWxlQWxtb3N0RnVsbBhpIAEoCEhkiAEBEigKG0VuYWJsZU9uR25kRmFz",
            "dEZpbGVUcmFuc21pdBhqIAEoCEhliAEBEh8KEk1pbmltdW1SZW1haW5SYXRp",
            "bxhrIAEoAUhmiAEBEh8KEldhcm5pbmdSZW1haW5SYXRpbxhsIAEoAUhniAEB",
            "EhgKC0RhdGVUaW1lTm93GG0gASgDSGiIAQESJgoZRGVidWdDdXJ2ZUxhc3RS",
            "ZWNlaXZlVGltZRhuIAEoA0hpiAEBEikKHExhc3RSZWNlaXZpbmdHTlNTUmF3",
            "RGF0YVRpbWUYbyABKANIaogBARIiChVBbGxHTlNTUmF3RGF0YUNvdW50ZXIY",
            "cCABKARIa4gBARIkChdJc1JlcXVlc3RPcGVuT25ib2FyZExvZxhxIAEoCEhs",
            "iAEBEh0KEElzT25ib2FyZExvZ09wZW4YciABKAhIbYgBARIiChVJc1dpbmdD",
            "cnVpc2VIYXNGYWlsZWQYcyABKAhIbogBARIcCg9Jc0VtZXJnZW5jeUxhbmQY",
            "dCABKAhIb4gBARIlChhJc0VtZXJnZW5jeUxhbmRSZXF1ZXN0ZWQYdSABKAhI",
            "cIgBARIlChhEaXNhYmxlRW1lcmdlbmN5QXV0b0xhbmQYdiABKAhIcYgBARIn",
            "ChpFbmFibGVHcm91bmREaXN0TG93V2FybmluZxh3IAEoCEhyiAEBEiAKE0lz",
            "TG93R25kRGlzdFdhcm5pbmcYeCABKAhIc4gBARIiChVJc0FHTEJ5U29uYXJB",
            "dmFpbGFibGUYeSABKAhIdIgBARIlChhMYW5kaW5nR2VhckFsdEFHTEJ5UmFk",
            "YXIYeiABKAJIdYgBARIlChhJc0xvd0FsdFByb3RlY3Rpb25BY3RpdmUYeyAB",
            "KAhIdogBARIsCh9Jc0NvbnRyb2xsZXJIZWFyaW5nRnJvbUFpcmNyYWZ0GHwg",
            "ASgISHeIAQESLAofSXNBaXJjcmFmdEhlYXJpbmdGcm9tQ29udHJvbGxlchh9",
            "IAEoCEh4iAEBEi8KIklzSW5Pbkdyb3VuZEFjdGlvbkxheWVyQ29tbWFuZE1v",
            "ZGUYfiABKAhIeYgBARIgChNIYXNNYW51YWxSQ1JlY2VpdmVyGH8gASgISHqI",
            "AQESJAoWSGFzTWFudWFsQ29udHJvbElucHV0cxiAASABKAhIe4gBARIzCiVF",
            "bmFibGVFeGNlcHRpb25XaGVuUkNSZWNlaXZlck5vU2lnbmFsGIEBIAEoCEh8",
            "iAEBEiIKFFNlbnNvckludmFsaWRNZXNzYWdlGIIBIAEoCUh9iAEBEjgKCFRh",
            "c2tNb2RlGIMBIAEoDjIgLk1ldGFEYXRhLlByb3RvX0NvbnRyb2xUYXNrTW9k",
            "ZXNIfogBARIiChRJc1BpbG90Q29udHJvbEFjdGl2ZRiEASABKAhIf4gBARI0",
            "CiVNYW51YWxDb250cm9sSW5EaXNhYmxlTW90b3JTZXJ2b1N0YXRlGIUBIAEo",
            "CEiAAYgBARIrChxDYW5FbnRlcldpbmdGbHlXaXRoUm90b3JNb2RlGIYBIAEo",
            "CEiBAYgBARIlChZDYW5FbnRlcldpbmdDcnVpc2VNb2RlGIcBIAEoCEiCAYgB",
            "ARIfChBDcnVpc2VNb3RvckNvdW50GIgBIAEoBUiDAYgBARIwCiFFbmFibGVD",
            "cnVpc2VNb3RvckluUm90b3JIb3Zlck1vZGUYiQEgASgISIQBiAEBEicKGEVu",
            "Zm9yY2VSVEtUYWtlT2ZmQW5kTGFuZBiKASABKAhIhQGIAQESNwooSXNSVEtB",
            "bmRJUlNQcmVjaXNpb25PS0ZvckF1dG9Qb3J0VGFrZU9mZhiLASABKAhIhgGI",
            "AQESLgofSXNHaW1iYWxDYW1TRENhcmREZXN0cm95UG93ZXJPbhiMASABKAhI",
            "hwGIAQESKAoZSXNHaW1iYWxDYW1lcmFOb3REZXRlY3RlZBiNASABKAhIiAGI",
            "AQESJwoYVGFyZ2V0QWx0aXR1ZGVITVNMT2Zmc2V0GI4BIAEoAkiJAYgBARIm",
            "ChdUYXJnZXRBbHRpdHVkZUFHTE9mZnNldBiPASABKAJIigGIAQESMAohSXNX",
            "aW5nQ3J1aXNlQWlyc3BlZWRQcmlvclRvSGVpZ2h0GJABIAEoCEiLAYgBAUIR",
            "Cg9fSXNSZWNlaXZpbmdIb3RCGwoZX0lzTW90b3JzQW5kU2Vydm9zRW5hYmxl",
            "ZEIZChdfSXNJblRlc3RNb3RvclNlcnZvTW9kZUIZChdfUmVjZWl2ZWRCeXRl",
            "c1BlclNlY29uZEIVChNfU2VudEJ5dGVzUGVyU2Vjb25kQhgKFl9Db25uZWN0",
            "ZWREYXRhTGlua05hbWVCKgooX0FpcmNyYWZ0VXNlRnVlbEVuZ2luZUZvckZp",
            "eGVkV2luZ0NydWlzZUIeChxfU2hvdWxkQ3J1aXNlRW5naW5lQXZhaWxhYmxl",
            "Qh8KHV9Jc0FsbENydWlzZUZ1ZWxFbmdpbmVQb3dlck9uQh8KHV9Jc0FsbENy",
            "dWlzZUZ1ZWxFbmdpbmVSdW5uaW5nQiEKH19GbGlnaHRDb250cm9sVXNlQWly",
            "c3BlZWRTZW5zb3JCEQoPX0lzVXNlUGl0b3RUdWJlQg8KDV9Jc0luU2FmZU1v",
            "ZGVCFQoTX0RvTm90VXNlQmFyb1NlbnNvckIbChlfVG90YWxSb3RvckFuZENy",
            "dWlzZVBvd2VyQhIKEF9NaW5Nb3RvclZvbHRhZ2VCHgocX01pbkJhdHRlcnlS",
            "ZW1haW5FbmVyZ3lSYXRpb0IbChlfU2hvd0Z1bGxCYXR0ZXJ5RW5kdXJhbmNl",
            "Qg0KC19Jc09uR3JvdW5kQhYKFF9BdXRvTGFuZEVuZXJneVJhdGlvQiMKIV9F",
            "bmFibGVCYXR0ZXJ5RW5lcmd5TG93QXV0b1JldHVybkIfCh1fQXV0b1JldHVy",
            "bkJhdHRlcnlFbmVyZ3lSYXRpb0IXChVfUmVtYWluQ3J1aXNlRW5lcmd5V2hC",
            "FgoUX1JlbWFpblJvdG9yRW5lcmd5V2hCDwoNX0xvbklubmVyTW9kZUIPCg1f",
            "QWlyY3JhZnRNYXNzQhEKD19UYXJnZXRGbHlTcGVlZEIYChZfQ3J1aXNlUG93",
            "ZXJFc3RpbWF0aW9uQhcKFV9DcnVpc2VFbmVyZ3lQZXJNZXRlckITChFfUmVt",
            "YWluQ3J1aXNlVGltZUITChFfUmVtYWluQ3J1aXNlRGlzdEIWChRfVlRPTFBv",
            "d2VyRXN0aW1hdGlvbkINCgtfQWlyRGVuc2l0eUIRCg9fUmVtYWluVlRPTFRp",
            "bWVCKQonX0FpcmNyYWZ0SG9yaXpEaXN0VG9MYW5kQWxvbmdGbGlnaHRQbGFu",
            "QhQKEl9IYXNGaXhlZFdpbmdNb2Rlc0ITChFfUm90b3JFeHBhbmRTdGF0ZUIX",
            "ChVfSGFzUmV0cmFjdGFibGVSb3RvcnNCGwoZX0lzQXV0b1JldHJhY3RMYW5k",
            "aW5nR2VhckIZChdfSXNMYW5kaW5nR2VhclJldHJhY3RlZEITChFfUlRLU29s",
            "dXRpb25TdGF0ZUIGCgRfTExBQg8KDV9FdWxlckFuZ2xlc0ZCEQoPX1Rhcmdl",
            "dEFsdGl0dWRlQhQKEl9SZWZlcmVuY2VBbHRpdHVkZUIPCg1fVHJ1ZUFpclNw",
            "ZWVkQhAKDl9Hcm91bmQyRFNwZWVkQhgKFl9TdHJhaWdodERpc3RUb1Rha2VP",
            "ZmZCDgoMX0ZseURpc3RhbmNlQg0KC19GbHlTZWNvbmRzQhMKEV9IYXNFc3Rp",
            "bWF0ZWRXaW5kQhUKE19Fc3RpbWF0ZWRXaW5kQW5nbGVCFQoTX0VzdGltYXRl",
            "ZFdpbmRTcGVlZEIbChlfV3JpdGVDYW1lcmFQb3NEYXRhVG9GaWxlQhsKGV9V",
            "bmRvd25sb2FkZWRQb3NEYXRhQ291bnRCHwodX0F2ZXJhZ2VSb3RvclRocnVz",
            "dFJhdGlvRm9yMUdCEAoOX1BsYW5lRU5VU3BlZWRCFAoSX0lzR05TUzJEQXZh",
            "aWxhYmxlQhUKE19Jc0dOU1NBbHRBdmFpbGFibGVCEwoRX1VzaW5nR25zc1Nh",
            "dGVOdW1CGAoWX0lzR05TU0RhdGFRdWFsaXR5R29vZEIUChJfR05TU3NvbWVO",
            "b3RVc2FibGVCFwoVX0lzSVJTUmVhZHlGb3JUYWtlb2ZmQhwKGl9Jc0luU2Vu",
            "c29yQ2FsaWJyYXRpb25Nb2RlQhAKDl9Jc0luTm9NYWdNb2RlQiQKIl9Jc1Vz",
            "aW5nVmlzdWFsUG9zaXRpb25TeXN0ZW1Gb3JJUlNCGgoYX0lzRmx5VGVzdFBh",
            "cmFtc01vZGlmaWVkQiAKHl9Jc0luQXV0b1ZlcnRQb3J0T3BlcmF0aW9uTW9k",
            "ZUIeChxfSXNBdXRvUG9ydExhbmRFbHNlQWx0ZXJMYW5kQhQKEl9Jc1ZlcnRp",
            "Y2FsTGFuZGluZ0InCiVfSXNJbkxhbmRpbmdDb25zdERlc2NlbnRBbmRBbGln",
            "blBoYXNlQicKJV9Jc1ZlcnRMYW5kUGF1c2VUb3VjaERvd25Gb3JBbGlnbm1l",
            "bnRCIgogX1ByZWNpc2lvbkxhbmRNYXhBbGxvd2FibGVFcnJvcnNCGgoYX0xh",
            "bmRpbmdHbG9iYWwyRFBvc0Vycm9yQhUKE19MYW5kQWN0aXZlWWF3QWxpZ25C",
            "FgoUX0xhbmRQYXNzaXZlWWF3QWxpZ25CGAoWX1BvcnRUYWJsZUhlYWRpbmdB",
            "bmdsZUIVChNfWWF3QW5nbGVBbGlnbkVycm9yQhwKGl9Jc1Byb3RvY29sVmVy",
            "c2lvbkNvbmZsaWN0Qh8KHV9DYW5FbnRlckhpZ2hQb3NBY2N1Um90b3JNb2Rl",
            "QhkKF19TZXJ2ZXJFcnJvcnNIYXNNZXNzYWdlQiUKI19SZWNlaXZlZEFpcmNy",
            "YWZ0TWVzc2FnZXNFcnJvckNvdW50QicKJV9SZWNlaXZlZEFpcmNyYWZ0TWVz",
            "c2FnZXNXYXJuaW5nQ291bnRCEwoRX0lzSW5FbmdpbmVlck1vZGVCHQobX0lz",
            "TG93TnpQcm90ZWN0aW9uQWN0aXZhdGVkQh8KHV9Jc0hpZ2hBb0FQcm90ZWN0",
            "aW9uQWN0aXZhdGVkQiQKIl9Jc0hpZ2hTdHJ1Y3ROelByb3RlY3Rpb25BY3Rp",
            "dmF0ZWRCGQoXX0lzTG93U3BlZWRQU1BBY3RpdmF0ZWRCGgoYX0lzSGlnaFNw",
            "ZWVkUFNQQWN0aXZhdGVkQh8KHV9Jc0FsdGl0dWRlRHJvcEZsb29yQWN0aXZh",
            "dGVkQiEKH19Jc0FsdGl0dWRlUmlzZUNlaWxpbmdBY3RpdmF0ZWRCFAoSX0Fs",
            "dGl0dWRlRGV2aWF0aW9uQhoKGF9Jc0FsdGl0dWRlRGV2aWF0aW9uSGlnaEIZ",
            "ChdfSXNBbHRpdHVkZURldmlhdGlvbkxvd0IUChJfSXNSb2xsTG9zdENvbnRy",
            "b2xCFQoTX0lzUGl0Y2hMb3N0Q29udHJvbEIhCh9fRW1lcmdlbmN5TGFuZEJl",
            "Y2F1c2VCYXR0ZXJ5TG93QiIKIF9FbWVyZ2VuY3lMYW5kQmVjYXVzZUZseVRp",
            "bWVIaWdoQhUKE19Jc1JlamVjdGluZ1Rha2VPZmZCDwoNX0d5cm9IRlJNU0RQ",
            "U0IWChRfSXNMb2dGaWxlQWxtb3N0RnVsbEIeChxfRW5hYmxlT25HbmRGYXN0",
            "RmlsZVRyYW5zbWl0QhUKE19NaW5pbXVtUmVtYWluUmF0aW9CFQoTX1dhcm5p",
            "bmdSZW1haW5SYXRpb0IOCgxfRGF0ZVRpbWVOb3dCHAoaX0RlYnVnQ3VydmVM",
            "YXN0UmVjZWl2ZVRpbWVCHwodX0xhc3RSZWNlaXZpbmdHTlNTUmF3RGF0YVRp",
            "bWVCGAoWX0FsbEdOU1NSYXdEYXRhQ291bnRlckIaChhfSXNSZXF1ZXN0T3Bl",
            "bk9uYm9hcmRMb2dCEwoRX0lzT25ib2FyZExvZ09wZW5CGAoWX0lzV2luZ0Ny",
            "dWlzZUhhc0ZhaWxlZEISChBfSXNFbWVyZ2VuY3lMYW5kQhsKGV9Jc0VtZXJn",
            "ZW5jeUxhbmRSZXF1ZXN0ZWRCGwoZX0Rpc2FibGVFbWVyZ2VuY3lBdXRvTGFu",
            "ZEIdChtfRW5hYmxlR3JvdW5kRGlzdExvd1dhcm5pbmdCFgoUX0lzTG93R25k",
            "RGlzdFdhcm5pbmdCGAoWX0lzQUdMQnlTb25hckF2YWlsYWJsZUIbChlfTGFu",
            "ZGluZ0dlYXJBbHRBR0xCeVJhZGFyQhsKGV9Jc0xvd0FsdFByb3RlY3Rpb25B",
            "Y3RpdmVCIgogX0lzQ29udHJvbGxlckhlYXJpbmdGcm9tQWlyY3JhZnRCIgog",
            "X0lzQWlyY3JhZnRIZWFyaW5nRnJvbUNvbnRyb2xsZXJCJQojX0lzSW5Pbkdy",
            "b3VuZEFjdGlvbkxheWVyQ29tbWFuZE1vZGVCFgoUX0hhc01hbnVhbFJDUmVj",
            "ZWl2ZXJCGQoXX0hhc01hbnVhbENvbnRyb2xJbnB1dHNCKAomX0VuYWJsZUV4",
            "Y2VwdGlvbldoZW5SQ1JlY2VpdmVyTm9TaWduYWxCFwoVX1NlbnNvckludmFs",
            "aWRNZXNzYWdlQgsKCV9UYXNrTW9kZUIXChVfSXNQaWxvdENvbnRyb2xBY3Rp",
            "dmVCKAomX01hbnVhbENvbnRyb2xJbkRpc2FibGVNb3RvclNlcnZvU3RhdGVC",
            "HwodX0NhbkVudGVyV2luZ0ZseVdpdGhSb3Rvck1vZGVCGQoXX0NhbkVudGVy",
            "V2luZ0NydWlzZU1vZGVCEwoRX0NydWlzZU1vdG9yQ291bnRCJAoiX0VuYWJs",
            "ZUNydWlzZU1vdG9ySW5Sb3RvckhvdmVyTW9kZUIbChlfRW5mb3JjZVJUS1Rh",
            "a2VPZmZBbmRMYW5kQisKKV9Jc1JUS0FuZElSU1ByZWNpc2lvbk9LRm9yQXV0",
            "b1BvcnRUYWtlT2ZmQiIKIF9Jc0dpbWJhbENhbVNEQ2FyZERlc3Ryb3lQb3dl",
            "ck9uQhwKGl9Jc0dpbWJhbENhbWVyYU5vdERldGVjdGVkQhsKGV9UYXJnZXRB",
            "bHRpdHVkZUhNU0xPZmZzZXRCGgoYX1RhcmdldEFsdGl0dWRlQUdMT2Zmc2V0",
            "QiQKIl9Jc1dpbmdDcnVpc2VBaXJzcGVlZFByaW9yVG9IZWlnaHRiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MetaData.MetaDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_TestInfo), global::Proto3FlightInfo.Proto_TestInfo.Parser, new[]{ "IsUsingBattery", "IsUsingFuel", "FuelRemaining1", "FuelRemaining2", "MinMotorVoltage1", "MinMotorVoltage2", "CruiseFuelEngineRPMs1", "CruiseFuelEngineRPMs2", "Milliseconds1", "Milliseconds2", "BatteryCurrent", "BatteryRemaining", "TestString", "TestStrings", "MessageLevel", "MessageLevels", "LLA", "Messages" }, new[]{ "IsUsingBattery", "IsUsingFuel", "FuelRemaining1", "FuelRemaining2", "MinMotorVoltage1", "MinMotorVoltage2", "TestString", "MessageLevel", "LLA" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_FlyBaseStatus), global::Proto3FlightInfo.Proto_FlyBaseStatus.Parser, new[]{ "Name", "Milliseconds", "AirSpeed", "GroundSpeed", "Mode", "Position", "Orientation", "IsInOnGround", "Mass", "ProductModel", "RH" }, new[]{ "Milliseconds", "AirSpeed", "GroundSpeed", "Mode", "Position", "Orientation", "IsInOnGround", "Mass", "ProductModel", "RH" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_PowerInfo), global::Proto3FlightInfo.Proto_PowerInfo.Parser, new[]{ "IsUsingBattery", "BatteryVoltage", "BatteryCurrent", "BatteryRemaining", "BatteryCapacity", "IsUsingFuel", "FuelRemaining" }, new[]{ "IsUsingBattery", "IsUsingFuel", "FuelRemaining" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_TaskStatus), global::Proto3FlightInfo.Proto_TaskStatus.Parser, new[]{ "Mode", "ControlTaskStates", "IsInOnGround", "FlyTime", "FlyDistance" }, new[]{ "Mode", "ControlTaskStates", "IsInOnGround", "FlyTime", "FlyDistance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_FlightPlanParams), global::Proto3FlightInfo.Proto_FlightPlanParams.Parser, new[]{ "DefaultTurningRadius", "MinTurningRadius", "DefaultCircleRadius", "MinCircleRadius", "DefaultVerticalTakeOffRelativeHeight", "DefaultTakeOffClimbRelativeHeight", "DefaultVerticalLandHeight", "HasTakeOffAndLandClimbCircle", "DefaultTakeOffAndLandCircleDistance", "MaxTakeOffAndLandCircleDistance", "AltitudeChangeCirclePreviewClimbAngleAbs", "LandDescentAngleAbs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_AircraftStatesForFlightPlan), global::Proto3FlightInfo.Proto_AircraftStatesForFlightPlan.Parser, new[]{ "TargetCruiseSpeed", "VTOLClimbSpeed", "VTOLDescentSpeed", "AircraftOriginHeightAboveLandingGearBottom" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_AltitudeDefInfo), global::Proto3FlightInfo.Proto_AltitudeDefInfo.Parser, new[]{ "AircraftReferenceAltitude", "MinAltAGL", "MaxAltAGL" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_FlyProgress), global::Proto3FlightInfo.Proto_FlyProgress.Parser, new[]{ "Milliseconds", "TaskState", "ScheduleID", "CurrentPlanItemIndex", "HorizNaviMode", "VertNaviMode", "LonInnerMode", "LatInnerMode", "RotorExpandState", "CargoState", "EquivSeaLevelAirspeed", "AirDensity", "ReferenceAltitude", "TargetAltitude", "LandingGearAltAGLByRadar", "DetectedGroundAltitude", "DiagnosticActionType", "FlyDistance", "CurrentPlanItemOrTemporaryPathCompletePercent", "GotoThisPointAfterTakeoffSectionFinished", "FlySeconds", "TargetFlySpeed", "MagneticConfiguration", "WingCruiseLonOverrideMode", "IsAllCruiseFuelEnginePowerOn", "IsAllCruiseFuelEngineRunning", "ShouldCruiseEngineAvailable", "IsOnGround", "IsCmdRotorExpand", "IsCmdCargoLock", "IsAGLBySonarAvailable", "IsInTestMotorServoMode", "IsUsePitotTube", "IsMotorsAndServosEnabled", "HasLiftedOff", "IsFlightScheduleHasFinished", "IsPilotControlActive", "IsWingCruiseHasFailed", "IsEmergencyLandRequested", "IsEmergencyLand", "HasException", "IsInSafeMode", "IsInTemporaryPath", "IsGNSSDataQualityGood", "IsRejectingTakeOff", "IsBreakPointRecorded", "IsInHighPosAccuracyRotorModes", "IsTargetAltitudeAGL", "IsPosFileOpen", "IsCameraAutoShootPeriodically", "IsRequestOpenOnboardLog", "IsOnboardLogOpen", "EnableFlightControlBoardAutoHeater", "IsAutoSelfDriveSpeed", "IsTargetAirspeedElseGndspeed", "IsLowAltitudeProtection" }, new[]{ "Milliseconds", "TaskState", "ScheduleID", "CurrentPlanItemIndex", "HorizNaviMode", "VertNaviMode", "LonInnerMode", "LatInnerMode", "RotorExpandState", "CargoState", "EquivSeaLevelAirspeed", "AirDensity", "ReferenceAltitude", "TargetAltitude", "LandingGearAltAGLByRadar", "DetectedGroundAltitude", "DiagnosticActionType", "FlyDistance", "CurrentPlanItemOrTemporaryPathCompletePercent", "GotoThisPointAfterTakeoffSectionFinished", "FlySeconds", "TargetFlySpeed", "MagneticConfiguration", "WingCruiseLonOverrideMode", "IsAllCruiseFuelEnginePowerOn", "IsAllCruiseFuelEngineRunning", "ShouldCruiseEngineAvailable", "IsOnGround", "IsCmdRotorExpand", "IsCmdCargoLock", "IsAGLBySonarAvailable", "IsInTestMotorServoMode", "IsUsePitotTube", "IsMotorsAndServosEnabled", "HasLiftedOff", "IsFlightScheduleHasFinished", "IsPilotControlActive", "IsWingCruiseHasFailed", "IsEmergencyLandRequested", "IsEmergencyLand", "HasException", "IsInSafeMode", "IsInTemporaryPath", "IsGNSSDataQualityGood", "IsRejectingTakeOff", "IsBreakPointRecorded", "IsInHighPosAccuracyRotorModes", "IsTargetAltitudeAGL", "IsPosFileOpen", "IsCameraAutoShootPeriodically", "IsRequestOpenOnboardLog", "IsOnboardLogOpen", "EnableFlightControlBoardAutoHeater", "IsAutoSelfDriveSpeed", "IsTargetAirspeedElseGndspeed", "IsLowAltitudeProtection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_AircraftSetting), global::Proto3FlightInfo.Proto_AircraftSetting.Parser, new[]{ "AircraftName", "IsOpenEngine", "IsLowAltitudeProtection", "IsEnableBatteryEnergyLowAutoReturn", "IsEnableFlyPlanModeAutoReturnWhenLinkLost", "IsEnableExitRICModeWhenLinkLost", "IsDisableEmergencyAutoLand", "IsAutoVertPortMode", "IsAutoSelfDriveAirspeed", "IsForceExpandRotorsOnGround", "Payload" }, new[]{ "IsOpenEngine", "IsLowAltitudeProtection", "IsEnableBatteryEnergyLowAutoReturn", "IsEnableFlyPlanModeAutoReturnWhenLinkLost", "IsEnableExitRICModeWhenLinkLost", "IsDisableEmergencyAutoLand", "IsAutoVertPortMode", "IsAutoSelfDriveAirspeed", "IsForceExpandRotorsOnGround", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_AircraftPayloadSetting), global::Proto3FlightInfo.Proto_AircraftPayloadSetting.Parser, new[]{ "IsStopRecordOnLand", "IsBeginRecordOnTakeOff", "IsGimbalCameraSDCardDestroyPowerOn", "IsCameraRecordingVideo", "IsOSDEnabled", "IsRangerEnabled", "IsYawFollowEnabled" }, new[]{ "IsStopRecordOnLand", "IsBeginRecordOnTakeOff", "IsGimbalCameraSDCardDestroyPowerOn", "IsCameraRecordingVideo", "IsOSDEnabled", "IsRangerEnabled", "IsYawFollowEnabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_GnssInfo), global::Proto3FlightInfo.Proto_GnssInfo.Parser, new[]{ "PositioningStatus", "RTKState", "Position", "SateNum" }, new[]{ "PositioningStatus", "RTKState", "Position", "SateNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_AircraftMessage), global::Proto3FlightInfo.Proto_AircraftMessage.Parser, new[]{ "Level", "Message", "TimeStamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.AircraftControlCenterMessages), global::Proto3FlightInfo.AircraftControlCenterMessages.Parser, new[]{ "Messages" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_AircraftMessages), global::Proto3FlightInfo.Proto_AircraftMessages.Parser, new[]{ "Messages" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Porto_BoolDouble), global::Proto3FlightInfo.Porto_BoolDouble.Parser, new[]{ "BoolValue", "DoubleValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_AttitudeIndicator), global::Proto3FlightInfo.Proto_AttitudeIndicator.Parser, new[]{ "PlaneLLA", "PlaneOrientation", "PlaneBodyFrameSpeed", "PlaneENUSpeed", "CalibratedAirspeed", "BatteryRemainEnergyRatio", "PlaneAGL", "PlaneRelativeHeight", "PlanePitchErrorLowSpdPSP", "PlanePitchErrorHighSpdPSP", "BodyFrameZAccel", "CruiseThrottleRatio", "RotorThrustRatio", "AoA" }, new[]{ "PlaneLLA", "PlaneOrientation", "PlaneBodyFrameSpeed", "PlaneENUSpeed", "CalibratedAirspeed", "BatteryRemainEnergyRatio", "PlaneAGL", "PlaneRelativeHeight", "PlanePitchErrorLowSpdPSP", "PlanePitchErrorHighSpdPSP", "BodyFrameZAccel", "CruiseThrottleRatio", "RotorThrustRatio", "AoA" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_FlightPlan), global::Proto3FlightInfo.Proto_FlightPlan.Parser, new[]{ "FlightPlan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto3FlightInfo.Proto_GenerateInfo), global::Proto3FlightInfo.Proto_GenerateInfo.Parser, new[]{ "IsReceivingHot", "IsMotorsAndServosEnabled", "IsInTestMotorServoMode", "ReceivedBytesPerSecond", "SentBytesPerSecond", "ConnectedDataLinkName", "AircraftUseFuelEngineForFixedWingCruise", "ActualThrottleServoPosition", "CylinderHeadMaxTemperature", "EstimatedPropellerThrustN", "CruiseFuelEngineRPMs", "ShouldCruiseEngineAvailable", "IsAllCruiseFuelEnginePowerOn", "IsAllCruiseFuelEngineRunning", "FlightControlUseAirspeedSensor", "IsUsePitotTube", "IsInSafeMode", "DoNotUseBaroSensor", "TotalRotorAndCruisePower", "MinMotorVoltage", "MinBatteryRemainEnergyRatio", "ShowFullBatteryEndurance", "IsOnGround", "AutoLandEnergyRatio", "EnableBatteryEnergyLowAutoReturn", "AutoReturnBatteryEnergyRatio", "RemainCruiseEnergyWh", "RemainRotorEnergyWh", "LonInnerMode", "AircraftMass", "TargetFlySpeed", "CruisePowerEstimation", "CruiseEnergyPerMeter", "RemainCruiseTime", "RemainCruiseDist", "VTOLPowerEstimation", "AirDensity", "RemainVTOLTime", "AircraftHorizDistToLandAlongFlightPlan", "HasFixedWingModes", "RotorExpandState", "HasRetractableRotors", "IsAutoRetractLandingGear", "IsLandingGearRetracted", "RTKSolutionState", "LLA", "EulerAnglesF", "TargetAltitude", "ReferenceAltitude", "TrueAirSpeed", "Ground2DSpeed", "StraightDistToTakeOff", "FlyDistance", "FlySeconds", "HasEstimatedWind", "EstimatedWindAngle", "EstimatedWindSpeed", "WriteCameraPosDataToFile", "UndownloadedPosDataCount", "AverageRotorThrustRatioFor1G", "PlaneENUSpeed", "IsGNSS2DAvailable", "IsGNSSAltAvailable", "UsingGnssSateNum", "IsGNSSDataQualityGood", "GNSSsomeNotUsable", "IsIRSReadyForTakeoff", "IsInSensorCalibrationMode", "IsInNoMagMode", "IsUsingVisualPositionSystemForIRS", "IsFlyTestParamsModified", "IsInAutoVertPortOperationMode", "IsAutoPortLandElseAlterLand", "IsVerticalLanding", "IsInLandingConstDescentAndAlignPhase", "IsVertLandPauseTouchDownForAlignment", "PrecisionLandMaxAllowableErrors", "LandingGlobal2DPosError", "LandActiveYawAlign", "LandPassiveYawAlign", "PortTableHeadingAngle", "YawAngleAlignError", "IsProtocolVersionConflict", "CanEnterHighPosAccuRotorMode", "ServerErrorsHasMessage", "ReceivedAircraftMessagesErrorCount", "ReceivedAircraftMessagesWarningCount", "IsInEngineerMode", "IsLowNzProtectionActivated", "IsHighAoAProtectionActivated", "IsHighStructNzProtectionActivated", "IsLowSpeedPSPActivated", "IsHighSpeedPSPActivated", "IsAltitudeDropFloorActivated", "IsAltitudeRiseCeilingActivated", "AltitudeDeviation", "IsAltitudeDeviationHigh", "IsAltitudeDeviationLow", "IsRollLostControl", "IsPitchLostControl", "EmergencyLandBecauseBatteryLow", "EmergencyLandBecauseFlyTimeHigh", "IsRejectingTakeOff", "GyroHFRMSDPS", "IsLogFileAlmostFull", "EnableOnGndFastFileTransmit", "MinimumRemainRatio", "WarningRemainRatio", "DateTimeNow", "DebugCurveLastReceiveTime", "LastReceivingGNSSRawDataTime", "AllGNSSRawDataCounter", "IsRequestOpenOnboardLog", "IsOnboardLogOpen", "IsWingCruiseHasFailed", "IsEmergencyLand", "IsEmergencyLandRequested", "DisableEmergencyAutoLand", "EnableGroundDistLowWarning", "IsLowGndDistWarning", "IsAGLBySonarAvailable", "LandingGearAltAGLByRadar", "IsLowAltProtectionActive", "IsControllerHearingFromAircraft", "IsAircraftHearingFromController", "IsInOnGroundActionLayerCommandMode", "HasManualRCReceiver", "HasManualControlInputs", "EnableExceptionWhenRCReceiverNoSignal", "SensorInvalidMessage", "TaskMode", "IsPilotControlActive", "ManualControlInDisableMotorServoState", "CanEnterWingFlyWithRotorMode", "CanEnterWingCruiseMode", "CruiseMotorCount", "EnableCruiseMotorInRotorHoverMode", "EnforceRTKTakeOffAndLand", "IsRTKAndIRSPrecisionOKForAutoPortTakeOff", "IsGimbalCamSDCardDestroyPowerOn", "IsGimbalCameraNotDetected", "TargetAltitudeHMSLOffset", "TargetAltitudeAGLOffset", "IsWingCruiseAirspeedPriorToHeight" }, new[]{ "IsReceivingHot", "IsMotorsAndServosEnabled", "IsInTestMotorServoMode", "ReceivedBytesPerSecond", "SentBytesPerSecond", "ConnectedDataLinkName", "AircraftUseFuelEngineForFixedWingCruise", "ShouldCruiseEngineAvailable", "IsAllCruiseFuelEnginePowerOn", "IsAllCruiseFuelEngineRunning", "FlightControlUseAirspeedSensor", "IsUsePitotTube", "IsInSafeMode", "DoNotUseBaroSensor", "TotalRotorAndCruisePower", "MinMotorVoltage", "MinBatteryRemainEnergyRatio", "ShowFullBatteryEndurance", "IsOnGround", "AutoLandEnergyRatio", "EnableBatteryEnergyLowAutoReturn", "AutoReturnBatteryEnergyRatio", "RemainCruiseEnergyWh", "RemainRotorEnergyWh", "LonInnerMode", "AircraftMass", "TargetFlySpeed", "CruisePowerEstimation", "CruiseEnergyPerMeter", "RemainCruiseTime", "RemainCruiseDist", "VTOLPowerEstimation", "AirDensity", "RemainVTOLTime", "AircraftHorizDistToLandAlongFlightPlan", "HasFixedWingModes", "RotorExpandState", "HasRetractableRotors", "IsAutoRetractLandingGear", "IsLandingGearRetracted", "RTKSolutionState", "LLA", "EulerAnglesF", "TargetAltitude", "ReferenceAltitude", "TrueAirSpeed", "Ground2DSpeed", "StraightDistToTakeOff", "FlyDistance", "FlySeconds", "HasEstimatedWind", "EstimatedWindAngle", "EstimatedWindSpeed", "WriteCameraPosDataToFile", "UndownloadedPosDataCount", "AverageRotorThrustRatioFor1G", "PlaneENUSpeed", "IsGNSS2DAvailable", "IsGNSSAltAvailable", "UsingGnssSateNum", "IsGNSSDataQualityGood", "GNSSsomeNotUsable", "IsIRSReadyForTakeoff", "IsInSensorCalibrationMode", "IsInNoMagMode", "IsUsingVisualPositionSystemForIRS", "IsFlyTestParamsModified", "IsInAutoVertPortOperationMode", "IsAutoPortLandElseAlterLand", "IsVerticalLanding", "IsInLandingConstDescentAndAlignPhase", "IsVertLandPauseTouchDownForAlignment", "PrecisionLandMaxAllowableErrors", "LandingGlobal2DPosError", "LandActiveYawAlign", "LandPassiveYawAlign", "PortTableHeadingAngle", "YawAngleAlignError", "IsProtocolVersionConflict", "CanEnterHighPosAccuRotorMode", "ServerErrorsHasMessage", "ReceivedAircraftMessagesErrorCount", "ReceivedAircraftMessagesWarningCount", "IsInEngineerMode", "IsLowNzProtectionActivated", "IsHighAoAProtectionActivated", "IsHighStructNzProtectionActivated", "IsLowSpeedPSPActivated", "IsHighSpeedPSPActivated", "IsAltitudeDropFloorActivated", "IsAltitudeRiseCeilingActivated", "AltitudeDeviation", "IsAltitudeDeviationHigh", "IsAltitudeDeviationLow", "IsRollLostControl", "IsPitchLostControl", "EmergencyLandBecauseBatteryLow", "EmergencyLandBecauseFlyTimeHigh", "IsRejectingTakeOff", "GyroHFRMSDPS", "IsLogFileAlmostFull", "EnableOnGndFastFileTransmit", "MinimumRemainRatio", "WarningRemainRatio", "DateTimeNow", "DebugCurveLastReceiveTime", "LastReceivingGNSSRawDataTime", "AllGNSSRawDataCounter", "IsRequestOpenOnboardLog", "IsOnboardLogOpen", "IsWingCruiseHasFailed", "IsEmergencyLand", "IsEmergencyLandRequested", "DisableEmergencyAutoLand", "EnableGroundDistLowWarning", "IsLowGndDistWarning", "IsAGLBySonarAvailable", "LandingGearAltAGLByRadar", "IsLowAltProtectionActive", "IsControllerHearingFromAircraft", "IsAircraftHearingFromController", "IsInOnGroundActionLayerCommandMode", "HasManualRCReceiver", "HasManualControlInputs", "EnableExceptionWhenRCReceiverNoSignal", "SensorInvalidMessage", "TaskMode", "IsPilotControlActive", "ManualControlInDisableMotorServoState", "CanEnterWingFlyWithRotorMode", "CanEnterWingCruiseMode", "CruiseMotorCount", "EnableCruiseMotorInRotorHoverMode", "EnforceRTKTakeOffAndLand", "IsRTKAndIRSPrecisionOKForAutoPortTakeOff", "IsGimbalCamSDCardDestroyPowerOn", "IsGimbalCameraNotDetected", "TargetAltitudeHMSLOffset", "TargetAltitudeAGLOffset", "IsWingCruiseAirspeedPriorToHeight" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Proto_TestInfo : pb::IMessage<Proto_TestInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_TestInfo> _parser = new pb::MessageParser<Proto_TestInfo>(() => new Proto_TestInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_TestInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_TestInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_TestInfo(Proto_TestInfo other) : this() {
      _hasBits0 = other._hasBits0;
      isUsingBattery_ = other.isUsingBattery_;
      isUsingFuel_ = other.isUsingFuel_;
      fuelRemaining1_ = other.fuelRemaining1_;
      fuelRemaining2_ = other.fuelRemaining2_;
      minMotorVoltage1_ = other.minMotorVoltage1_;
      minMotorVoltage2_ = other.minMotorVoltage2_;
      cruiseFuelEngineRPMs1_ = other.cruiseFuelEngineRPMs1_.Clone();
      cruiseFuelEngineRPMs2_ = other.cruiseFuelEngineRPMs2_.Clone();
      milliseconds1_ = other.milliseconds1_.Clone();
      milliseconds2_ = other.milliseconds2_.Clone();
      batteryCurrent_ = other.batteryCurrent_.Clone();
      batteryRemaining_ = other.batteryRemaining_.Clone();
      testString_ = other.testString_;
      testStrings_ = other.testStrings_.Clone();
      messageLevel_ = other.messageLevel_;
      messageLevels_ = other.messageLevels_.Clone();
      lLA_ = other.lLA_ != null ? other.lLA_.Clone() : null;
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_TestInfo Clone() {
      return new Proto_TestInfo(this);
    }

    /// <summary>Field number for the "IsUsingBattery" field.</summary>
    public const int IsUsingBatteryFieldNumber = 1;
    private readonly static bool IsUsingBatteryDefaultValue = false;

    private bool isUsingBattery_;
    /// <summary>
    /// 是否使用电池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUsingBattery {
      get { if ((_hasBits0 & 1) != 0) { return isUsingBattery_; } else { return IsUsingBatteryDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isUsingBattery_ = value;
      }
    }
    /// <summary>Gets whether the "IsUsingBattery" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsUsingBattery {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "IsUsingBattery" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsUsingBattery() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "IsUsingFuel" field.</summary>
    public const int IsUsingFuelFieldNumber = 2;
    private readonly static bool IsUsingFuelDefaultValue = false;

    private bool isUsingFuel_;
    /// <summary>
    /// 是否使用油箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUsingFuel {
      get { if ((_hasBits0 & 2) != 0) { return isUsingFuel_; } else { return IsUsingFuelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isUsingFuel_ = value;
      }
    }
    /// <summary>Gets whether the "IsUsingFuel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsUsingFuel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsUsingFuel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsUsingFuel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "FuelRemaining1" field.</summary>
    public const int FuelRemaining1FieldNumber = 3;
    private readonly static int FuelRemaining1DefaultValue = 0;

    private int fuelRemaining1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FuelRemaining1 {
      get { if ((_hasBits0 & 4) != 0) { return fuelRemaining1_; } else { return FuelRemaining1DefaultValue; } }
      set {
        _hasBits0 |= 4;
        fuelRemaining1_ = value;
      }
    }
    /// <summary>Gets whether the "FuelRemaining1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFuelRemaining1 {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "FuelRemaining1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFuelRemaining1() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "FuelRemaining2" field.</summary>
    public const int FuelRemaining2FieldNumber = 4;
    private readonly static int FuelRemaining2DefaultValue = 0;

    private int fuelRemaining2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FuelRemaining2 {
      get { if ((_hasBits0 & 8) != 0) { return fuelRemaining2_; } else { return FuelRemaining2DefaultValue; } }
      set {
        _hasBits0 |= 8;
        fuelRemaining2_ = value;
      }
    }
    /// <summary>Gets whether the "FuelRemaining2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFuelRemaining2 {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "FuelRemaining2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFuelRemaining2() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "MinMotorVoltage1" field.</summary>
    public const int MinMotorVoltage1FieldNumber = 5;
    private readonly static float MinMotorVoltage1DefaultValue = 0F;

    private float minMotorVoltage1_;
    /// <summary>
    /// 油箱剩余油量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinMotorVoltage1 {
      get { if ((_hasBits0 & 16) != 0) { return minMotorVoltage1_; } else { return MinMotorVoltage1DefaultValue; } }
      set {
        _hasBits0 |= 16;
        minMotorVoltage1_ = value;
      }
    }
    /// <summary>Gets whether the "MinMotorVoltage1" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinMotorVoltage1 {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "MinMotorVoltage1" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinMotorVoltage1() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "MinMotorVoltage2" field.</summary>
    public const int MinMotorVoltage2FieldNumber = 6;
    private readonly static float MinMotorVoltage2DefaultValue = 0F;

    private float minMotorVoltage2_;
    /// <summary>
    /// 油箱剩余油量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinMotorVoltage2 {
      get { if ((_hasBits0 & 32) != 0) { return minMotorVoltage2_; } else { return MinMotorVoltage2DefaultValue; } }
      set {
        _hasBits0 |= 32;
        minMotorVoltage2_ = value;
      }
    }
    /// <summary>Gets whether the "MinMotorVoltage2" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinMotorVoltage2 {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "MinMotorVoltage2" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinMotorVoltage2() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "CruiseFuelEngineRPMs1" field.</summary>
    public const int CruiseFuelEngineRPMs1FieldNumber = 7;
    private static readonly pb::FieldCodec<bool> _repeated_cruiseFuelEngineRPMs1_codec
        = pb::FieldCodec.ForBool(58);
    private readonly pbc::RepeatedField<bool> cruiseFuelEngineRPMs1_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// int16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<bool> CruiseFuelEngineRPMs1 {
      get { return cruiseFuelEngineRPMs1_; }
    }

    /// <summary>Field number for the "CruiseFuelEngineRPMs2" field.</summary>
    public const int CruiseFuelEngineRPMs2FieldNumber = 8;
    private static readonly pb::FieldCodec<bool> _repeated_cruiseFuelEngineRPMs2_codec
        = pb::FieldCodec.ForBool(66);
    private readonly pbc::RepeatedField<bool> cruiseFuelEngineRPMs2_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// int16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<bool> CruiseFuelEngineRPMs2 {
      get { return cruiseFuelEngineRPMs2_; }
    }

    /// <summary>Field number for the "Milliseconds1" field.</summary>
    public const int Milliseconds1FieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_milliseconds1_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> milliseconds1_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// int16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Milliseconds1 {
      get { return milliseconds1_; }
    }

    /// <summary>Field number for the "Milliseconds2" field.</summary>
    public const int Milliseconds2FieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_milliseconds2_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> milliseconds2_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// int16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Milliseconds2 {
      get { return milliseconds2_; }
    }

    /// <summary>Field number for the "BatteryCurrent" field.</summary>
    public const int BatteryCurrentFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_batteryCurrent_codec
        = pb::FieldCodec.ForFloat(90);
    private readonly pbc::RepeatedField<float> batteryCurrent_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 电池电流
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> BatteryCurrent {
      get { return batteryCurrent_; }
    }

    /// <summary>Field number for the "BatteryRemaining" field.</summary>
    public const int BatteryRemainingFieldNumber = 12;
    private static readonly pb::FieldCodec<float> _repeated_batteryRemaining_codec
        = pb::FieldCodec.ForFloat(98);
    private readonly pbc::RepeatedField<float> batteryRemaining_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 电池剩余电量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> BatteryRemaining {
      get { return batteryRemaining_; }
    }

    /// <summary>Field number for the "TestString" field.</summary>
    public const int TestStringFieldNumber = 13;
    private readonly static string TestStringDefaultValue = "";

    private string testString_;
    /// <summary>
    /// string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TestString {
      get { return testString_ ?? TestStringDefaultValue; }
      set {
        testString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "TestString" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTestString {
      get { return testString_ != null; }
    }
    /// <summary>Clears the value of the "TestString" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTestString() {
      testString_ = null;
    }

    /// <summary>Field number for the "TestStrings" field.</summary>
    public const int TestStringsFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_testStrings_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> testStrings_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// repeated string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> TestStrings {
      get { return testStrings_; }
    }

    /// <summary>Field number for the "MessageLevel" field.</summary>
    public const int MessageLevelFieldNumber = 15;
    private readonly static global::MetaData.Proto_MessageLevel MessageLevelDefaultValue = global::MetaData.Proto_MessageLevel.Info;

    private global::MetaData.Proto_MessageLevel messageLevel_;
    /// <summary>
    /// 枚举enum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_MessageLevel MessageLevel {
      get { if ((_hasBits0 & 64) != 0) { return messageLevel_; } else { return MessageLevelDefaultValue; } }
      set {
        _hasBits0 |= 64;
        messageLevel_ = value;
      }
    }
    /// <summary>Gets whether the "MessageLevel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMessageLevel {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "MessageLevel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMessageLevel() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "MessageLevels" field.</summary>
    public const int MessageLevelsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::MetaData.Proto_MessageLevel> _repeated_messageLevels_codec
        = pb::FieldCodec.ForEnum(130, x => (int) x, x => (global::MetaData.Proto_MessageLevel) x);
    private readonly pbc::RepeatedField<global::MetaData.Proto_MessageLevel> messageLevels_ = new pbc::RepeatedField<global::MetaData.Proto_MessageLevel>();
    /// <summary>
    /// 枚举enum
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::MetaData.Proto_MessageLevel> MessageLevels {
      get { return messageLevels_; }
    }

    /// <summary>Field number for the "LLA" field.</summary>
    public const int LLAFieldNumber = 17;
    private global::MetaData.Proto_LLA lLA_;
    /// <summary>
    /// message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_LLA LLA {
      get { return lLA_; }
      set {
        lLA_ = value;
      }
    }

    /// <summary>Field number for the "Messages" field.</summary>
    public const int MessagesFieldNumber = 18;
    private static readonly pb::FieldCodec<global::MetaData.Proto_LLA> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(146, global::MetaData.Proto_LLA.Parser);
    private readonly pbc::RepeatedField<global::MetaData.Proto_LLA> messages_ = new pbc::RepeatedField<global::MetaData.Proto_LLA>();
    /// <summary>
    /// repeated message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::MetaData.Proto_LLA> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_TestInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_TestInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsUsingBattery != other.IsUsingBattery) return false;
      if (IsUsingFuel != other.IsUsingFuel) return false;
      if (FuelRemaining1 != other.FuelRemaining1) return false;
      if (FuelRemaining2 != other.FuelRemaining2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinMotorVoltage1, other.MinMotorVoltage1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinMotorVoltage2, other.MinMotorVoltage2)) return false;
      if(!cruiseFuelEngineRPMs1_.Equals(other.cruiseFuelEngineRPMs1_)) return false;
      if(!cruiseFuelEngineRPMs2_.Equals(other.cruiseFuelEngineRPMs2_)) return false;
      if(!milliseconds1_.Equals(other.milliseconds1_)) return false;
      if(!milliseconds2_.Equals(other.milliseconds2_)) return false;
      if(!batteryCurrent_.Equals(other.batteryCurrent_)) return false;
      if(!batteryRemaining_.Equals(other.batteryRemaining_)) return false;
      if (TestString != other.TestString) return false;
      if(!testStrings_.Equals(other.testStrings_)) return false;
      if (MessageLevel != other.MessageLevel) return false;
      if(!messageLevels_.Equals(other.messageLevels_)) return false;
      if (!object.Equals(LLA, other.LLA)) return false;
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsUsingBattery) hash ^= IsUsingBattery.GetHashCode();
      if (HasIsUsingFuel) hash ^= IsUsingFuel.GetHashCode();
      if (HasFuelRemaining1) hash ^= FuelRemaining1.GetHashCode();
      if (HasFuelRemaining2) hash ^= FuelRemaining2.GetHashCode();
      if (HasMinMotorVoltage1) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinMotorVoltage1);
      if (HasMinMotorVoltage2) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinMotorVoltage2);
      hash ^= cruiseFuelEngineRPMs1_.GetHashCode();
      hash ^= cruiseFuelEngineRPMs2_.GetHashCode();
      hash ^= milliseconds1_.GetHashCode();
      hash ^= milliseconds2_.GetHashCode();
      hash ^= batteryCurrent_.GetHashCode();
      hash ^= batteryRemaining_.GetHashCode();
      if (HasTestString) hash ^= TestString.GetHashCode();
      hash ^= testStrings_.GetHashCode();
      if (HasMessageLevel) hash ^= MessageLevel.GetHashCode();
      hash ^= messageLevels_.GetHashCode();
      if (lLA_ != null) hash ^= LLA.GetHashCode();
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsUsingBattery) {
        output.WriteRawTag(8);
        output.WriteBool(IsUsingBattery);
      }
      if (HasIsUsingFuel) {
        output.WriteRawTag(16);
        output.WriteBool(IsUsingFuel);
      }
      if (HasFuelRemaining1) {
        output.WriteRawTag(24);
        output.WriteInt32(FuelRemaining1);
      }
      if (HasFuelRemaining2) {
        output.WriteRawTag(32);
        output.WriteInt32(FuelRemaining2);
      }
      if (HasMinMotorVoltage1) {
        output.WriteRawTag(45);
        output.WriteFloat(MinMotorVoltage1);
      }
      if (HasMinMotorVoltage2) {
        output.WriteRawTag(53);
        output.WriteFloat(MinMotorVoltage2);
      }
      cruiseFuelEngineRPMs1_.WriteTo(output, _repeated_cruiseFuelEngineRPMs1_codec);
      cruiseFuelEngineRPMs2_.WriteTo(output, _repeated_cruiseFuelEngineRPMs2_codec);
      milliseconds1_.WriteTo(output, _repeated_milliseconds1_codec);
      milliseconds2_.WriteTo(output, _repeated_milliseconds2_codec);
      batteryCurrent_.WriteTo(output, _repeated_batteryCurrent_codec);
      batteryRemaining_.WriteTo(output, _repeated_batteryRemaining_codec);
      if (HasTestString) {
        output.WriteRawTag(106);
        output.WriteString(TestString);
      }
      testStrings_.WriteTo(output, _repeated_testStrings_codec);
      if (HasMessageLevel) {
        output.WriteRawTag(120);
        output.WriteEnum((int) MessageLevel);
      }
      messageLevels_.WriteTo(output, _repeated_messageLevels_codec);
      if (lLA_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(LLA);
      }
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsUsingBattery) {
        output.WriteRawTag(8);
        output.WriteBool(IsUsingBattery);
      }
      if (HasIsUsingFuel) {
        output.WriteRawTag(16);
        output.WriteBool(IsUsingFuel);
      }
      if (HasFuelRemaining1) {
        output.WriteRawTag(24);
        output.WriteInt32(FuelRemaining1);
      }
      if (HasFuelRemaining2) {
        output.WriteRawTag(32);
        output.WriteInt32(FuelRemaining2);
      }
      if (HasMinMotorVoltage1) {
        output.WriteRawTag(45);
        output.WriteFloat(MinMotorVoltage1);
      }
      if (HasMinMotorVoltage2) {
        output.WriteRawTag(53);
        output.WriteFloat(MinMotorVoltage2);
      }
      cruiseFuelEngineRPMs1_.WriteTo(ref output, _repeated_cruiseFuelEngineRPMs1_codec);
      cruiseFuelEngineRPMs2_.WriteTo(ref output, _repeated_cruiseFuelEngineRPMs2_codec);
      milliseconds1_.WriteTo(ref output, _repeated_milliseconds1_codec);
      milliseconds2_.WriteTo(ref output, _repeated_milliseconds2_codec);
      batteryCurrent_.WriteTo(ref output, _repeated_batteryCurrent_codec);
      batteryRemaining_.WriteTo(ref output, _repeated_batteryRemaining_codec);
      if (HasTestString) {
        output.WriteRawTag(106);
        output.WriteString(TestString);
      }
      testStrings_.WriteTo(ref output, _repeated_testStrings_codec);
      if (HasMessageLevel) {
        output.WriteRawTag(120);
        output.WriteEnum((int) MessageLevel);
      }
      messageLevels_.WriteTo(ref output, _repeated_messageLevels_codec);
      if (lLA_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(LLA);
      }
      messages_.WriteTo(ref output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsUsingBattery) {
        size += 1 + 1;
      }
      if (HasIsUsingFuel) {
        size += 1 + 1;
      }
      if (HasFuelRemaining1) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FuelRemaining1);
      }
      if (HasFuelRemaining2) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FuelRemaining2);
      }
      if (HasMinMotorVoltage1) {
        size += 1 + 4;
      }
      if (HasMinMotorVoltage2) {
        size += 1 + 4;
      }
      size += cruiseFuelEngineRPMs1_.CalculateSize(_repeated_cruiseFuelEngineRPMs1_codec);
      size += cruiseFuelEngineRPMs2_.CalculateSize(_repeated_cruiseFuelEngineRPMs2_codec);
      size += milliseconds1_.CalculateSize(_repeated_milliseconds1_codec);
      size += milliseconds2_.CalculateSize(_repeated_milliseconds2_codec);
      size += batteryCurrent_.CalculateSize(_repeated_batteryCurrent_codec);
      size += batteryRemaining_.CalculateSize(_repeated_batteryRemaining_codec);
      if (HasTestString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestString);
      }
      size += testStrings_.CalculateSize(_repeated_testStrings_codec);
      if (HasMessageLevel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MessageLevel);
      }
      size += messageLevels_.CalculateSize(_repeated_messageLevels_codec);
      if (lLA_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LLA);
      }
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_TestInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasIsUsingBattery) {
        IsUsingBattery = other.IsUsingBattery;
      }
      if (other.HasIsUsingFuel) {
        IsUsingFuel = other.IsUsingFuel;
      }
      if (other.HasFuelRemaining1) {
        FuelRemaining1 = other.FuelRemaining1;
      }
      if (other.HasFuelRemaining2) {
        FuelRemaining2 = other.FuelRemaining2;
      }
      if (other.HasMinMotorVoltage1) {
        MinMotorVoltage1 = other.MinMotorVoltage1;
      }
      if (other.HasMinMotorVoltage2) {
        MinMotorVoltage2 = other.MinMotorVoltage2;
      }
      cruiseFuelEngineRPMs1_.Add(other.cruiseFuelEngineRPMs1_);
      cruiseFuelEngineRPMs2_.Add(other.cruiseFuelEngineRPMs2_);
      milliseconds1_.Add(other.milliseconds1_);
      milliseconds2_.Add(other.milliseconds2_);
      batteryCurrent_.Add(other.batteryCurrent_);
      batteryRemaining_.Add(other.batteryRemaining_);
      if (other.HasTestString) {
        TestString = other.TestString;
      }
      testStrings_.Add(other.testStrings_);
      if (other.HasMessageLevel) {
        MessageLevel = other.MessageLevel;
      }
      messageLevels_.Add(other.messageLevels_);
      if (other.lLA_ != null) {
        if (lLA_ == null) {
          LLA = new global::MetaData.Proto_LLA();
        }
        LLA.MergeFrom(other.LLA);
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsUsingBattery = input.ReadBool();
            break;
          }
          case 16: {
            IsUsingFuel = input.ReadBool();
            break;
          }
          case 24: {
            FuelRemaining1 = input.ReadInt32();
            break;
          }
          case 32: {
            FuelRemaining2 = input.ReadInt32();
            break;
          }
          case 45: {
            MinMotorVoltage1 = input.ReadFloat();
            break;
          }
          case 53: {
            MinMotorVoltage2 = input.ReadFloat();
            break;
          }
          case 58:
          case 56: {
            cruiseFuelEngineRPMs1_.AddEntriesFrom(input, _repeated_cruiseFuelEngineRPMs1_codec);
            break;
          }
          case 66:
          case 64: {
            cruiseFuelEngineRPMs2_.AddEntriesFrom(input, _repeated_cruiseFuelEngineRPMs2_codec);
            break;
          }
          case 74:
          case 72: {
            milliseconds1_.AddEntriesFrom(input, _repeated_milliseconds1_codec);
            break;
          }
          case 82:
          case 80: {
            milliseconds2_.AddEntriesFrom(input, _repeated_milliseconds2_codec);
            break;
          }
          case 90:
          case 93: {
            batteryCurrent_.AddEntriesFrom(input, _repeated_batteryCurrent_codec);
            break;
          }
          case 98:
          case 101: {
            batteryRemaining_.AddEntriesFrom(input, _repeated_batteryRemaining_codec);
            break;
          }
          case 106: {
            TestString = input.ReadString();
            break;
          }
          case 114: {
            testStrings_.AddEntriesFrom(input, _repeated_testStrings_codec);
            break;
          }
          case 120: {
            MessageLevel = (global::MetaData.Proto_MessageLevel) input.ReadEnum();
            break;
          }
          case 130:
          case 128: {
            messageLevels_.AddEntriesFrom(input, _repeated_messageLevels_codec);
            break;
          }
          case 138: {
            if (lLA_ == null) {
              LLA = new global::MetaData.Proto_LLA();
            }
            input.ReadMessage(LLA);
            break;
          }
          case 146: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsUsingBattery = input.ReadBool();
            break;
          }
          case 16: {
            IsUsingFuel = input.ReadBool();
            break;
          }
          case 24: {
            FuelRemaining1 = input.ReadInt32();
            break;
          }
          case 32: {
            FuelRemaining2 = input.ReadInt32();
            break;
          }
          case 45: {
            MinMotorVoltage1 = input.ReadFloat();
            break;
          }
          case 53: {
            MinMotorVoltage2 = input.ReadFloat();
            break;
          }
          case 58:
          case 56: {
            cruiseFuelEngineRPMs1_.AddEntriesFrom(ref input, _repeated_cruiseFuelEngineRPMs1_codec);
            break;
          }
          case 66:
          case 64: {
            cruiseFuelEngineRPMs2_.AddEntriesFrom(ref input, _repeated_cruiseFuelEngineRPMs2_codec);
            break;
          }
          case 74:
          case 72: {
            milliseconds1_.AddEntriesFrom(ref input, _repeated_milliseconds1_codec);
            break;
          }
          case 82:
          case 80: {
            milliseconds2_.AddEntriesFrom(ref input, _repeated_milliseconds2_codec);
            break;
          }
          case 90:
          case 93: {
            batteryCurrent_.AddEntriesFrom(ref input, _repeated_batteryCurrent_codec);
            break;
          }
          case 98:
          case 101: {
            batteryRemaining_.AddEntriesFrom(ref input, _repeated_batteryRemaining_codec);
            break;
          }
          case 106: {
            TestString = input.ReadString();
            break;
          }
          case 114: {
            testStrings_.AddEntriesFrom(ref input, _repeated_testStrings_codec);
            break;
          }
          case 120: {
            MessageLevel = (global::MetaData.Proto_MessageLevel) input.ReadEnum();
            break;
          }
          case 130:
          case 128: {
            messageLevels_.AddEntriesFrom(ref input, _repeated_messageLevels_codec);
            break;
          }
          case 138: {
            if (lLA_ == null) {
              LLA = new global::MetaData.Proto_LLA();
            }
            input.ReadMessage(LLA);
            break;
          }
          case 146: {
            messages_.AddEntriesFrom(ref input, _repeated_messages_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Proto_FlyBaseStatus : pb::IMessage<Proto_FlyBaseStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_FlyBaseStatus> _parser = new pb::MessageParser<Proto_FlyBaseStatus>(() => new Proto_FlyBaseStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_FlyBaseStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlyBaseStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlyBaseStatus(Proto_FlyBaseStatus other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      milliseconds_ = other.milliseconds_;
      airSpeed_ = other.airSpeed_;
      groundSpeed_ = other.groundSpeed_;
      mode_ = other.mode_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      orientation_ = other.orientation_ != null ? other.orientation_.Clone() : null;
      isInOnGround_ = other.isInOnGround_;
      mass_ = other.mass_;
      productModel_ = other.productModel_;
      rH_ = other.rH_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlyBaseStatus Clone() {
      return new Proto_FlyBaseStatus(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 飞机名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Milliseconds" field.</summary>
    public const int MillisecondsFieldNumber = 2;
    private readonly static int MillisecondsDefaultValue = 0;

    private int milliseconds_;
    /// <summary>
    /// 时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Milliseconds {
      get { if ((_hasBits0 & 1) != 0) { return milliseconds_; } else { return MillisecondsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        milliseconds_ = value;
      }
    }
    /// <summary>Gets whether the "Milliseconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMilliseconds {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Milliseconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMilliseconds() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "AirSpeed" field.</summary>
    public const int AirSpeedFieldNumber = 3;
    private readonly static float AirSpeedDefaultValue = 0F;

    private float airSpeed_;
    /// <summary>
    /// 空速
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AirSpeed {
      get { if ((_hasBits0 & 2) != 0) { return airSpeed_; } else { return AirSpeedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        airSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "AirSpeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAirSpeed {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "AirSpeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAirSpeed() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "GroundSpeed" field.</summary>
    public const int GroundSpeedFieldNumber = 4;
    private readonly static float GroundSpeedDefaultValue = 0F;

    private float groundSpeed_;
    /// <summary>
    /// 地速
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GroundSpeed {
      get { if ((_hasBits0 & 4) != 0) { return groundSpeed_; } else { return GroundSpeedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        groundSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "GroundSpeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGroundSpeed {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "GroundSpeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGroundSpeed() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Mode" field.</summary>
    public const int ModeFieldNumber = 5;
    private readonly static global::MetaData.Proto_FlyMode ModeDefaultValue = global::MetaData.Proto_FlyMode.RemoteInstantControl;

    private global::MetaData.Proto_FlyMode mode_;
    /// <summary>
    /// 当前飞行模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_FlyMode Mode {
      get { if ((_hasBits0 & 8) != 0) { return mode_; } else { return ModeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        mode_ = value;
      }
    }
    /// <summary>Gets whether the "Mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMode {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "Mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMode() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 6;
    private global::MetaData.Proto_LLA position_;
    /// <summary>
    /// 当前位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_LLA Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Orientation" field.</summary>
    public const int OrientationFieldNumber = 7;
    private global::MetaData.Proto_EulerAnglesF orientation_;
    /// <summary>
    /// 当前姿态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_EulerAnglesF Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "IsInOnGround" field.</summary>
    public const int IsInOnGroundFieldNumber = 8;
    private readonly static bool IsInOnGroundDefaultValue = false;

    private bool isInOnGround_;
    /// <summary>
    /// 是否处于地面测试模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInOnGround {
      get { if ((_hasBits0 & 16) != 0) { return isInOnGround_; } else { return IsInOnGroundDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isInOnGround_ = value;
      }
    }
    /// <summary>Gets whether the "IsInOnGround" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInOnGround {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "IsInOnGround" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInOnGround() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "Mass" field.</summary>
    public const int MassFieldNumber = 9;
    private readonly static float MassDefaultValue = 0F;

    private float mass_;
    /// <summary>
    /// 质量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Mass {
      get { if ((_hasBits0 & 32) != 0) { return mass_; } else { return MassDefaultValue; } }
      set {
        _hasBits0 |= 32;
        mass_ = value;
      }
    }
    /// <summary>Gets whether the "Mass" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMass {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "Mass" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMass() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ProductModel" field.</summary>
    public const int ProductModelFieldNumber = 10;
    private readonly static string ProductModelDefaultValue = "";

    private string productModel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProductModel {
      get { return productModel_ ?? ProductModelDefaultValue; }
      set {
        productModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ProductModel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProductModel {
      get { return productModel_ != null; }
    }
    /// <summary>Clears the value of the "ProductModel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProductModel() {
      productModel_ = null;
    }

    /// <summary>Field number for the "RH" field.</summary>
    public const int RHFieldNumber = 11;
    private readonly static double RHDefaultValue = 0D;

    private double rH_;
    /// <summary>
    ///相对高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RH {
      get { if ((_hasBits0 & 64) != 0) { return rH_; } else { return RHDefaultValue; } }
      set {
        _hasBits0 |= 64;
        rH_ = value;
      }
    }
    /// <summary>Gets whether the "RH" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRH {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "RH" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRH() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_FlyBaseStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_FlyBaseStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Milliseconds != other.Milliseconds) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirSpeed, other.AirSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GroundSpeed, other.GroundSpeed)) return false;
      if (Mode != other.Mode) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if (IsInOnGround != other.IsInOnGround) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mass, other.Mass)) return false;
      if (ProductModel != other.ProductModel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RH, other.RH)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HasMilliseconds) hash ^= Milliseconds.GetHashCode();
      if (HasAirSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirSpeed);
      if (HasGroundSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GroundSpeed);
      if (HasMode) hash ^= Mode.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (HasIsInOnGround) hash ^= IsInOnGround.GetHashCode();
      if (HasMass) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mass);
      if (HasProductModel) hash ^= ProductModel.GetHashCode();
      if (HasRH) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RH);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasMilliseconds) {
        output.WriteRawTag(16);
        output.WriteInt32(Milliseconds);
      }
      if (HasAirSpeed) {
        output.WriteRawTag(29);
        output.WriteFloat(AirSpeed);
      }
      if (HasGroundSpeed) {
        output.WriteRawTag(37);
        output.WriteFloat(GroundSpeed);
      }
      if (HasMode) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Mode);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Orientation);
      }
      if (HasIsInOnGround) {
        output.WriteRawTag(64);
        output.WriteBool(IsInOnGround);
      }
      if (HasMass) {
        output.WriteRawTag(77);
        output.WriteFloat(Mass);
      }
      if (HasProductModel) {
        output.WriteRawTag(82);
        output.WriteString(ProductModel);
      }
      if (HasRH) {
        output.WriteRawTag(89);
        output.WriteDouble(RH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasMilliseconds) {
        output.WriteRawTag(16);
        output.WriteInt32(Milliseconds);
      }
      if (HasAirSpeed) {
        output.WriteRawTag(29);
        output.WriteFloat(AirSpeed);
      }
      if (HasGroundSpeed) {
        output.WriteRawTag(37);
        output.WriteFloat(GroundSpeed);
      }
      if (HasMode) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Mode);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      if (orientation_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Orientation);
      }
      if (HasIsInOnGround) {
        output.WriteRawTag(64);
        output.WriteBool(IsInOnGround);
      }
      if (HasMass) {
        output.WriteRawTag(77);
        output.WriteFloat(Mass);
      }
      if (HasProductModel) {
        output.WriteRawTag(82);
        output.WriteString(ProductModel);
      }
      if (HasRH) {
        output.WriteRawTag(89);
        output.WriteDouble(RH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasMilliseconds) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Milliseconds);
      }
      if (HasAirSpeed) {
        size += 1 + 4;
      }
      if (HasGroundSpeed) {
        size += 1 + 4;
      }
      if (HasMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (HasIsInOnGround) {
        size += 1 + 1;
      }
      if (HasMass) {
        size += 1 + 4;
      }
      if (HasProductModel) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductModel);
      }
      if (HasRH) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_FlyBaseStatus other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HasMilliseconds) {
        Milliseconds = other.Milliseconds;
      }
      if (other.HasAirSpeed) {
        AirSpeed = other.AirSpeed;
      }
      if (other.HasGroundSpeed) {
        GroundSpeed = other.GroundSpeed;
      }
      if (other.HasMode) {
        Mode = other.Mode;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::MetaData.Proto_LLA();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          Orientation = new global::MetaData.Proto_EulerAnglesF();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      if (other.HasIsInOnGround) {
        IsInOnGround = other.IsInOnGround;
      }
      if (other.HasMass) {
        Mass = other.Mass;
      }
      if (other.HasProductModel) {
        ProductModel = other.ProductModel;
      }
      if (other.HasRH) {
        RH = other.RH;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Milliseconds = input.ReadInt32();
            break;
          }
          case 29: {
            AirSpeed = input.ReadFloat();
            break;
          }
          case 37: {
            GroundSpeed = input.ReadFloat();
            break;
          }
          case 40: {
            Mode = (global::MetaData.Proto_FlyMode) input.ReadEnum();
            break;
          }
          case 50: {
            if (position_ == null) {
              Position = new global::MetaData.Proto_LLA();
            }
            input.ReadMessage(Position);
            break;
          }
          case 58: {
            if (orientation_ == null) {
              Orientation = new global::MetaData.Proto_EulerAnglesF();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 64: {
            IsInOnGround = input.ReadBool();
            break;
          }
          case 77: {
            Mass = input.ReadFloat();
            break;
          }
          case 82: {
            ProductModel = input.ReadString();
            break;
          }
          case 89: {
            RH = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Milliseconds = input.ReadInt32();
            break;
          }
          case 29: {
            AirSpeed = input.ReadFloat();
            break;
          }
          case 37: {
            GroundSpeed = input.ReadFloat();
            break;
          }
          case 40: {
            Mode = (global::MetaData.Proto_FlyMode) input.ReadEnum();
            break;
          }
          case 50: {
            if (position_ == null) {
              Position = new global::MetaData.Proto_LLA();
            }
            input.ReadMessage(Position);
            break;
          }
          case 58: {
            if (orientation_ == null) {
              Orientation = new global::MetaData.Proto_EulerAnglesF();
            }
            input.ReadMessage(Orientation);
            break;
          }
          case 64: {
            IsInOnGround = input.ReadBool();
            break;
          }
          case 77: {
            Mass = input.ReadFloat();
            break;
          }
          case 82: {
            ProductModel = input.ReadString();
            break;
          }
          case 89: {
            RH = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 电池或油量信息
  /// </summary>
  public sealed partial class Proto_PowerInfo : pb::IMessage<Proto_PowerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_PowerInfo> _parser = new pb::MessageParser<Proto_PowerInfo>(() => new Proto_PowerInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_PowerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_PowerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_PowerInfo(Proto_PowerInfo other) : this() {
      _hasBits0 = other._hasBits0;
      isUsingBattery_ = other.isUsingBattery_;
      batteryVoltage_ = other.batteryVoltage_.Clone();
      batteryCurrent_ = other.batteryCurrent_.Clone();
      batteryRemaining_ = other.batteryRemaining_.Clone();
      batteryCapacity_ = other.batteryCapacity_.Clone();
      isUsingFuel_ = other.isUsingFuel_;
      fuelRemaining_ = other.fuelRemaining_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_PowerInfo Clone() {
      return new Proto_PowerInfo(this);
    }

    /// <summary>Field number for the "IsUsingBattery" field.</summary>
    public const int IsUsingBatteryFieldNumber = 1;
    private readonly static bool IsUsingBatteryDefaultValue = false;

    private bool isUsingBattery_;
    /// <summary>
    /// 是否使用电池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUsingBattery {
      get { if ((_hasBits0 & 1) != 0) { return isUsingBattery_; } else { return IsUsingBatteryDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isUsingBattery_ = value;
      }
    }
    /// <summary>Gets whether the "IsUsingBattery" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsUsingBattery {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "IsUsingBattery" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsUsingBattery() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "BatteryVoltage" field.</summary>
    public const int BatteryVoltageFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_batteryVoltage_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> batteryVoltage_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 电池电压
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> BatteryVoltage {
      get { return batteryVoltage_; }
    }

    /// <summary>Field number for the "BatteryCurrent" field.</summary>
    public const int BatteryCurrentFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_batteryCurrent_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> batteryCurrent_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 电池电流
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> BatteryCurrent {
      get { return batteryCurrent_; }
    }

    /// <summary>Field number for the "BatteryRemaining" field.</summary>
    public const int BatteryRemainingFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_batteryRemaining_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> batteryRemaining_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 电池剩余电量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> BatteryRemaining {
      get { return batteryRemaining_; }
    }

    /// <summary>Field number for the "BatteryCapacity" field.</summary>
    public const int BatteryCapacityFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_batteryCapacity_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> batteryCapacity_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 电池容量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> BatteryCapacity {
      get { return batteryCapacity_; }
    }

    /// <summary>Field number for the "IsUsingFuel" field.</summary>
    public const int IsUsingFuelFieldNumber = 6;
    private readonly static bool IsUsingFuelDefaultValue = false;

    private bool isUsingFuel_;
    /// <summary>
    /// 是否使用油箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUsingFuel {
      get { if ((_hasBits0 & 2) != 0) { return isUsingFuel_; } else { return IsUsingFuelDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isUsingFuel_ = value;
      }
    }
    /// <summary>Gets whether the "IsUsingFuel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsUsingFuel {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsUsingFuel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsUsingFuel() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "FuelRemaining" field.</summary>
    public const int FuelRemainingFieldNumber = 7;
    private readonly static float FuelRemainingDefaultValue = 0F;

    private float fuelRemaining_;
    /// <summary>
    /// 油箱剩余油量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FuelRemaining {
      get { if ((_hasBits0 & 4) != 0) { return fuelRemaining_; } else { return FuelRemainingDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fuelRemaining_ = value;
      }
    }
    /// <summary>Gets whether the "FuelRemaining" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFuelRemaining {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "FuelRemaining" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFuelRemaining() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_PowerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_PowerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsUsingBattery != other.IsUsingBattery) return false;
      if(!batteryVoltage_.Equals(other.batteryVoltage_)) return false;
      if(!batteryCurrent_.Equals(other.batteryCurrent_)) return false;
      if(!batteryRemaining_.Equals(other.batteryRemaining_)) return false;
      if(!batteryCapacity_.Equals(other.batteryCapacity_)) return false;
      if (IsUsingFuel != other.IsUsingFuel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FuelRemaining, other.FuelRemaining)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsUsingBattery) hash ^= IsUsingBattery.GetHashCode();
      hash ^= batteryVoltage_.GetHashCode();
      hash ^= batteryCurrent_.GetHashCode();
      hash ^= batteryRemaining_.GetHashCode();
      hash ^= batteryCapacity_.GetHashCode();
      if (HasIsUsingFuel) hash ^= IsUsingFuel.GetHashCode();
      if (HasFuelRemaining) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FuelRemaining);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsUsingBattery) {
        output.WriteRawTag(8);
        output.WriteBool(IsUsingBattery);
      }
      batteryVoltage_.WriteTo(output, _repeated_batteryVoltage_codec);
      batteryCurrent_.WriteTo(output, _repeated_batteryCurrent_codec);
      batteryRemaining_.WriteTo(output, _repeated_batteryRemaining_codec);
      batteryCapacity_.WriteTo(output, _repeated_batteryCapacity_codec);
      if (HasIsUsingFuel) {
        output.WriteRawTag(48);
        output.WriteBool(IsUsingFuel);
      }
      if (HasFuelRemaining) {
        output.WriteRawTag(61);
        output.WriteFloat(FuelRemaining);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsUsingBattery) {
        output.WriteRawTag(8);
        output.WriteBool(IsUsingBattery);
      }
      batteryVoltage_.WriteTo(ref output, _repeated_batteryVoltage_codec);
      batteryCurrent_.WriteTo(ref output, _repeated_batteryCurrent_codec);
      batteryRemaining_.WriteTo(ref output, _repeated_batteryRemaining_codec);
      batteryCapacity_.WriteTo(ref output, _repeated_batteryCapacity_codec);
      if (HasIsUsingFuel) {
        output.WriteRawTag(48);
        output.WriteBool(IsUsingFuel);
      }
      if (HasFuelRemaining) {
        output.WriteRawTag(61);
        output.WriteFloat(FuelRemaining);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsUsingBattery) {
        size += 1 + 1;
      }
      size += batteryVoltage_.CalculateSize(_repeated_batteryVoltage_codec);
      size += batteryCurrent_.CalculateSize(_repeated_batteryCurrent_codec);
      size += batteryRemaining_.CalculateSize(_repeated_batteryRemaining_codec);
      size += batteryCapacity_.CalculateSize(_repeated_batteryCapacity_codec);
      if (HasIsUsingFuel) {
        size += 1 + 1;
      }
      if (HasFuelRemaining) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_PowerInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasIsUsingBattery) {
        IsUsingBattery = other.IsUsingBattery;
      }
      batteryVoltage_.Add(other.batteryVoltage_);
      batteryCurrent_.Add(other.batteryCurrent_);
      batteryRemaining_.Add(other.batteryRemaining_);
      batteryCapacity_.Add(other.batteryCapacity_);
      if (other.HasIsUsingFuel) {
        IsUsingFuel = other.IsUsingFuel;
      }
      if (other.HasFuelRemaining) {
        FuelRemaining = other.FuelRemaining;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsUsingBattery = input.ReadBool();
            break;
          }
          case 18:
          case 21: {
            batteryVoltage_.AddEntriesFrom(input, _repeated_batteryVoltage_codec);
            break;
          }
          case 26:
          case 29: {
            batteryCurrent_.AddEntriesFrom(input, _repeated_batteryCurrent_codec);
            break;
          }
          case 34:
          case 37: {
            batteryRemaining_.AddEntriesFrom(input, _repeated_batteryRemaining_codec);
            break;
          }
          case 42:
          case 45: {
            batteryCapacity_.AddEntriesFrom(input, _repeated_batteryCapacity_codec);
            break;
          }
          case 48: {
            IsUsingFuel = input.ReadBool();
            break;
          }
          case 61: {
            FuelRemaining = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsUsingBattery = input.ReadBool();
            break;
          }
          case 18:
          case 21: {
            batteryVoltage_.AddEntriesFrom(ref input, _repeated_batteryVoltage_codec);
            break;
          }
          case 26:
          case 29: {
            batteryCurrent_.AddEntriesFrom(ref input, _repeated_batteryCurrent_codec);
            break;
          }
          case 34:
          case 37: {
            batteryRemaining_.AddEntriesFrom(ref input, _repeated_batteryRemaining_codec);
            break;
          }
          case 42:
          case 45: {
            batteryCapacity_.AddEntriesFrom(ref input, _repeated_batteryCapacity_codec);
            break;
          }
          case 48: {
            IsUsingFuel = input.ReadBool();
            break;
          }
          case 61: {
            FuelRemaining = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 任务状态
  /// </summary>
  public sealed partial class Proto_TaskStatus : pb::IMessage<Proto_TaskStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_TaskStatus> _parser = new pb::MessageParser<Proto_TaskStatus>(() => new Proto_TaskStatus());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_TaskStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_TaskStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_TaskStatus(Proto_TaskStatus other) : this() {
      _hasBits0 = other._hasBits0;
      mode_ = other.mode_;
      controlTaskStates_ = other.controlTaskStates_;
      isInOnGround_ = other.isInOnGround_;
      flyTime_ = other.flyTime_;
      flyDistance_ = other.flyDistance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_TaskStatus Clone() {
      return new Proto_TaskStatus(this);
    }

    /// <summary>Field number for the "Mode" field.</summary>
    public const int ModeFieldNumber = 5;
    private readonly static global::MetaData.Proto_FlyMode ModeDefaultValue = global::MetaData.Proto_FlyMode.RemoteInstantControl;

    private global::MetaData.Proto_FlyMode mode_;
    /// <summary>
    /// 当前飞行模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_FlyMode Mode {
      get { if ((_hasBits0 & 1) != 0) { return mode_; } else { return ModeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mode_ = value;
      }
    }
    /// <summary>Gets whether the "Mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ControlTaskStates" field.</summary>
    public const int ControlTaskStatesFieldNumber = 6;
    private readonly static string ControlTaskStatesDefaultValue = "";

    private string controlTaskStates_;
    /// <summary>
    /// 飞行控制任务状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ControlTaskStates {
      get { return controlTaskStates_ ?? ControlTaskStatesDefaultValue; }
      set {
        controlTaskStates_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ControlTaskStates" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasControlTaskStates {
      get { return controlTaskStates_ != null; }
    }
    /// <summary>Clears the value of the "ControlTaskStates" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearControlTaskStates() {
      controlTaskStates_ = null;
    }

    /// <summary>Field number for the "IsInOnGround" field.</summary>
    public const int IsInOnGroundFieldNumber = 8;
    private readonly static bool IsInOnGroundDefaultValue = false;

    private bool isInOnGround_;
    /// <summary>
    /// 是否处于地面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInOnGround {
      get { if ((_hasBits0 & 2) != 0) { return isInOnGround_; } else { return IsInOnGroundDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isInOnGround_ = value;
      }
    }
    /// <summary>Gets whether the "IsInOnGround" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInOnGround {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsInOnGround" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInOnGround() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "FlyTime" field.</summary>
    public const int FlyTimeFieldNumber = 9;
    private readonly static float FlyTimeDefaultValue = 0F;

    private float flyTime_;
    /// <summary>
    /// 飞行时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FlyTime {
      get { if ((_hasBits0 & 4) != 0) { return flyTime_; } else { return FlyTimeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        flyTime_ = value;
      }
    }
    /// <summary>Gets whether the "FlyTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlyTime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "FlyTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlyTime() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "FlyDistance" field.</summary>
    public const int FlyDistanceFieldNumber = 10;
    private readonly static float FlyDistanceDefaultValue = 0F;

    private float flyDistance_;
    /// <summary>
    /// 飞行里程
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FlyDistance {
      get { if ((_hasBits0 & 8) != 0) { return flyDistance_; } else { return FlyDistanceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        flyDistance_ = value;
      }
    }
    /// <summary>Gets whether the "FlyDistance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlyDistance {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "FlyDistance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlyDistance() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_TaskStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_TaskStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (ControlTaskStates != other.ControlTaskStates) return false;
      if (IsInOnGround != other.IsInOnGround) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlyTime, other.FlyTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlyDistance, other.FlyDistance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMode) hash ^= Mode.GetHashCode();
      if (HasControlTaskStates) hash ^= ControlTaskStates.GetHashCode();
      if (HasIsInOnGround) hash ^= IsInOnGround.GetHashCode();
      if (HasFlyTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlyTime);
      if (HasFlyDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlyDistance);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMode) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Mode);
      }
      if (HasControlTaskStates) {
        output.WriteRawTag(50);
        output.WriteString(ControlTaskStates);
      }
      if (HasIsInOnGround) {
        output.WriteRawTag(64);
        output.WriteBool(IsInOnGround);
      }
      if (HasFlyTime) {
        output.WriteRawTag(77);
        output.WriteFloat(FlyTime);
      }
      if (HasFlyDistance) {
        output.WriteRawTag(85);
        output.WriteFloat(FlyDistance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMode) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Mode);
      }
      if (HasControlTaskStates) {
        output.WriteRawTag(50);
        output.WriteString(ControlTaskStates);
      }
      if (HasIsInOnGround) {
        output.WriteRawTag(64);
        output.WriteBool(IsInOnGround);
      }
      if (HasFlyTime) {
        output.WriteRawTag(77);
        output.WriteFloat(FlyTime);
      }
      if (HasFlyDistance) {
        output.WriteRawTag(85);
        output.WriteFloat(FlyDistance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (HasControlTaskStates) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ControlTaskStates);
      }
      if (HasIsInOnGround) {
        size += 1 + 1;
      }
      if (HasFlyTime) {
        size += 1 + 4;
      }
      if (HasFlyDistance) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_TaskStatus other) {
      if (other == null) {
        return;
      }
      if (other.HasMode) {
        Mode = other.Mode;
      }
      if (other.HasControlTaskStates) {
        ControlTaskStates = other.ControlTaskStates;
      }
      if (other.HasIsInOnGround) {
        IsInOnGround = other.IsInOnGround;
      }
      if (other.HasFlyTime) {
        FlyTime = other.FlyTime;
      }
      if (other.HasFlyDistance) {
        FlyDistance = other.FlyDistance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 40: {
            Mode = (global::MetaData.Proto_FlyMode) input.ReadEnum();
            break;
          }
          case 50: {
            ControlTaskStates = input.ReadString();
            break;
          }
          case 64: {
            IsInOnGround = input.ReadBool();
            break;
          }
          case 77: {
            FlyTime = input.ReadFloat();
            break;
          }
          case 85: {
            FlyDistance = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 40: {
            Mode = (global::MetaData.Proto_FlyMode) input.ReadEnum();
            break;
          }
          case 50: {
            ControlTaskStates = input.ReadString();
            break;
          }
          case 64: {
            IsInOnGround = input.ReadBool();
            break;
          }
          case 77: {
            FlyTime = input.ReadFloat();
            break;
          }
          case 85: {
            FlyDistance = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 飞行计划参数
  /// </summary>
  public sealed partial class Proto_FlightPlanParams : pb::IMessage<Proto_FlightPlanParams>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_FlightPlanParams> _parser = new pb::MessageParser<Proto_FlightPlanParams>(() => new Proto_FlightPlanParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_FlightPlanParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlightPlanParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlightPlanParams(Proto_FlightPlanParams other) : this() {
      defaultTurningRadius_ = other.defaultTurningRadius_;
      minTurningRadius_ = other.minTurningRadius_;
      defaultCircleRadius_ = other.defaultCircleRadius_;
      minCircleRadius_ = other.minCircleRadius_;
      defaultVerticalTakeOffRelativeHeight_ = other.defaultVerticalTakeOffRelativeHeight_;
      defaultTakeOffClimbRelativeHeight_ = other.defaultTakeOffClimbRelativeHeight_;
      defaultVerticalLandHeight_ = other.defaultVerticalLandHeight_;
      hasTakeOffAndLandClimbCircle_ = other.hasTakeOffAndLandClimbCircle_;
      defaultTakeOffAndLandCircleDistance_ = other.defaultTakeOffAndLandCircleDistance_;
      maxTakeOffAndLandCircleDistance_ = other.maxTakeOffAndLandCircleDistance_;
      altitudeChangeCirclePreviewClimbAngleAbs_ = other.altitudeChangeCirclePreviewClimbAngleAbs_;
      landDescentAngleAbs_ = other.landDescentAngleAbs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlightPlanParams Clone() {
      return new Proto_FlightPlanParams(this);
    }

    /// <summary>Field number for the "DefaultTurningRadius" field.</summary>
    public const int DefaultTurningRadiusFieldNumber = 1;
    private float defaultTurningRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DefaultTurningRadius {
      get { return defaultTurningRadius_; }
      set {
        defaultTurningRadius_ = value;
      }
    }

    /// <summary>Field number for the "MinTurningRadius" field.</summary>
    public const int MinTurningRadiusFieldNumber = 2;
    private float minTurningRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinTurningRadius {
      get { return minTurningRadius_; }
      set {
        minTurningRadius_ = value;
      }
    }

    /// <summary>Field number for the "DefaultCircleRadius" field.</summary>
    public const int DefaultCircleRadiusFieldNumber = 3;
    private float defaultCircleRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DefaultCircleRadius {
      get { return defaultCircleRadius_; }
      set {
        defaultCircleRadius_ = value;
      }
    }

    /// <summary>Field number for the "MinCircleRadius" field.</summary>
    public const int MinCircleRadiusFieldNumber = 4;
    private float minCircleRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinCircleRadius {
      get { return minCircleRadius_; }
      set {
        minCircleRadius_ = value;
      }
    }

    /// <summary>Field number for the "DefaultVerticalTakeOffRelativeHeight" field.</summary>
    public const int DefaultVerticalTakeOffRelativeHeightFieldNumber = 5;
    private float defaultVerticalTakeOffRelativeHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DefaultVerticalTakeOffRelativeHeight {
      get { return defaultVerticalTakeOffRelativeHeight_; }
      set {
        defaultVerticalTakeOffRelativeHeight_ = value;
      }
    }

    /// <summary>Field number for the "DefaultTakeOffClimbRelativeHeight" field.</summary>
    public const int DefaultTakeOffClimbRelativeHeightFieldNumber = 6;
    private float defaultTakeOffClimbRelativeHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DefaultTakeOffClimbRelativeHeight {
      get { return defaultTakeOffClimbRelativeHeight_; }
      set {
        defaultTakeOffClimbRelativeHeight_ = value;
      }
    }

    /// <summary>Field number for the "DefaultVerticalLandHeight" field.</summary>
    public const int DefaultVerticalLandHeightFieldNumber = 7;
    private float defaultVerticalLandHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DefaultVerticalLandHeight {
      get { return defaultVerticalLandHeight_; }
      set {
        defaultVerticalLandHeight_ = value;
      }
    }

    /// <summary>Field number for the "HasTakeOffAndLandClimbCircle" field.</summary>
    public const int HasTakeOffAndLandClimbCircleFieldNumber = 8;
    private bool hasTakeOffAndLandClimbCircle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTakeOffAndLandClimbCircle {
      get { return hasTakeOffAndLandClimbCircle_; }
      set {
        hasTakeOffAndLandClimbCircle_ = value;
      }
    }

    /// <summary>Field number for the "DefaultTakeOffAndLandCircleDistance" field.</summary>
    public const int DefaultTakeOffAndLandCircleDistanceFieldNumber = 9;
    private float defaultTakeOffAndLandCircleDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DefaultTakeOffAndLandCircleDistance {
      get { return defaultTakeOffAndLandCircleDistance_; }
      set {
        defaultTakeOffAndLandCircleDistance_ = value;
      }
    }

    /// <summary>Field number for the "MaxTakeOffAndLandCircleDistance" field.</summary>
    public const int MaxTakeOffAndLandCircleDistanceFieldNumber = 10;
    private float maxTakeOffAndLandCircleDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxTakeOffAndLandCircleDistance {
      get { return maxTakeOffAndLandCircleDistance_; }
      set {
        maxTakeOffAndLandCircleDistance_ = value;
      }
    }

    /// <summary>Field number for the "AltitudeChangeCirclePreviewClimbAngleAbs" field.</summary>
    public const int AltitudeChangeCirclePreviewClimbAngleAbsFieldNumber = 11;
    private float altitudeChangeCirclePreviewClimbAngleAbs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AltitudeChangeCirclePreviewClimbAngleAbs {
      get { return altitudeChangeCirclePreviewClimbAngleAbs_; }
      set {
        altitudeChangeCirclePreviewClimbAngleAbs_ = value;
      }
    }

    /// <summary>Field number for the "LandDescentAngleAbs" field.</summary>
    public const int LandDescentAngleAbsFieldNumber = 12;
    private float landDescentAngleAbs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LandDescentAngleAbs {
      get { return landDescentAngleAbs_; }
      set {
        landDescentAngleAbs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_FlightPlanParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_FlightPlanParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultTurningRadius, other.DefaultTurningRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinTurningRadius, other.MinTurningRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultCircleRadius, other.DefaultCircleRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinCircleRadius, other.MinCircleRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultVerticalTakeOffRelativeHeight, other.DefaultVerticalTakeOffRelativeHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultTakeOffClimbRelativeHeight, other.DefaultTakeOffClimbRelativeHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultVerticalLandHeight, other.DefaultVerticalLandHeight)) return false;
      if (HasTakeOffAndLandClimbCircle != other.HasTakeOffAndLandClimbCircle) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefaultTakeOffAndLandCircleDistance, other.DefaultTakeOffAndLandCircleDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxTakeOffAndLandCircleDistance, other.MaxTakeOffAndLandCircleDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AltitudeChangeCirclePreviewClimbAngleAbs, other.AltitudeChangeCirclePreviewClimbAngleAbs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LandDescentAngleAbs, other.LandDescentAngleAbs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DefaultTurningRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultTurningRadius);
      if (MinTurningRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinTurningRadius);
      if (DefaultCircleRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultCircleRadius);
      if (MinCircleRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinCircleRadius);
      if (DefaultVerticalTakeOffRelativeHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultVerticalTakeOffRelativeHeight);
      if (DefaultTakeOffClimbRelativeHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultTakeOffClimbRelativeHeight);
      if (DefaultVerticalLandHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultVerticalLandHeight);
      if (HasTakeOffAndLandClimbCircle != false) hash ^= HasTakeOffAndLandClimbCircle.GetHashCode();
      if (DefaultTakeOffAndLandCircleDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefaultTakeOffAndLandCircleDistance);
      if (MaxTakeOffAndLandCircleDistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxTakeOffAndLandCircleDistance);
      if (AltitudeChangeCirclePreviewClimbAngleAbs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AltitudeChangeCirclePreviewClimbAngleAbs);
      if (LandDescentAngleAbs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LandDescentAngleAbs);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DefaultTurningRadius != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DefaultTurningRadius);
      }
      if (MinTurningRadius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MinTurningRadius);
      }
      if (DefaultCircleRadius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DefaultCircleRadius);
      }
      if (MinCircleRadius != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MinCircleRadius);
      }
      if (DefaultVerticalTakeOffRelativeHeight != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DefaultVerticalTakeOffRelativeHeight);
      }
      if (DefaultTakeOffClimbRelativeHeight != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DefaultTakeOffClimbRelativeHeight);
      }
      if (DefaultVerticalLandHeight != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DefaultVerticalLandHeight);
      }
      if (HasTakeOffAndLandClimbCircle != false) {
        output.WriteRawTag(64);
        output.WriteBool(HasTakeOffAndLandClimbCircle);
      }
      if (DefaultTakeOffAndLandCircleDistance != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DefaultTakeOffAndLandCircleDistance);
      }
      if (MaxTakeOffAndLandCircleDistance != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MaxTakeOffAndLandCircleDistance);
      }
      if (AltitudeChangeCirclePreviewClimbAngleAbs != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(AltitudeChangeCirclePreviewClimbAngleAbs);
      }
      if (LandDescentAngleAbs != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(LandDescentAngleAbs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DefaultTurningRadius != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DefaultTurningRadius);
      }
      if (MinTurningRadius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MinTurningRadius);
      }
      if (DefaultCircleRadius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DefaultCircleRadius);
      }
      if (MinCircleRadius != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MinCircleRadius);
      }
      if (DefaultVerticalTakeOffRelativeHeight != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DefaultVerticalTakeOffRelativeHeight);
      }
      if (DefaultTakeOffClimbRelativeHeight != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DefaultTakeOffClimbRelativeHeight);
      }
      if (DefaultVerticalLandHeight != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DefaultVerticalLandHeight);
      }
      if (HasTakeOffAndLandClimbCircle != false) {
        output.WriteRawTag(64);
        output.WriteBool(HasTakeOffAndLandClimbCircle);
      }
      if (DefaultTakeOffAndLandCircleDistance != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DefaultTakeOffAndLandCircleDistance);
      }
      if (MaxTakeOffAndLandCircleDistance != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MaxTakeOffAndLandCircleDistance);
      }
      if (AltitudeChangeCirclePreviewClimbAngleAbs != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(AltitudeChangeCirclePreviewClimbAngleAbs);
      }
      if (LandDescentAngleAbs != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(LandDescentAngleAbs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DefaultTurningRadius != 0F) {
        size += 1 + 4;
      }
      if (MinTurningRadius != 0F) {
        size += 1 + 4;
      }
      if (DefaultCircleRadius != 0F) {
        size += 1 + 4;
      }
      if (MinCircleRadius != 0F) {
        size += 1 + 4;
      }
      if (DefaultVerticalTakeOffRelativeHeight != 0F) {
        size += 1 + 4;
      }
      if (DefaultTakeOffClimbRelativeHeight != 0F) {
        size += 1 + 4;
      }
      if (DefaultVerticalLandHeight != 0F) {
        size += 1 + 4;
      }
      if (HasTakeOffAndLandClimbCircle != false) {
        size += 1 + 1;
      }
      if (DefaultTakeOffAndLandCircleDistance != 0F) {
        size += 1 + 4;
      }
      if (MaxTakeOffAndLandCircleDistance != 0F) {
        size += 1 + 4;
      }
      if (AltitudeChangeCirclePreviewClimbAngleAbs != 0F) {
        size += 1 + 4;
      }
      if (LandDescentAngleAbs != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_FlightPlanParams other) {
      if (other == null) {
        return;
      }
      if (other.DefaultTurningRadius != 0F) {
        DefaultTurningRadius = other.DefaultTurningRadius;
      }
      if (other.MinTurningRadius != 0F) {
        MinTurningRadius = other.MinTurningRadius;
      }
      if (other.DefaultCircleRadius != 0F) {
        DefaultCircleRadius = other.DefaultCircleRadius;
      }
      if (other.MinCircleRadius != 0F) {
        MinCircleRadius = other.MinCircleRadius;
      }
      if (other.DefaultVerticalTakeOffRelativeHeight != 0F) {
        DefaultVerticalTakeOffRelativeHeight = other.DefaultVerticalTakeOffRelativeHeight;
      }
      if (other.DefaultTakeOffClimbRelativeHeight != 0F) {
        DefaultTakeOffClimbRelativeHeight = other.DefaultTakeOffClimbRelativeHeight;
      }
      if (other.DefaultVerticalLandHeight != 0F) {
        DefaultVerticalLandHeight = other.DefaultVerticalLandHeight;
      }
      if (other.HasTakeOffAndLandClimbCircle != false) {
        HasTakeOffAndLandClimbCircle = other.HasTakeOffAndLandClimbCircle;
      }
      if (other.DefaultTakeOffAndLandCircleDistance != 0F) {
        DefaultTakeOffAndLandCircleDistance = other.DefaultTakeOffAndLandCircleDistance;
      }
      if (other.MaxTakeOffAndLandCircleDistance != 0F) {
        MaxTakeOffAndLandCircleDistance = other.MaxTakeOffAndLandCircleDistance;
      }
      if (other.AltitudeChangeCirclePreviewClimbAngleAbs != 0F) {
        AltitudeChangeCirclePreviewClimbAngleAbs = other.AltitudeChangeCirclePreviewClimbAngleAbs;
      }
      if (other.LandDescentAngleAbs != 0F) {
        LandDescentAngleAbs = other.LandDescentAngleAbs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            DefaultTurningRadius = input.ReadFloat();
            break;
          }
          case 21: {
            MinTurningRadius = input.ReadFloat();
            break;
          }
          case 29: {
            DefaultCircleRadius = input.ReadFloat();
            break;
          }
          case 37: {
            MinCircleRadius = input.ReadFloat();
            break;
          }
          case 45: {
            DefaultVerticalTakeOffRelativeHeight = input.ReadFloat();
            break;
          }
          case 53: {
            DefaultTakeOffClimbRelativeHeight = input.ReadFloat();
            break;
          }
          case 61: {
            DefaultVerticalLandHeight = input.ReadFloat();
            break;
          }
          case 64: {
            HasTakeOffAndLandClimbCircle = input.ReadBool();
            break;
          }
          case 77: {
            DefaultTakeOffAndLandCircleDistance = input.ReadFloat();
            break;
          }
          case 85: {
            MaxTakeOffAndLandCircleDistance = input.ReadFloat();
            break;
          }
          case 93: {
            AltitudeChangeCirclePreviewClimbAngleAbs = input.ReadFloat();
            break;
          }
          case 101: {
            LandDescentAngleAbs = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            DefaultTurningRadius = input.ReadFloat();
            break;
          }
          case 21: {
            MinTurningRadius = input.ReadFloat();
            break;
          }
          case 29: {
            DefaultCircleRadius = input.ReadFloat();
            break;
          }
          case 37: {
            MinCircleRadius = input.ReadFloat();
            break;
          }
          case 45: {
            DefaultVerticalTakeOffRelativeHeight = input.ReadFloat();
            break;
          }
          case 53: {
            DefaultTakeOffClimbRelativeHeight = input.ReadFloat();
            break;
          }
          case 61: {
            DefaultVerticalLandHeight = input.ReadFloat();
            break;
          }
          case 64: {
            HasTakeOffAndLandClimbCircle = input.ReadBool();
            break;
          }
          case 77: {
            DefaultTakeOffAndLandCircleDistance = input.ReadFloat();
            break;
          }
          case 85: {
            MaxTakeOffAndLandCircleDistance = input.ReadFloat();
            break;
          }
          case 93: {
            AltitudeChangeCirclePreviewClimbAngleAbs = input.ReadFloat();
            break;
          }
          case 101: {
            LandDescentAngleAbs = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Proto_AircraftStatesForFlightPlan : pb::IMessage<Proto_AircraftStatesForFlightPlan>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_AircraftStatesForFlightPlan> _parser = new pb::MessageParser<Proto_AircraftStatesForFlightPlan>(() => new Proto_AircraftStatesForFlightPlan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_AircraftStatesForFlightPlan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftStatesForFlightPlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftStatesForFlightPlan(Proto_AircraftStatesForFlightPlan other) : this() {
      targetCruiseSpeed_ = other.targetCruiseSpeed_;
      vTOLClimbSpeed_ = other.vTOLClimbSpeed_;
      vTOLDescentSpeed_ = other.vTOLDescentSpeed_;
      aircraftOriginHeightAboveLandingGearBottom_ = other.aircraftOriginHeightAboveLandingGearBottom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftStatesForFlightPlan Clone() {
      return new Proto_AircraftStatesForFlightPlan(this);
    }

    /// <summary>Field number for the "TargetCruiseSpeed" field.</summary>
    public const int TargetCruiseSpeedFieldNumber = 1;
    private float targetCruiseSpeed_;
    /// <summary>
    /// 巡航飞行的目标速度。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TargetCruiseSpeed {
      get { return targetCruiseSpeed_; }
      set {
        targetCruiseSpeed_ = value;
      }
    }

    /// <summary>Field number for the "VTOLClimbSpeed" field.</summary>
    public const int VTOLClimbSpeedFieldNumber = 2;
    private float vTOLClimbSpeed_;
    /// <summary>
    /// 垂直上升速度。正数。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VTOLClimbSpeed {
      get { return vTOLClimbSpeed_; }
      set {
        vTOLClimbSpeed_ = value;
      }
    }

    /// <summary>Field number for the "VTOLDescentSpeed" field.</summary>
    public const int VTOLDescentSpeedFieldNumber = 3;
    private float vTOLDescentSpeed_;
    /// <summary>
    /// 垂直下降速度。负数。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VTOLDescentSpeed {
      get { return vTOLDescentSpeed_; }
      set {
        vTOLDescentSpeed_ = value;
      }
    }

    /// <summary>Field number for the "AircraftOriginHeightAboveLandingGearBottom" field.</summary>
    public const int AircraftOriginHeightAboveLandingGearBottomFieldNumber = 4;
    private float aircraftOriginHeightAboveLandingGearBottom_;
    /// <summary>
    /// 飞机坐标系原点，在起落架以上的高度。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AircraftOriginHeightAboveLandingGearBottom {
      get { return aircraftOriginHeightAboveLandingGearBottom_; }
      set {
        aircraftOriginHeightAboveLandingGearBottom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_AircraftStatesForFlightPlan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_AircraftStatesForFlightPlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetCruiseSpeed, other.TargetCruiseSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VTOLClimbSpeed, other.VTOLClimbSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VTOLDescentSpeed, other.VTOLDescentSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AircraftOriginHeightAboveLandingGearBottom, other.AircraftOriginHeightAboveLandingGearBottom)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetCruiseSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetCruiseSpeed);
      if (VTOLClimbSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VTOLClimbSpeed);
      if (VTOLDescentSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VTOLDescentSpeed);
      if (AircraftOriginHeightAboveLandingGearBottom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AircraftOriginHeightAboveLandingGearBottom);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TargetCruiseSpeed != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(TargetCruiseSpeed);
      }
      if (VTOLClimbSpeed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(VTOLClimbSpeed);
      }
      if (VTOLDescentSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(VTOLDescentSpeed);
      }
      if (AircraftOriginHeightAboveLandingGearBottom != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AircraftOriginHeightAboveLandingGearBottom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TargetCruiseSpeed != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(TargetCruiseSpeed);
      }
      if (VTOLClimbSpeed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(VTOLClimbSpeed);
      }
      if (VTOLDescentSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(VTOLDescentSpeed);
      }
      if (AircraftOriginHeightAboveLandingGearBottom != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(AircraftOriginHeightAboveLandingGearBottom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TargetCruiseSpeed != 0F) {
        size += 1 + 4;
      }
      if (VTOLClimbSpeed != 0F) {
        size += 1 + 4;
      }
      if (VTOLDescentSpeed != 0F) {
        size += 1 + 4;
      }
      if (AircraftOriginHeightAboveLandingGearBottom != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_AircraftStatesForFlightPlan other) {
      if (other == null) {
        return;
      }
      if (other.TargetCruiseSpeed != 0F) {
        TargetCruiseSpeed = other.TargetCruiseSpeed;
      }
      if (other.VTOLClimbSpeed != 0F) {
        VTOLClimbSpeed = other.VTOLClimbSpeed;
      }
      if (other.VTOLDescentSpeed != 0F) {
        VTOLDescentSpeed = other.VTOLDescentSpeed;
      }
      if (other.AircraftOriginHeightAboveLandingGearBottom != 0F) {
        AircraftOriginHeightAboveLandingGearBottom = other.AircraftOriginHeightAboveLandingGearBottom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            TargetCruiseSpeed = input.ReadFloat();
            break;
          }
          case 21: {
            VTOLClimbSpeed = input.ReadFloat();
            break;
          }
          case 29: {
            VTOLDescentSpeed = input.ReadFloat();
            break;
          }
          case 37: {
            AircraftOriginHeightAboveLandingGearBottom = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            TargetCruiseSpeed = input.ReadFloat();
            break;
          }
          case 21: {
            VTOLClimbSpeed = input.ReadFloat();
            break;
          }
          case 29: {
            VTOLDescentSpeed = input.ReadFloat();
            break;
          }
          case 37: {
            AircraftOriginHeightAboveLandingGearBottom = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 与飞行计划编辑有关的飞机高度定义。
  /// </summary>
  public sealed partial class Proto_AltitudeDefInfo : pb::IMessage<Proto_AltitudeDefInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_AltitudeDefInfo> _parser = new pb::MessageParser<Proto_AltitudeDefInfo>(() => new Proto_AltitudeDefInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_AltitudeDefInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AltitudeDefInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AltitudeDefInfo(Proto_AltitudeDefInfo other) : this() {
      aircraftReferenceAltitude_ = other.aircraftReferenceAltitude_;
      minAltAGL_ = other.minAltAGL_;
      maxAltAGL_ = other.maxAltAGL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AltitudeDefInfo Clone() {
      return new Proto_AltitudeDefInfo(this);
    }

    /// <summary>Field number for the "AircraftReferenceAltitude" field.</summary>
    public const int AircraftReferenceAltitudeFieldNumber = 1;
    private double aircraftReferenceAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AircraftReferenceAltitude {
      get { return aircraftReferenceAltitude_; }
      set {
        aircraftReferenceAltitude_ = value;
      }
    }

    /// <summary>Field number for the "MinAltAGL" field.</summary>
    public const int MinAltAGLFieldNumber = 2;
    private double minAltAGL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinAltAGL {
      get { return minAltAGL_; }
      set {
        minAltAGL_ = value;
      }
    }

    /// <summary>Field number for the "MaxAltAGL" field.</summary>
    public const int MaxAltAGLFieldNumber = 3;
    private double maxAltAGL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxAltAGL {
      get { return maxAltAGL_; }
      set {
        maxAltAGL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_AltitudeDefInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_AltitudeDefInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AircraftReferenceAltitude, other.AircraftReferenceAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinAltAGL, other.MinAltAGL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxAltAGL, other.MaxAltAGL)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AircraftReferenceAltitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AircraftReferenceAltitude);
      if (MinAltAGL != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinAltAGL);
      if (MaxAltAGL != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxAltAGL);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AircraftReferenceAltitude != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(AircraftReferenceAltitude);
      }
      if (MinAltAGL != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MinAltAGL);
      }
      if (MaxAltAGL != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MaxAltAGL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AircraftReferenceAltitude != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(AircraftReferenceAltitude);
      }
      if (MinAltAGL != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MinAltAGL);
      }
      if (MaxAltAGL != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MaxAltAGL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AircraftReferenceAltitude != 0D) {
        size += 1 + 8;
      }
      if (MinAltAGL != 0D) {
        size += 1 + 8;
      }
      if (MaxAltAGL != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_AltitudeDefInfo other) {
      if (other == null) {
        return;
      }
      if (other.AircraftReferenceAltitude != 0D) {
        AircraftReferenceAltitude = other.AircraftReferenceAltitude;
      }
      if (other.MinAltAGL != 0D) {
        MinAltAGL = other.MinAltAGL;
      }
      if (other.MaxAltAGL != 0D) {
        MaxAltAGL = other.MaxAltAGL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            AircraftReferenceAltitude = input.ReadDouble();
            break;
          }
          case 17: {
            MinAltAGL = input.ReadDouble();
            break;
          }
          case 25: {
            MaxAltAGL = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            AircraftReferenceAltitude = input.ReadDouble();
            break;
          }
          case 17: {
            MinAltAGL = input.ReadDouble();
            break;
          }
          case 25: {
            MaxAltAGL = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Proto_FlyProgress : pb::IMessage<Proto_FlyProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_FlyProgress> _parser = new pb::MessageParser<Proto_FlyProgress>(() => new Proto_FlyProgress());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_FlyProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlyProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlyProgress(Proto_FlyProgress other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      milliseconds_ = other.milliseconds_;
      taskState_ = other.taskState_;
      scheduleID_ = other.scheduleID_;
      currentPlanItemIndex_ = other.currentPlanItemIndex_;
      horizNaviMode_ = other.horizNaviMode_;
      vertNaviMode_ = other.vertNaviMode_;
      lonInnerMode_ = other.lonInnerMode_;
      latInnerMode_ = other.latInnerMode_;
      rotorExpandState_ = other.rotorExpandState_;
      cargoState_ = other.cargoState_;
      equivSeaLevelAirspeed_ = other.equivSeaLevelAirspeed_;
      airDensity_ = other.airDensity_;
      referenceAltitude_ = other.referenceAltitude_;
      targetAltitude_ = other.targetAltitude_;
      landingGearAltAGLByRadar_ = other.landingGearAltAGLByRadar_;
      detectedGroundAltitude_ = other.detectedGroundAltitude_;
      diagnosticActionType_ = other.diagnosticActionType_;
      flyDistance_ = other.flyDistance_;
      currentPlanItemOrTemporaryPathCompletePercent_ = other.currentPlanItemOrTemporaryPathCompletePercent_;
      gotoThisPointAfterTakeoffSectionFinished_ = other.gotoThisPointAfterTakeoffSectionFinished_ != null ? other.gotoThisPointAfterTakeoffSectionFinished_.Clone() : null;
      flySeconds_ = other.flySeconds_;
      targetFlySpeed_ = other.targetFlySpeed_;
      magneticConfiguration_ = other.magneticConfiguration_;
      wingCruiseLonOverrideMode_ = other.wingCruiseLonOverrideMode_;
      isAllCruiseFuelEnginePowerOn_ = other.isAllCruiseFuelEnginePowerOn_;
      isAllCruiseFuelEngineRunning_ = other.isAllCruiseFuelEngineRunning_;
      shouldCruiseEngineAvailable_ = other.shouldCruiseEngineAvailable_;
      isOnGround_ = other.isOnGround_;
      isCmdRotorExpand_ = other.isCmdRotorExpand_;
      isCmdCargoLock_ = other.isCmdCargoLock_;
      isAGLBySonarAvailable_ = other.isAGLBySonarAvailable_;
      isInTestMotorServoMode_ = other.isInTestMotorServoMode_;
      isUsePitotTube_ = other.isUsePitotTube_;
      isMotorsAndServosEnabled_ = other.isMotorsAndServosEnabled_;
      hasLiftedOff_ = other.hasLiftedOff_;
      isFlightScheduleHasFinished_ = other.isFlightScheduleHasFinished_;
      isPilotControlActive_ = other.isPilotControlActive_;
      isWingCruiseHasFailed_ = other.isWingCruiseHasFailed_;
      isEmergencyLandRequested_ = other.isEmergencyLandRequested_;
      isEmergencyLand_ = other.isEmergencyLand_;
      hasException_ = other.hasException_;
      isInSafeMode_ = other.isInSafeMode_;
      isInTemporaryPath_ = other.isInTemporaryPath_;
      isGNSSDataQualityGood_ = other.isGNSSDataQualityGood_;
      isRejectingTakeOff_ = other.isRejectingTakeOff_;
      isBreakPointRecorded_ = other.isBreakPointRecorded_;
      isInHighPosAccuracyRotorModes_ = other.isInHighPosAccuracyRotorModes_;
      isTargetAltitudeAGL_ = other.isTargetAltitudeAGL_;
      isPosFileOpen_ = other.isPosFileOpen_;
      isCameraAutoShootPeriodically_ = other.isCameraAutoShootPeriodically_;
      isRequestOpenOnboardLog_ = other.isRequestOpenOnboardLog_;
      isOnboardLogOpen_ = other.isOnboardLogOpen_;
      enableFlightControlBoardAutoHeater_ = other.enableFlightControlBoardAutoHeater_;
      isAutoSelfDriveSpeed_ = other.isAutoSelfDriveSpeed_;
      isTargetAirspeedElseGndspeed_ = other.isTargetAirspeedElseGndspeed_;
      isLowAltitudeProtection_ = other.isLowAltitudeProtection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlyProgress Clone() {
      return new Proto_FlyProgress(this);
    }

    /// <summary>Field number for the "Milliseconds" field.</summary>
    public const int MillisecondsFieldNumber = 1;
    private readonly static uint MillisecondsDefaultValue = 0;

    private uint milliseconds_;
    /// <summary>
    ///飞机飞控开机毫秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Milliseconds {
      get { if ((_hasBits0 & 1) != 0) { return milliseconds_; } else { return MillisecondsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        milliseconds_ = value;
      }
    }
    /// <summary>Gets whether the "Milliseconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMilliseconds {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Milliseconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMilliseconds() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "TaskState" field.</summary>
    public const int TaskStateFieldNumber = 2;
    private readonly static int TaskStateDefaultValue = 0;

    private int taskState_;
    /// <summary>
    ///任务状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TaskState {
      get { if ((_hasBits0 & 2) != 0) { return taskState_; } else { return TaskStateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        taskState_ = value;
      }
    }
    /// <summary>Gets whether the "TaskState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTaskState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "TaskState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTaskState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "ScheduleID" field.</summary>
    public const int ScheduleIDFieldNumber = 3;
    private readonly static uint ScheduleIDDefaultValue = 0;

    private uint scheduleID_;
    /// <summary>
    ///飞行计划标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ScheduleID {
      get { if ((_hasBits0 & 4) != 0) { return scheduleID_; } else { return ScheduleIDDefaultValue; } }
      set {
        _hasBits0 |= 4;
        scheduleID_ = value;
      }
    }
    /// <summary>Gets whether the "ScheduleID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScheduleID {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ScheduleID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScheduleID() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "CurrentPlanItemIndex" field.</summary>
    public const int CurrentPlanItemIndexFieldNumber = 4;
    private readonly static int CurrentPlanItemIndexDefaultValue = 0;

    private int currentPlanItemIndex_;
    /// <summary>
    ///当前飞行计划项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurrentPlanItemIndex {
      get { if ((_hasBits0 & 8) != 0) { return currentPlanItemIndex_; } else { return CurrentPlanItemIndexDefaultValue; } }
      set {
        _hasBits0 |= 8;
        currentPlanItemIndex_ = value;
      }
    }
    /// <summary>Gets whether the "CurrentPlanItemIndex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentPlanItemIndex {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "CurrentPlanItemIndex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentPlanItemIndex() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "HorizNaviMode" field.</summary>
    public const int HorizNaviModeFieldNumber = 6;
    private readonly static uint HorizNaviModeDefaultValue = 0;

    private uint horizNaviMode_;
    /// <summary>
    ///水平导航模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HorizNaviMode {
      get { if ((_hasBits0 & 16) != 0) { return horizNaviMode_; } else { return HorizNaviModeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        horizNaviMode_ = value;
      }
    }
    /// <summary>Gets whether the "HorizNaviMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHorizNaviMode {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "HorizNaviMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHorizNaviMode() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "VertNaviMode" field.</summary>
    public const int VertNaviModeFieldNumber = 7;
    private readonly static uint VertNaviModeDefaultValue = 0;

    private uint vertNaviMode_;
    /// <summary>
    ///垂直导航模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint VertNaviMode {
      get { if ((_hasBits0 & 32) != 0) { return vertNaviMode_; } else { return VertNaviModeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        vertNaviMode_ = value;
      }
    }
    /// <summary>Gets whether the "VertNaviMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVertNaviMode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "VertNaviMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVertNaviMode() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "LonInnerMode" field.</summary>
    public const int LonInnerModeFieldNumber = 8;
    private readonly static uint LonInnerModeDefaultValue = 0;

    private uint lonInnerMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LonInnerMode {
      get { if ((_hasBits0 & 64) != 0) { return lonInnerMode_; } else { return LonInnerModeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        lonInnerMode_ = value;
      }
    }
    /// <summary>Gets whether the "LonInnerMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLonInnerMode {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "LonInnerMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLonInnerMode() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "LatInnerMode" field.</summary>
    public const int LatInnerModeFieldNumber = 9;
    private readonly static uint LatInnerModeDefaultValue = 0;

    private uint latInnerMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LatInnerMode {
      get { if ((_hasBits0 & 128) != 0) { return latInnerMode_; } else { return LatInnerModeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        latInnerMode_ = value;
      }
    }
    /// <summary>Gets whether the "LatInnerMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLatInnerMode {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "LatInnerMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLatInnerMode() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "RotorExpandState" field.</summary>
    public const int RotorExpandStateFieldNumber = 10;
    private readonly static uint RotorExpandStateDefaultValue = 0;

    private uint rotorExpandState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RotorExpandState {
      get { if ((_hasBits0 & 256) != 0) { return rotorExpandState_; } else { return RotorExpandStateDefaultValue; } }
      set {
        _hasBits0 |= 256;
        rotorExpandState_ = value;
      }
    }
    /// <summary>Gets whether the "RotorExpandState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRotorExpandState {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "RotorExpandState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRotorExpandState() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "CargoState" field.</summary>
    public const int CargoStateFieldNumber = 11;
    private readonly static uint CargoStateDefaultValue = 0;

    private uint cargoState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CargoState {
      get { if ((_hasBits0 & 512) != 0) { return cargoState_; } else { return CargoStateDefaultValue; } }
      set {
        _hasBits0 |= 512;
        cargoState_ = value;
      }
    }
    /// <summary>Gets whether the "CargoState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCargoState {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "CargoState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCargoState() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "EquivSeaLevelAirspeed" field.</summary>
    public const int EquivSeaLevelAirspeedFieldNumber = 12;
    private readonly static float EquivSeaLevelAirspeedDefaultValue = 0F;

    private float equivSeaLevelAirspeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EquivSeaLevelAirspeed {
      get { if ((_hasBits0 & 1024) != 0) { return equivSeaLevelAirspeed_; } else { return EquivSeaLevelAirspeedDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        equivSeaLevelAirspeed_ = value;
      }
    }
    /// <summary>Gets whether the "EquivSeaLevelAirspeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEquivSeaLevelAirspeed {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "EquivSeaLevelAirspeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEquivSeaLevelAirspeed() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "AirDensity" field.</summary>
    public const int AirDensityFieldNumber = 13;
    private readonly static float AirDensityDefaultValue = 0F;

    private float airDensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AirDensity {
      get { if ((_hasBits0 & 2048) != 0) { return airDensity_; } else { return AirDensityDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        airDensity_ = value;
      }
    }
    /// <summary>Gets whether the "AirDensity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAirDensity {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "AirDensity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAirDensity() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "ReferenceAltitude" field.</summary>
    public const int ReferenceAltitudeFieldNumber = 14;
    private readonly static double ReferenceAltitudeDefaultValue = 0D;

    private double referenceAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ReferenceAltitude {
      get { if ((_hasBits0 & 4096) != 0) { return referenceAltitude_; } else { return ReferenceAltitudeDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        referenceAltitude_ = value;
      }
    }
    /// <summary>Gets whether the "ReferenceAltitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReferenceAltitude {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "ReferenceAltitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReferenceAltitude() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "TargetAltitude" field.</summary>
    public const int TargetAltitudeFieldNumber = 15;
    private readonly static double TargetAltitudeDefaultValue = 0D;

    private double targetAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TargetAltitude {
      get { if ((_hasBits0 & 8192) != 0) { return targetAltitude_; } else { return TargetAltitudeDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        targetAltitude_ = value;
      }
    }
    /// <summary>Gets whether the "TargetAltitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetAltitude {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "TargetAltitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetAltitude() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "LandingGearAltAGLByRadar" field.</summary>
    public const int LandingGearAltAGLByRadarFieldNumber = 16;
    private readonly static float LandingGearAltAGLByRadarDefaultValue = 0F;

    private float landingGearAltAGLByRadar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LandingGearAltAGLByRadar {
      get { if ((_hasBits0 & 16384) != 0) { return landingGearAltAGLByRadar_; } else { return LandingGearAltAGLByRadarDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        landingGearAltAGLByRadar_ = value;
      }
    }
    /// <summary>Gets whether the "LandingGearAltAGLByRadar" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLandingGearAltAGLByRadar {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "LandingGearAltAGLByRadar" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLandingGearAltAGLByRadar() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "DetectedGroundAltitude" field.</summary>
    public const int DetectedGroundAltitudeFieldNumber = 17;
    private readonly static float DetectedGroundAltitudeDefaultValue = 0F;

    private float detectedGroundAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DetectedGroundAltitude {
      get { if ((_hasBits0 & 32768) != 0) { return detectedGroundAltitude_; } else { return DetectedGroundAltitudeDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        detectedGroundAltitude_ = value;
      }
    }
    /// <summary>Gets whether the "DetectedGroundAltitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDetectedGroundAltitude {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "DetectedGroundAltitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDetectedGroundAltitude() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "DiagnosticActionType" field.</summary>
    public const int DiagnosticActionTypeFieldNumber = 18;
    private readonly static int DiagnosticActionTypeDefaultValue = 0;

    private int diagnosticActionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DiagnosticActionType {
      get { if ((_hasBits0 & 65536) != 0) { return diagnosticActionType_; } else { return DiagnosticActionTypeDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        diagnosticActionType_ = value;
      }
    }
    /// <summary>Gets whether the "DiagnosticActionType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDiagnosticActionType {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "DiagnosticActionType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDiagnosticActionType() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "FlyDistance" field.</summary>
    public const int FlyDistanceFieldNumber = 19;
    private readonly static double FlyDistanceDefaultValue = 0D;

    private double flyDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FlyDistance {
      get { if ((_hasBits0 & 131072) != 0) { return flyDistance_; } else { return FlyDistanceDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        flyDistance_ = value;
      }
    }
    /// <summary>Gets whether the "FlyDistance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlyDistance {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "FlyDistance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlyDistance() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "CurrentPlanItemOrTemporaryPathCompletePercent" field.</summary>
    public const int CurrentPlanItemOrTemporaryPathCompletePercentFieldNumber = 20;
    private readonly static float CurrentPlanItemOrTemporaryPathCompletePercentDefaultValue = 0F;

    private float currentPlanItemOrTemporaryPathCompletePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CurrentPlanItemOrTemporaryPathCompletePercent {
      get { if ((_hasBits0 & 262144) != 0) { return currentPlanItemOrTemporaryPathCompletePercent_; } else { return CurrentPlanItemOrTemporaryPathCompletePercentDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        currentPlanItemOrTemporaryPathCompletePercent_ = value;
      }
    }
    /// <summary>Gets whether the "CurrentPlanItemOrTemporaryPathCompletePercent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentPlanItemOrTemporaryPathCompletePercent {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "CurrentPlanItemOrTemporaryPathCompletePercent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentPlanItemOrTemporaryPathCompletePercent() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "GotoThisPointAfterTakeoffSectionFinished" field.</summary>
    public const int GotoThisPointAfterTakeoffSectionFinishedFieldNumber = 21;
    private global::MetaData.Proto_PointOnFlyPath gotoThisPointAfterTakeoffSectionFinished_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_PointOnFlyPath GotoThisPointAfterTakeoffSectionFinished {
      get { return gotoThisPointAfterTakeoffSectionFinished_; }
      set {
        gotoThisPointAfterTakeoffSectionFinished_ = value;
      }
    }

    /// <summary>Field number for the "FlySeconds" field.</summary>
    public const int FlySecondsFieldNumber = 22;
    private readonly static uint FlySecondsDefaultValue = 0;

    private uint flySeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FlySeconds {
      get { if ((_hasBits0 & 524288) != 0) { return flySeconds_; } else { return FlySecondsDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        flySeconds_ = value;
      }
    }
    /// <summary>Gets whether the "FlySeconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlySeconds {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "FlySeconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlySeconds() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "TargetFlySpeed" field.</summary>
    public const int TargetFlySpeedFieldNumber = 23;
    private readonly static float TargetFlySpeedDefaultValue = 0F;

    private float targetFlySpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TargetFlySpeed {
      get { if ((_hasBits0 & 1048576) != 0) { return targetFlySpeed_; } else { return TargetFlySpeedDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        targetFlySpeed_ = value;
      }
    }
    /// <summary>Gets whether the "TargetFlySpeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetFlySpeed {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "TargetFlySpeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetFlySpeed() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "MagneticConfiguration" field.</summary>
    public const int MagneticConfigurationFieldNumber = 24;
    private readonly static uint MagneticConfigurationDefaultValue = 0;

    private uint magneticConfiguration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MagneticConfiguration {
      get { if ((_hasBits0 & 2097152) != 0) { return magneticConfiguration_; } else { return MagneticConfigurationDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        magneticConfiguration_ = value;
      }
    }
    /// <summary>Gets whether the "MagneticConfiguration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMagneticConfiguration {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "MagneticConfiguration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMagneticConfiguration() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "WingCruiseLonOverrideMode" field.</summary>
    public const int WingCruiseLonOverrideModeFieldNumber = 25;
    private readonly static uint WingCruiseLonOverrideModeDefaultValue = 0;

    private uint wingCruiseLonOverrideMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint WingCruiseLonOverrideMode {
      get { if ((_hasBits0 & 4194304) != 0) { return wingCruiseLonOverrideMode_; } else { return WingCruiseLonOverrideModeDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        wingCruiseLonOverrideMode_ = value;
      }
    }
    /// <summary>Gets whether the "WingCruiseLonOverrideMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWingCruiseLonOverrideMode {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "WingCruiseLonOverrideMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWingCruiseLonOverrideMode() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "IsAllCruiseFuelEnginePowerOn" field.</summary>
    public const int IsAllCruiseFuelEnginePowerOnFieldNumber = 26;
    private readonly static bool IsAllCruiseFuelEnginePowerOnDefaultValue = false;

    private bool isAllCruiseFuelEnginePowerOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAllCruiseFuelEnginePowerOn {
      get { if ((_hasBits0 & 8388608) != 0) { return isAllCruiseFuelEnginePowerOn_; } else { return IsAllCruiseFuelEnginePowerOnDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        isAllCruiseFuelEnginePowerOn_ = value;
      }
    }
    /// <summary>Gets whether the "IsAllCruiseFuelEnginePowerOn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAllCruiseFuelEnginePowerOn {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "IsAllCruiseFuelEnginePowerOn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAllCruiseFuelEnginePowerOn() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "IsAllCruiseFuelEngineRunning" field.</summary>
    public const int IsAllCruiseFuelEngineRunningFieldNumber = 27;
    private readonly static bool IsAllCruiseFuelEngineRunningDefaultValue = false;

    private bool isAllCruiseFuelEngineRunning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAllCruiseFuelEngineRunning {
      get { if ((_hasBits0 & 16777216) != 0) { return isAllCruiseFuelEngineRunning_; } else { return IsAllCruiseFuelEngineRunningDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        isAllCruiseFuelEngineRunning_ = value;
      }
    }
    /// <summary>Gets whether the "IsAllCruiseFuelEngineRunning" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAllCruiseFuelEngineRunning {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "IsAllCruiseFuelEngineRunning" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAllCruiseFuelEngineRunning() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "ShouldCruiseEngineAvailable" field.</summary>
    public const int ShouldCruiseEngineAvailableFieldNumber = 28;
    private readonly static bool ShouldCruiseEngineAvailableDefaultValue = false;

    private bool shouldCruiseEngineAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShouldCruiseEngineAvailable {
      get { if ((_hasBits0 & 33554432) != 0) { return shouldCruiseEngineAvailable_; } else { return ShouldCruiseEngineAvailableDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        shouldCruiseEngineAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "ShouldCruiseEngineAvailable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShouldCruiseEngineAvailable {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "ShouldCruiseEngineAvailable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShouldCruiseEngineAvailable() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "IsOnGround" field.</summary>
    public const int IsOnGroundFieldNumber = 29;
    private readonly static bool IsOnGroundDefaultValue = false;

    private bool isOnGround_;
    /// <summary>
    ///飞机在地面
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOnGround {
      get { if ((_hasBits0 & 67108864) != 0) { return isOnGround_; } else { return IsOnGroundDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        isOnGround_ = value;
      }
    }
    /// <summary>Gets whether the "IsOnGround" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOnGround {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "IsOnGround" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOnGround() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "IsCmdRotorExpand" field.</summary>
    public const int IsCmdRotorExpandFieldNumber = 30;
    private readonly static bool IsCmdRotorExpandDefaultValue = false;

    private bool isCmdRotorExpand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCmdRotorExpand {
      get { if ((_hasBits0 & 134217728) != 0) { return isCmdRotorExpand_; } else { return IsCmdRotorExpandDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        isCmdRotorExpand_ = value;
      }
    }
    /// <summary>Gets whether the "IsCmdRotorExpand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCmdRotorExpand {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "IsCmdRotorExpand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCmdRotorExpand() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "IsCmdCargoLock" field.</summary>
    public const int IsCmdCargoLockFieldNumber = 31;
    private readonly static bool IsCmdCargoLockDefaultValue = false;

    private bool isCmdCargoLock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCmdCargoLock {
      get { if ((_hasBits0 & 268435456) != 0) { return isCmdCargoLock_; } else { return IsCmdCargoLockDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        isCmdCargoLock_ = value;
      }
    }
    /// <summary>Gets whether the "IsCmdCargoLock" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCmdCargoLock {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "IsCmdCargoLock" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCmdCargoLock() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "IsAGLBySonarAvailable" field.</summary>
    public const int IsAGLBySonarAvailableFieldNumber = 32;
    private readonly static bool IsAGLBySonarAvailableDefaultValue = false;

    private bool isAGLBySonarAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAGLBySonarAvailable {
      get { if ((_hasBits0 & 536870912) != 0) { return isAGLBySonarAvailable_; } else { return IsAGLBySonarAvailableDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        isAGLBySonarAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "IsAGLBySonarAvailable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAGLBySonarAvailable {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "IsAGLBySonarAvailable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAGLBySonarAvailable() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "IsInTestMotorServoMode" field.</summary>
    public const int IsInTestMotorServoModeFieldNumber = 33;
    private readonly static bool IsInTestMotorServoModeDefaultValue = false;

    private bool isInTestMotorServoMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInTestMotorServoMode {
      get { if ((_hasBits0 & 1073741824) != 0) { return isInTestMotorServoMode_; } else { return IsInTestMotorServoModeDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        isInTestMotorServoMode_ = value;
      }
    }
    /// <summary>Gets whether the "IsInTestMotorServoMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInTestMotorServoMode {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "IsInTestMotorServoMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInTestMotorServoMode() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "IsUsePitotTube" field.</summary>
    public const int IsUsePitotTubeFieldNumber = 34;
    private readonly static bool IsUsePitotTubeDefaultValue = false;

    private bool isUsePitotTube_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUsePitotTube {
      get { if ((_hasBits0 & -2147483648) != 0) { return isUsePitotTube_; } else { return IsUsePitotTubeDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        isUsePitotTube_ = value;
      }
    }
    /// <summary>Gets whether the "IsUsePitotTube" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsUsePitotTube {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "IsUsePitotTube" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsUsePitotTube() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "IsMotorsAndServosEnabled" field.</summary>
    public const int IsMotorsAndServosEnabledFieldNumber = 35;
    private readonly static bool IsMotorsAndServosEnabledDefaultValue = false;

    private bool isMotorsAndServosEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMotorsAndServosEnabled {
      get { if ((_hasBits1 & 1) != 0) { return isMotorsAndServosEnabled_; } else { return IsMotorsAndServosEnabledDefaultValue; } }
      set {
        _hasBits1 |= 1;
        isMotorsAndServosEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "IsMotorsAndServosEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsMotorsAndServosEnabled {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "IsMotorsAndServosEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsMotorsAndServosEnabled() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "HasLiftedOff" field.</summary>
    public const int HasLiftedOffFieldNumber = 36;
    private readonly static bool HasLiftedOffDefaultValue = false;

    private bool hasLiftedOff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLiftedOff {
      get { if ((_hasBits1 & 2) != 0) { return hasLiftedOff_; } else { return HasLiftedOffDefaultValue; } }
      set {
        _hasBits1 |= 2;
        hasLiftedOff_ = value;
      }
    }
    /// <summary>Gets whether the "HasLiftedOff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasLiftedOff {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "HasLiftedOff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasLiftedOff() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "IsFlightScheduleHasFinished" field.</summary>
    public const int IsFlightScheduleHasFinishedFieldNumber = 37;
    private readonly static bool IsFlightScheduleHasFinishedDefaultValue = false;

    private bool isFlightScheduleHasFinished_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFlightScheduleHasFinished {
      get { if ((_hasBits1 & 4) != 0) { return isFlightScheduleHasFinished_; } else { return IsFlightScheduleHasFinishedDefaultValue; } }
      set {
        _hasBits1 |= 4;
        isFlightScheduleHasFinished_ = value;
      }
    }
    /// <summary>Gets whether the "IsFlightScheduleHasFinished" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsFlightScheduleHasFinished {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "IsFlightScheduleHasFinished" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsFlightScheduleHasFinished() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "IsPilotControlActive" field.</summary>
    public const int IsPilotControlActiveFieldNumber = 38;
    private readonly static bool IsPilotControlActiveDefaultValue = false;

    private bool isPilotControlActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPilotControlActive {
      get { if ((_hasBits1 & 8) != 0) { return isPilotControlActive_; } else { return IsPilotControlActiveDefaultValue; } }
      set {
        _hasBits1 |= 8;
        isPilotControlActive_ = value;
      }
    }
    /// <summary>Gets whether the "IsPilotControlActive" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPilotControlActive {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "IsPilotControlActive" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPilotControlActive() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "IsWingCruiseHasFailed" field.</summary>
    public const int IsWingCruiseHasFailedFieldNumber = 39;
    private readonly static bool IsWingCruiseHasFailedDefaultValue = false;

    private bool isWingCruiseHasFailed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsWingCruiseHasFailed {
      get { if ((_hasBits1 & 16) != 0) { return isWingCruiseHasFailed_; } else { return IsWingCruiseHasFailedDefaultValue; } }
      set {
        _hasBits1 |= 16;
        isWingCruiseHasFailed_ = value;
      }
    }
    /// <summary>Gets whether the "IsWingCruiseHasFailed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsWingCruiseHasFailed {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "IsWingCruiseHasFailed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsWingCruiseHasFailed() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "IsEmergencyLandRequested" field.</summary>
    public const int IsEmergencyLandRequestedFieldNumber = 40;
    private readonly static bool IsEmergencyLandRequestedDefaultValue = false;

    private bool isEmergencyLandRequested_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEmergencyLandRequested {
      get { if ((_hasBits1 & 32) != 0) { return isEmergencyLandRequested_; } else { return IsEmergencyLandRequestedDefaultValue; } }
      set {
        _hasBits1 |= 32;
        isEmergencyLandRequested_ = value;
      }
    }
    /// <summary>Gets whether the "IsEmergencyLandRequested" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEmergencyLandRequested {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "IsEmergencyLandRequested" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEmergencyLandRequested() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "IsEmergencyLand" field.</summary>
    public const int IsEmergencyLandFieldNumber = 41;
    private readonly static bool IsEmergencyLandDefaultValue = false;

    private bool isEmergencyLand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEmergencyLand {
      get { if ((_hasBits1 & 64) != 0) { return isEmergencyLand_; } else { return IsEmergencyLandDefaultValue; } }
      set {
        _hasBits1 |= 64;
        isEmergencyLand_ = value;
      }
    }
    /// <summary>Gets whether the "IsEmergencyLand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEmergencyLand {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "IsEmergencyLand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEmergencyLand() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "HasException" field.</summary>
    public const int HasExceptionFieldNumber = 42;
    private readonly static bool HasExceptionDefaultValue = false;

    private bool hasException_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasException {
      get { if ((_hasBits1 & 128) != 0) { return hasException_; } else { return HasExceptionDefaultValue; } }
      set {
        _hasBits1 |= 128;
        hasException_ = value;
      }
    }
    /// <summary>Gets whether the "HasException" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasException {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "HasException" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasException() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "IsInSafeMode" field.</summary>
    public const int IsInSafeModeFieldNumber = 43;
    private readonly static bool IsInSafeModeDefaultValue = false;

    private bool isInSafeMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInSafeMode {
      get { if ((_hasBits1 & 256) != 0) { return isInSafeMode_; } else { return IsInSafeModeDefaultValue; } }
      set {
        _hasBits1 |= 256;
        isInSafeMode_ = value;
      }
    }
    /// <summary>Gets whether the "IsInSafeMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInSafeMode {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "IsInSafeMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInSafeMode() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "IsInTemporaryPath" field.</summary>
    public const int IsInTemporaryPathFieldNumber = 44;
    private readonly static bool IsInTemporaryPathDefaultValue = false;

    private bool isInTemporaryPath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInTemporaryPath {
      get { if ((_hasBits1 & 512) != 0) { return isInTemporaryPath_; } else { return IsInTemporaryPathDefaultValue; } }
      set {
        _hasBits1 |= 512;
        isInTemporaryPath_ = value;
      }
    }
    /// <summary>Gets whether the "IsInTemporaryPath" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInTemporaryPath {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "IsInTemporaryPath" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInTemporaryPath() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "IsGNSSDataQualityGood" field.</summary>
    public const int IsGNSSDataQualityGoodFieldNumber = 45;
    private readonly static bool IsGNSSDataQualityGoodDefaultValue = false;

    private bool isGNSSDataQualityGood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGNSSDataQualityGood {
      get { if ((_hasBits1 & 1024) != 0) { return isGNSSDataQualityGood_; } else { return IsGNSSDataQualityGoodDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        isGNSSDataQualityGood_ = value;
      }
    }
    /// <summary>Gets whether the "IsGNSSDataQualityGood" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsGNSSDataQualityGood {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "IsGNSSDataQualityGood" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsGNSSDataQualityGood() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "IsRejectingTakeOff" field.</summary>
    public const int IsRejectingTakeOffFieldNumber = 46;
    private readonly static bool IsRejectingTakeOffDefaultValue = false;

    private bool isRejectingTakeOff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRejectingTakeOff {
      get { if ((_hasBits1 & 2048) != 0) { return isRejectingTakeOff_; } else { return IsRejectingTakeOffDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        isRejectingTakeOff_ = value;
      }
    }
    /// <summary>Gets whether the "IsRejectingTakeOff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRejectingTakeOff {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "IsRejectingTakeOff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRejectingTakeOff() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "IsBreakPointRecorded" field.</summary>
    public const int IsBreakPointRecordedFieldNumber = 47;
    private readonly static bool IsBreakPointRecordedDefaultValue = false;

    private bool isBreakPointRecorded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBreakPointRecorded {
      get { if ((_hasBits1 & 4096) != 0) { return isBreakPointRecorded_; } else { return IsBreakPointRecordedDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        isBreakPointRecorded_ = value;
      }
    }
    /// <summary>Gets whether the "IsBreakPointRecorded" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBreakPointRecorded {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "IsBreakPointRecorded" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBreakPointRecorded() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "IsInHighPosAccuracyRotorModes" field.</summary>
    public const int IsInHighPosAccuracyRotorModesFieldNumber = 48;
    private readonly static bool IsInHighPosAccuracyRotorModesDefaultValue = false;

    private bool isInHighPosAccuracyRotorModes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInHighPosAccuracyRotorModes {
      get { if ((_hasBits1 & 8192) != 0) { return isInHighPosAccuracyRotorModes_; } else { return IsInHighPosAccuracyRotorModesDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        isInHighPosAccuracyRotorModes_ = value;
      }
    }
    /// <summary>Gets whether the "IsInHighPosAccuracyRotorModes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInHighPosAccuracyRotorModes {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "IsInHighPosAccuracyRotorModes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInHighPosAccuracyRotorModes() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "IsTargetAltitudeAGL" field.</summary>
    public const int IsTargetAltitudeAGLFieldNumber = 49;
    private readonly static bool IsTargetAltitudeAGLDefaultValue = false;

    private bool isTargetAltitudeAGL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTargetAltitudeAGL {
      get { if ((_hasBits1 & 16384) != 0) { return isTargetAltitudeAGL_; } else { return IsTargetAltitudeAGLDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        isTargetAltitudeAGL_ = value;
      }
    }
    /// <summary>Gets whether the "IsTargetAltitudeAGL" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsTargetAltitudeAGL {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "IsTargetAltitudeAGL" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsTargetAltitudeAGL() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "IsPosFileOpen" field.</summary>
    public const int IsPosFileOpenFieldNumber = 50;
    private readonly static bool IsPosFileOpenDefaultValue = false;

    private bool isPosFileOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPosFileOpen {
      get { if ((_hasBits1 & 32768) != 0) { return isPosFileOpen_; } else { return IsPosFileOpenDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        isPosFileOpen_ = value;
      }
    }
    /// <summary>Gets whether the "IsPosFileOpen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPosFileOpen {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "IsPosFileOpen" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPosFileOpen() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "IsCameraAutoShootPeriodically" field.</summary>
    public const int IsCameraAutoShootPeriodicallyFieldNumber = 51;
    private readonly static bool IsCameraAutoShootPeriodicallyDefaultValue = false;

    private bool isCameraAutoShootPeriodically_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCameraAutoShootPeriodically {
      get { if ((_hasBits1 & 65536) != 0) { return isCameraAutoShootPeriodically_; } else { return IsCameraAutoShootPeriodicallyDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        isCameraAutoShootPeriodically_ = value;
      }
    }
    /// <summary>Gets whether the "IsCameraAutoShootPeriodically" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCameraAutoShootPeriodically {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "IsCameraAutoShootPeriodically" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCameraAutoShootPeriodically() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "IsRequestOpenOnboardLog" field.</summary>
    public const int IsRequestOpenOnboardLogFieldNumber = 52;
    private readonly static bool IsRequestOpenOnboardLogDefaultValue = false;

    private bool isRequestOpenOnboardLog_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRequestOpenOnboardLog {
      get { if ((_hasBits1 & 131072) != 0) { return isRequestOpenOnboardLog_; } else { return IsRequestOpenOnboardLogDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        isRequestOpenOnboardLog_ = value;
      }
    }
    /// <summary>Gets whether the "IsRequestOpenOnboardLog" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRequestOpenOnboardLog {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "IsRequestOpenOnboardLog" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRequestOpenOnboardLog() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "IsOnboardLogOpen" field.</summary>
    public const int IsOnboardLogOpenFieldNumber = 53;
    private readonly static bool IsOnboardLogOpenDefaultValue = false;

    private bool isOnboardLogOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOnboardLogOpen {
      get { if ((_hasBits1 & 262144) != 0) { return isOnboardLogOpen_; } else { return IsOnboardLogOpenDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        isOnboardLogOpen_ = value;
      }
    }
    /// <summary>Gets whether the "IsOnboardLogOpen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOnboardLogOpen {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "IsOnboardLogOpen" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOnboardLogOpen() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "EnableFlightControlBoardAutoHeater" field.</summary>
    public const int EnableFlightControlBoardAutoHeaterFieldNumber = 54;
    private readonly static bool EnableFlightControlBoardAutoHeaterDefaultValue = false;

    private bool enableFlightControlBoardAutoHeater_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableFlightControlBoardAutoHeater {
      get { if ((_hasBits1 & 524288) != 0) { return enableFlightControlBoardAutoHeater_; } else { return EnableFlightControlBoardAutoHeaterDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        enableFlightControlBoardAutoHeater_ = value;
      }
    }
    /// <summary>Gets whether the "EnableFlightControlBoardAutoHeater" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnableFlightControlBoardAutoHeater {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "EnableFlightControlBoardAutoHeater" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnableFlightControlBoardAutoHeater() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "IsAutoSelfDriveSpeed" field.</summary>
    public const int IsAutoSelfDriveSpeedFieldNumber = 55;
    private readonly static bool IsAutoSelfDriveSpeedDefaultValue = false;

    private bool isAutoSelfDriveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoSelfDriveSpeed {
      get { if ((_hasBits1 & 1048576) != 0) { return isAutoSelfDriveSpeed_; } else { return IsAutoSelfDriveSpeedDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        isAutoSelfDriveSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "IsAutoSelfDriveSpeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoSelfDriveSpeed {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "IsAutoSelfDriveSpeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoSelfDriveSpeed() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "IsTargetAirspeedElseGndspeed" field.</summary>
    public const int IsTargetAirspeedElseGndspeedFieldNumber = 56;
    private readonly static bool IsTargetAirspeedElseGndspeedDefaultValue = false;

    private bool isTargetAirspeedElseGndspeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTargetAirspeedElseGndspeed {
      get { if ((_hasBits1 & 2097152) != 0) { return isTargetAirspeedElseGndspeed_; } else { return IsTargetAirspeedElseGndspeedDefaultValue; } }
      set {
        _hasBits1 |= 2097152;
        isTargetAirspeedElseGndspeed_ = value;
      }
    }
    /// <summary>Gets whether the "IsTargetAirspeedElseGndspeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsTargetAirspeedElseGndspeed {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "IsTargetAirspeedElseGndspeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsTargetAirspeedElseGndspeed() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "IsLowAltitudeProtection" field.</summary>
    public const int IsLowAltitudeProtectionFieldNumber = 57;
    private readonly static bool IsLowAltitudeProtectionDefaultValue = false;

    private bool isLowAltitudeProtection_;
    /// <summary>
    ///向下避障
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLowAltitudeProtection {
      get { if ((_hasBits1 & 4194304) != 0) { return isLowAltitudeProtection_; } else { return IsLowAltitudeProtectionDefaultValue; } }
      set {
        _hasBits1 |= 4194304;
        isLowAltitudeProtection_ = value;
      }
    }
    /// <summary>Gets whether the "IsLowAltitudeProtection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLowAltitudeProtection {
      get { return (_hasBits1 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "IsLowAltitudeProtection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLowAltitudeProtection() {
      _hasBits1 &= ~4194304;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_FlyProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_FlyProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Milliseconds != other.Milliseconds) return false;
      if (TaskState != other.TaskState) return false;
      if (ScheduleID != other.ScheduleID) return false;
      if (CurrentPlanItemIndex != other.CurrentPlanItemIndex) return false;
      if (HorizNaviMode != other.HorizNaviMode) return false;
      if (VertNaviMode != other.VertNaviMode) return false;
      if (LonInnerMode != other.LonInnerMode) return false;
      if (LatInnerMode != other.LatInnerMode) return false;
      if (RotorExpandState != other.RotorExpandState) return false;
      if (CargoState != other.CargoState) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EquivSeaLevelAirspeed, other.EquivSeaLevelAirspeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirDensity, other.AirDensity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReferenceAltitude, other.ReferenceAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TargetAltitude, other.TargetAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LandingGearAltAGLByRadar, other.LandingGearAltAGLByRadar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DetectedGroundAltitude, other.DetectedGroundAltitude)) return false;
      if (DiagnosticActionType != other.DiagnosticActionType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FlyDistance, other.FlyDistance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentPlanItemOrTemporaryPathCompletePercent, other.CurrentPlanItemOrTemporaryPathCompletePercent)) return false;
      if (!object.Equals(GotoThisPointAfterTakeoffSectionFinished, other.GotoThisPointAfterTakeoffSectionFinished)) return false;
      if (FlySeconds != other.FlySeconds) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetFlySpeed, other.TargetFlySpeed)) return false;
      if (MagneticConfiguration != other.MagneticConfiguration) return false;
      if (WingCruiseLonOverrideMode != other.WingCruiseLonOverrideMode) return false;
      if (IsAllCruiseFuelEnginePowerOn != other.IsAllCruiseFuelEnginePowerOn) return false;
      if (IsAllCruiseFuelEngineRunning != other.IsAllCruiseFuelEngineRunning) return false;
      if (ShouldCruiseEngineAvailable != other.ShouldCruiseEngineAvailable) return false;
      if (IsOnGround != other.IsOnGround) return false;
      if (IsCmdRotorExpand != other.IsCmdRotorExpand) return false;
      if (IsCmdCargoLock != other.IsCmdCargoLock) return false;
      if (IsAGLBySonarAvailable != other.IsAGLBySonarAvailable) return false;
      if (IsInTestMotorServoMode != other.IsInTestMotorServoMode) return false;
      if (IsUsePitotTube != other.IsUsePitotTube) return false;
      if (IsMotorsAndServosEnabled != other.IsMotorsAndServosEnabled) return false;
      if (HasLiftedOff != other.HasLiftedOff) return false;
      if (IsFlightScheduleHasFinished != other.IsFlightScheduleHasFinished) return false;
      if (IsPilotControlActive != other.IsPilotControlActive) return false;
      if (IsWingCruiseHasFailed != other.IsWingCruiseHasFailed) return false;
      if (IsEmergencyLandRequested != other.IsEmergencyLandRequested) return false;
      if (IsEmergencyLand != other.IsEmergencyLand) return false;
      if (HasException != other.HasException) return false;
      if (IsInSafeMode != other.IsInSafeMode) return false;
      if (IsInTemporaryPath != other.IsInTemporaryPath) return false;
      if (IsGNSSDataQualityGood != other.IsGNSSDataQualityGood) return false;
      if (IsRejectingTakeOff != other.IsRejectingTakeOff) return false;
      if (IsBreakPointRecorded != other.IsBreakPointRecorded) return false;
      if (IsInHighPosAccuracyRotorModes != other.IsInHighPosAccuracyRotorModes) return false;
      if (IsTargetAltitudeAGL != other.IsTargetAltitudeAGL) return false;
      if (IsPosFileOpen != other.IsPosFileOpen) return false;
      if (IsCameraAutoShootPeriodically != other.IsCameraAutoShootPeriodically) return false;
      if (IsRequestOpenOnboardLog != other.IsRequestOpenOnboardLog) return false;
      if (IsOnboardLogOpen != other.IsOnboardLogOpen) return false;
      if (EnableFlightControlBoardAutoHeater != other.EnableFlightControlBoardAutoHeater) return false;
      if (IsAutoSelfDriveSpeed != other.IsAutoSelfDriveSpeed) return false;
      if (IsTargetAirspeedElseGndspeed != other.IsTargetAirspeedElseGndspeed) return false;
      if (IsLowAltitudeProtection != other.IsLowAltitudeProtection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMilliseconds) hash ^= Milliseconds.GetHashCode();
      if (HasTaskState) hash ^= TaskState.GetHashCode();
      if (HasScheduleID) hash ^= ScheduleID.GetHashCode();
      if (HasCurrentPlanItemIndex) hash ^= CurrentPlanItemIndex.GetHashCode();
      if (HasHorizNaviMode) hash ^= HorizNaviMode.GetHashCode();
      if (HasVertNaviMode) hash ^= VertNaviMode.GetHashCode();
      if (HasLonInnerMode) hash ^= LonInnerMode.GetHashCode();
      if (HasLatInnerMode) hash ^= LatInnerMode.GetHashCode();
      if (HasRotorExpandState) hash ^= RotorExpandState.GetHashCode();
      if (HasCargoState) hash ^= CargoState.GetHashCode();
      if (HasEquivSeaLevelAirspeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EquivSeaLevelAirspeed);
      if (HasAirDensity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirDensity);
      if (HasReferenceAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReferenceAltitude);
      if (HasTargetAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TargetAltitude);
      if (HasLandingGearAltAGLByRadar) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LandingGearAltAGLByRadar);
      if (HasDetectedGroundAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DetectedGroundAltitude);
      if (HasDiagnosticActionType) hash ^= DiagnosticActionType.GetHashCode();
      if (HasFlyDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FlyDistance);
      if (HasCurrentPlanItemOrTemporaryPathCompletePercent) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentPlanItemOrTemporaryPathCompletePercent);
      if (gotoThisPointAfterTakeoffSectionFinished_ != null) hash ^= GotoThisPointAfterTakeoffSectionFinished.GetHashCode();
      if (HasFlySeconds) hash ^= FlySeconds.GetHashCode();
      if (HasTargetFlySpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetFlySpeed);
      if (HasMagneticConfiguration) hash ^= MagneticConfiguration.GetHashCode();
      if (HasWingCruiseLonOverrideMode) hash ^= WingCruiseLonOverrideMode.GetHashCode();
      if (HasIsAllCruiseFuelEnginePowerOn) hash ^= IsAllCruiseFuelEnginePowerOn.GetHashCode();
      if (HasIsAllCruiseFuelEngineRunning) hash ^= IsAllCruiseFuelEngineRunning.GetHashCode();
      if (HasShouldCruiseEngineAvailable) hash ^= ShouldCruiseEngineAvailable.GetHashCode();
      if (HasIsOnGround) hash ^= IsOnGround.GetHashCode();
      if (HasIsCmdRotorExpand) hash ^= IsCmdRotorExpand.GetHashCode();
      if (HasIsCmdCargoLock) hash ^= IsCmdCargoLock.GetHashCode();
      if (HasIsAGLBySonarAvailable) hash ^= IsAGLBySonarAvailable.GetHashCode();
      if (HasIsInTestMotorServoMode) hash ^= IsInTestMotorServoMode.GetHashCode();
      if (HasIsUsePitotTube) hash ^= IsUsePitotTube.GetHashCode();
      if (HasIsMotorsAndServosEnabled) hash ^= IsMotorsAndServosEnabled.GetHashCode();
      if (HasHasLiftedOff) hash ^= HasLiftedOff.GetHashCode();
      if (HasIsFlightScheduleHasFinished) hash ^= IsFlightScheduleHasFinished.GetHashCode();
      if (HasIsPilotControlActive) hash ^= IsPilotControlActive.GetHashCode();
      if (HasIsWingCruiseHasFailed) hash ^= IsWingCruiseHasFailed.GetHashCode();
      if (HasIsEmergencyLandRequested) hash ^= IsEmergencyLandRequested.GetHashCode();
      if (HasIsEmergencyLand) hash ^= IsEmergencyLand.GetHashCode();
      if (HasHasException) hash ^= HasException.GetHashCode();
      if (HasIsInSafeMode) hash ^= IsInSafeMode.GetHashCode();
      if (HasIsInTemporaryPath) hash ^= IsInTemporaryPath.GetHashCode();
      if (HasIsGNSSDataQualityGood) hash ^= IsGNSSDataQualityGood.GetHashCode();
      if (HasIsRejectingTakeOff) hash ^= IsRejectingTakeOff.GetHashCode();
      if (HasIsBreakPointRecorded) hash ^= IsBreakPointRecorded.GetHashCode();
      if (HasIsInHighPosAccuracyRotorModes) hash ^= IsInHighPosAccuracyRotorModes.GetHashCode();
      if (HasIsTargetAltitudeAGL) hash ^= IsTargetAltitudeAGL.GetHashCode();
      if (HasIsPosFileOpen) hash ^= IsPosFileOpen.GetHashCode();
      if (HasIsCameraAutoShootPeriodically) hash ^= IsCameraAutoShootPeriodically.GetHashCode();
      if (HasIsRequestOpenOnboardLog) hash ^= IsRequestOpenOnboardLog.GetHashCode();
      if (HasIsOnboardLogOpen) hash ^= IsOnboardLogOpen.GetHashCode();
      if (HasEnableFlightControlBoardAutoHeater) hash ^= EnableFlightControlBoardAutoHeater.GetHashCode();
      if (HasIsAutoSelfDriveSpeed) hash ^= IsAutoSelfDriveSpeed.GetHashCode();
      if (HasIsTargetAirspeedElseGndspeed) hash ^= IsTargetAirspeedElseGndspeed.GetHashCode();
      if (HasIsLowAltitudeProtection) hash ^= IsLowAltitudeProtection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMilliseconds) {
        output.WriteRawTag(8);
        output.WriteUInt32(Milliseconds);
      }
      if (HasTaskState) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskState);
      }
      if (HasScheduleID) {
        output.WriteRawTag(24);
        output.WriteUInt32(ScheduleID);
      }
      if (HasCurrentPlanItemIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentPlanItemIndex);
      }
      if (HasHorizNaviMode) {
        output.WriteRawTag(48);
        output.WriteUInt32(HorizNaviMode);
      }
      if (HasVertNaviMode) {
        output.WriteRawTag(56);
        output.WriteUInt32(VertNaviMode);
      }
      if (HasLonInnerMode) {
        output.WriteRawTag(64);
        output.WriteUInt32(LonInnerMode);
      }
      if (HasLatInnerMode) {
        output.WriteRawTag(72);
        output.WriteUInt32(LatInnerMode);
      }
      if (HasRotorExpandState) {
        output.WriteRawTag(80);
        output.WriteUInt32(RotorExpandState);
      }
      if (HasCargoState) {
        output.WriteRawTag(88);
        output.WriteUInt32(CargoState);
      }
      if (HasEquivSeaLevelAirspeed) {
        output.WriteRawTag(101);
        output.WriteFloat(EquivSeaLevelAirspeed);
      }
      if (HasAirDensity) {
        output.WriteRawTag(109);
        output.WriteFloat(AirDensity);
      }
      if (HasReferenceAltitude) {
        output.WriteRawTag(113);
        output.WriteDouble(ReferenceAltitude);
      }
      if (HasTargetAltitude) {
        output.WriteRawTag(121);
        output.WriteDouble(TargetAltitude);
      }
      if (HasLandingGearAltAGLByRadar) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(LandingGearAltAGLByRadar);
      }
      if (HasDetectedGroundAltitude) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(DetectedGroundAltitude);
      }
      if (HasDiagnosticActionType) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DiagnosticActionType);
      }
      if (HasFlyDistance) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(FlyDistance);
      }
      if (HasCurrentPlanItemOrTemporaryPathCompletePercent) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CurrentPlanItemOrTemporaryPathCompletePercent);
      }
      if (gotoThisPointAfterTakeoffSectionFinished_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(GotoThisPointAfterTakeoffSectionFinished);
      }
      if (HasFlySeconds) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(FlySeconds);
      }
      if (HasTargetFlySpeed) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(TargetFlySpeed);
      }
      if (HasMagneticConfiguration) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(MagneticConfiguration);
      }
      if (HasWingCruiseLonOverrideMode) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(WingCruiseLonOverrideMode);
      }
      if (HasIsAllCruiseFuelEnginePowerOn) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsAllCruiseFuelEnginePowerOn);
      }
      if (HasIsAllCruiseFuelEngineRunning) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsAllCruiseFuelEngineRunning);
      }
      if (HasShouldCruiseEngineAvailable) {
        output.WriteRawTag(224, 1);
        output.WriteBool(ShouldCruiseEngineAvailable);
      }
      if (HasIsOnGround) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IsOnGround);
      }
      if (HasIsCmdRotorExpand) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsCmdRotorExpand);
      }
      if (HasIsCmdCargoLock) {
        output.WriteRawTag(248, 1);
        output.WriteBool(IsCmdCargoLock);
      }
      if (HasIsAGLBySonarAvailable) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsAGLBySonarAvailable);
      }
      if (HasIsInTestMotorServoMode) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsInTestMotorServoMode);
      }
      if (HasIsUsePitotTube) {
        output.WriteRawTag(144, 2);
        output.WriteBool(IsUsePitotTube);
      }
      if (HasIsMotorsAndServosEnabled) {
        output.WriteRawTag(152, 2);
        output.WriteBool(IsMotorsAndServosEnabled);
      }
      if (HasHasLiftedOff) {
        output.WriteRawTag(160, 2);
        output.WriteBool(HasLiftedOff);
      }
      if (HasIsFlightScheduleHasFinished) {
        output.WriteRawTag(168, 2);
        output.WriteBool(IsFlightScheduleHasFinished);
      }
      if (HasIsPilotControlActive) {
        output.WriteRawTag(176, 2);
        output.WriteBool(IsPilotControlActive);
      }
      if (HasIsWingCruiseHasFailed) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsWingCruiseHasFailed);
      }
      if (HasIsEmergencyLandRequested) {
        output.WriteRawTag(192, 2);
        output.WriteBool(IsEmergencyLandRequested);
      }
      if (HasIsEmergencyLand) {
        output.WriteRawTag(200, 2);
        output.WriteBool(IsEmergencyLand);
      }
      if (HasHasException) {
        output.WriteRawTag(208, 2);
        output.WriteBool(HasException);
      }
      if (HasIsInSafeMode) {
        output.WriteRawTag(216, 2);
        output.WriteBool(IsInSafeMode);
      }
      if (HasIsInTemporaryPath) {
        output.WriteRawTag(224, 2);
        output.WriteBool(IsInTemporaryPath);
      }
      if (HasIsGNSSDataQualityGood) {
        output.WriteRawTag(232, 2);
        output.WriteBool(IsGNSSDataQualityGood);
      }
      if (HasIsRejectingTakeOff) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsRejectingTakeOff);
      }
      if (HasIsBreakPointRecorded) {
        output.WriteRawTag(248, 2);
        output.WriteBool(IsBreakPointRecorded);
      }
      if (HasIsInHighPosAccuracyRotorModes) {
        output.WriteRawTag(128, 3);
        output.WriteBool(IsInHighPosAccuracyRotorModes);
      }
      if (HasIsTargetAltitudeAGL) {
        output.WriteRawTag(136, 3);
        output.WriteBool(IsTargetAltitudeAGL);
      }
      if (HasIsPosFileOpen) {
        output.WriteRawTag(144, 3);
        output.WriteBool(IsPosFileOpen);
      }
      if (HasIsCameraAutoShootPeriodically) {
        output.WriteRawTag(152, 3);
        output.WriteBool(IsCameraAutoShootPeriodically);
      }
      if (HasIsRequestOpenOnboardLog) {
        output.WriteRawTag(160, 3);
        output.WriteBool(IsRequestOpenOnboardLog);
      }
      if (HasIsOnboardLogOpen) {
        output.WriteRawTag(168, 3);
        output.WriteBool(IsOnboardLogOpen);
      }
      if (HasEnableFlightControlBoardAutoHeater) {
        output.WriteRawTag(176, 3);
        output.WriteBool(EnableFlightControlBoardAutoHeater);
      }
      if (HasIsAutoSelfDriveSpeed) {
        output.WriteRawTag(184, 3);
        output.WriteBool(IsAutoSelfDriveSpeed);
      }
      if (HasIsTargetAirspeedElseGndspeed) {
        output.WriteRawTag(192, 3);
        output.WriteBool(IsTargetAirspeedElseGndspeed);
      }
      if (HasIsLowAltitudeProtection) {
        output.WriteRawTag(200, 3);
        output.WriteBool(IsLowAltitudeProtection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMilliseconds) {
        output.WriteRawTag(8);
        output.WriteUInt32(Milliseconds);
      }
      if (HasTaskState) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskState);
      }
      if (HasScheduleID) {
        output.WriteRawTag(24);
        output.WriteUInt32(ScheduleID);
      }
      if (HasCurrentPlanItemIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentPlanItemIndex);
      }
      if (HasHorizNaviMode) {
        output.WriteRawTag(48);
        output.WriteUInt32(HorizNaviMode);
      }
      if (HasVertNaviMode) {
        output.WriteRawTag(56);
        output.WriteUInt32(VertNaviMode);
      }
      if (HasLonInnerMode) {
        output.WriteRawTag(64);
        output.WriteUInt32(LonInnerMode);
      }
      if (HasLatInnerMode) {
        output.WriteRawTag(72);
        output.WriteUInt32(LatInnerMode);
      }
      if (HasRotorExpandState) {
        output.WriteRawTag(80);
        output.WriteUInt32(RotorExpandState);
      }
      if (HasCargoState) {
        output.WriteRawTag(88);
        output.WriteUInt32(CargoState);
      }
      if (HasEquivSeaLevelAirspeed) {
        output.WriteRawTag(101);
        output.WriteFloat(EquivSeaLevelAirspeed);
      }
      if (HasAirDensity) {
        output.WriteRawTag(109);
        output.WriteFloat(AirDensity);
      }
      if (HasReferenceAltitude) {
        output.WriteRawTag(113);
        output.WriteDouble(ReferenceAltitude);
      }
      if (HasTargetAltitude) {
        output.WriteRawTag(121);
        output.WriteDouble(TargetAltitude);
      }
      if (HasLandingGearAltAGLByRadar) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(LandingGearAltAGLByRadar);
      }
      if (HasDetectedGroundAltitude) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(DetectedGroundAltitude);
      }
      if (HasDiagnosticActionType) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DiagnosticActionType);
      }
      if (HasFlyDistance) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(FlyDistance);
      }
      if (HasCurrentPlanItemOrTemporaryPathCompletePercent) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CurrentPlanItemOrTemporaryPathCompletePercent);
      }
      if (gotoThisPointAfterTakeoffSectionFinished_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(GotoThisPointAfterTakeoffSectionFinished);
      }
      if (HasFlySeconds) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(FlySeconds);
      }
      if (HasTargetFlySpeed) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(TargetFlySpeed);
      }
      if (HasMagneticConfiguration) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(MagneticConfiguration);
      }
      if (HasWingCruiseLonOverrideMode) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(WingCruiseLonOverrideMode);
      }
      if (HasIsAllCruiseFuelEnginePowerOn) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsAllCruiseFuelEnginePowerOn);
      }
      if (HasIsAllCruiseFuelEngineRunning) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsAllCruiseFuelEngineRunning);
      }
      if (HasShouldCruiseEngineAvailable) {
        output.WriteRawTag(224, 1);
        output.WriteBool(ShouldCruiseEngineAvailable);
      }
      if (HasIsOnGround) {
        output.WriteRawTag(232, 1);
        output.WriteBool(IsOnGround);
      }
      if (HasIsCmdRotorExpand) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsCmdRotorExpand);
      }
      if (HasIsCmdCargoLock) {
        output.WriteRawTag(248, 1);
        output.WriteBool(IsCmdCargoLock);
      }
      if (HasIsAGLBySonarAvailable) {
        output.WriteRawTag(128, 2);
        output.WriteBool(IsAGLBySonarAvailable);
      }
      if (HasIsInTestMotorServoMode) {
        output.WriteRawTag(136, 2);
        output.WriteBool(IsInTestMotorServoMode);
      }
      if (HasIsUsePitotTube) {
        output.WriteRawTag(144, 2);
        output.WriteBool(IsUsePitotTube);
      }
      if (HasIsMotorsAndServosEnabled) {
        output.WriteRawTag(152, 2);
        output.WriteBool(IsMotorsAndServosEnabled);
      }
      if (HasHasLiftedOff) {
        output.WriteRawTag(160, 2);
        output.WriteBool(HasLiftedOff);
      }
      if (HasIsFlightScheduleHasFinished) {
        output.WriteRawTag(168, 2);
        output.WriteBool(IsFlightScheduleHasFinished);
      }
      if (HasIsPilotControlActive) {
        output.WriteRawTag(176, 2);
        output.WriteBool(IsPilotControlActive);
      }
      if (HasIsWingCruiseHasFailed) {
        output.WriteRawTag(184, 2);
        output.WriteBool(IsWingCruiseHasFailed);
      }
      if (HasIsEmergencyLandRequested) {
        output.WriteRawTag(192, 2);
        output.WriteBool(IsEmergencyLandRequested);
      }
      if (HasIsEmergencyLand) {
        output.WriteRawTag(200, 2);
        output.WriteBool(IsEmergencyLand);
      }
      if (HasHasException) {
        output.WriteRawTag(208, 2);
        output.WriteBool(HasException);
      }
      if (HasIsInSafeMode) {
        output.WriteRawTag(216, 2);
        output.WriteBool(IsInSafeMode);
      }
      if (HasIsInTemporaryPath) {
        output.WriteRawTag(224, 2);
        output.WriteBool(IsInTemporaryPath);
      }
      if (HasIsGNSSDataQualityGood) {
        output.WriteRawTag(232, 2);
        output.WriteBool(IsGNSSDataQualityGood);
      }
      if (HasIsRejectingTakeOff) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsRejectingTakeOff);
      }
      if (HasIsBreakPointRecorded) {
        output.WriteRawTag(248, 2);
        output.WriteBool(IsBreakPointRecorded);
      }
      if (HasIsInHighPosAccuracyRotorModes) {
        output.WriteRawTag(128, 3);
        output.WriteBool(IsInHighPosAccuracyRotorModes);
      }
      if (HasIsTargetAltitudeAGL) {
        output.WriteRawTag(136, 3);
        output.WriteBool(IsTargetAltitudeAGL);
      }
      if (HasIsPosFileOpen) {
        output.WriteRawTag(144, 3);
        output.WriteBool(IsPosFileOpen);
      }
      if (HasIsCameraAutoShootPeriodically) {
        output.WriteRawTag(152, 3);
        output.WriteBool(IsCameraAutoShootPeriodically);
      }
      if (HasIsRequestOpenOnboardLog) {
        output.WriteRawTag(160, 3);
        output.WriteBool(IsRequestOpenOnboardLog);
      }
      if (HasIsOnboardLogOpen) {
        output.WriteRawTag(168, 3);
        output.WriteBool(IsOnboardLogOpen);
      }
      if (HasEnableFlightControlBoardAutoHeater) {
        output.WriteRawTag(176, 3);
        output.WriteBool(EnableFlightControlBoardAutoHeater);
      }
      if (HasIsAutoSelfDriveSpeed) {
        output.WriteRawTag(184, 3);
        output.WriteBool(IsAutoSelfDriveSpeed);
      }
      if (HasIsTargetAirspeedElseGndspeed) {
        output.WriteRawTag(192, 3);
        output.WriteBool(IsTargetAirspeedElseGndspeed);
      }
      if (HasIsLowAltitudeProtection) {
        output.WriteRawTag(200, 3);
        output.WriteBool(IsLowAltitudeProtection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMilliseconds) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Milliseconds);
      }
      if (HasTaskState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskState);
      }
      if (HasScheduleID) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScheduleID);
      }
      if (HasCurrentPlanItemIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlanItemIndex);
      }
      if (HasHorizNaviMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HorizNaviMode);
      }
      if (HasVertNaviMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VertNaviMode);
      }
      if (HasLonInnerMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LonInnerMode);
      }
      if (HasLatInnerMode) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatInnerMode);
      }
      if (HasRotorExpandState) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RotorExpandState);
      }
      if (HasCargoState) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CargoState);
      }
      if (HasEquivSeaLevelAirspeed) {
        size += 1 + 4;
      }
      if (HasAirDensity) {
        size += 1 + 4;
      }
      if (HasReferenceAltitude) {
        size += 1 + 8;
      }
      if (HasTargetAltitude) {
        size += 1 + 8;
      }
      if (HasLandingGearAltAGLByRadar) {
        size += 2 + 4;
      }
      if (HasDetectedGroundAltitude) {
        size += 2 + 4;
      }
      if (HasDiagnosticActionType) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DiagnosticActionType);
      }
      if (HasFlyDistance) {
        size += 2 + 8;
      }
      if (HasCurrentPlanItemOrTemporaryPathCompletePercent) {
        size += 2 + 4;
      }
      if (gotoThisPointAfterTakeoffSectionFinished_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GotoThisPointAfterTakeoffSectionFinished);
      }
      if (HasFlySeconds) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FlySeconds);
      }
      if (HasTargetFlySpeed) {
        size += 2 + 4;
      }
      if (HasMagneticConfiguration) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MagneticConfiguration);
      }
      if (HasWingCruiseLonOverrideMode) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(WingCruiseLonOverrideMode);
      }
      if (HasIsAllCruiseFuelEnginePowerOn) {
        size += 2 + 1;
      }
      if (HasIsAllCruiseFuelEngineRunning) {
        size += 2 + 1;
      }
      if (HasShouldCruiseEngineAvailable) {
        size += 2 + 1;
      }
      if (HasIsOnGround) {
        size += 2 + 1;
      }
      if (HasIsCmdRotorExpand) {
        size += 2 + 1;
      }
      if (HasIsCmdCargoLock) {
        size += 2 + 1;
      }
      if (HasIsAGLBySonarAvailable) {
        size += 2 + 1;
      }
      if (HasIsInTestMotorServoMode) {
        size += 2 + 1;
      }
      if (HasIsUsePitotTube) {
        size += 2 + 1;
      }
      if (HasIsMotorsAndServosEnabled) {
        size += 2 + 1;
      }
      if (HasHasLiftedOff) {
        size += 2 + 1;
      }
      if (HasIsFlightScheduleHasFinished) {
        size += 2 + 1;
      }
      if (HasIsPilotControlActive) {
        size += 2 + 1;
      }
      if (HasIsWingCruiseHasFailed) {
        size += 2 + 1;
      }
      if (HasIsEmergencyLandRequested) {
        size += 2 + 1;
      }
      if (HasIsEmergencyLand) {
        size += 2 + 1;
      }
      if (HasHasException) {
        size += 2 + 1;
      }
      if (HasIsInSafeMode) {
        size += 2 + 1;
      }
      if (HasIsInTemporaryPath) {
        size += 2 + 1;
      }
      if (HasIsGNSSDataQualityGood) {
        size += 2 + 1;
      }
      if (HasIsRejectingTakeOff) {
        size += 2 + 1;
      }
      if (HasIsBreakPointRecorded) {
        size += 2 + 1;
      }
      if (HasIsInHighPosAccuracyRotorModes) {
        size += 2 + 1;
      }
      if (HasIsTargetAltitudeAGL) {
        size += 2 + 1;
      }
      if (HasIsPosFileOpen) {
        size += 2 + 1;
      }
      if (HasIsCameraAutoShootPeriodically) {
        size += 2 + 1;
      }
      if (HasIsRequestOpenOnboardLog) {
        size += 2 + 1;
      }
      if (HasIsOnboardLogOpen) {
        size += 2 + 1;
      }
      if (HasEnableFlightControlBoardAutoHeater) {
        size += 2 + 1;
      }
      if (HasIsAutoSelfDriveSpeed) {
        size += 2 + 1;
      }
      if (HasIsTargetAirspeedElseGndspeed) {
        size += 2 + 1;
      }
      if (HasIsLowAltitudeProtection) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_FlyProgress other) {
      if (other == null) {
        return;
      }
      if (other.HasMilliseconds) {
        Milliseconds = other.Milliseconds;
      }
      if (other.HasTaskState) {
        TaskState = other.TaskState;
      }
      if (other.HasScheduleID) {
        ScheduleID = other.ScheduleID;
      }
      if (other.HasCurrentPlanItemIndex) {
        CurrentPlanItemIndex = other.CurrentPlanItemIndex;
      }
      if (other.HasHorizNaviMode) {
        HorizNaviMode = other.HorizNaviMode;
      }
      if (other.HasVertNaviMode) {
        VertNaviMode = other.VertNaviMode;
      }
      if (other.HasLonInnerMode) {
        LonInnerMode = other.LonInnerMode;
      }
      if (other.HasLatInnerMode) {
        LatInnerMode = other.LatInnerMode;
      }
      if (other.HasRotorExpandState) {
        RotorExpandState = other.RotorExpandState;
      }
      if (other.HasCargoState) {
        CargoState = other.CargoState;
      }
      if (other.HasEquivSeaLevelAirspeed) {
        EquivSeaLevelAirspeed = other.EquivSeaLevelAirspeed;
      }
      if (other.HasAirDensity) {
        AirDensity = other.AirDensity;
      }
      if (other.HasReferenceAltitude) {
        ReferenceAltitude = other.ReferenceAltitude;
      }
      if (other.HasTargetAltitude) {
        TargetAltitude = other.TargetAltitude;
      }
      if (other.HasLandingGearAltAGLByRadar) {
        LandingGearAltAGLByRadar = other.LandingGearAltAGLByRadar;
      }
      if (other.HasDetectedGroundAltitude) {
        DetectedGroundAltitude = other.DetectedGroundAltitude;
      }
      if (other.HasDiagnosticActionType) {
        DiagnosticActionType = other.DiagnosticActionType;
      }
      if (other.HasFlyDistance) {
        FlyDistance = other.FlyDistance;
      }
      if (other.HasCurrentPlanItemOrTemporaryPathCompletePercent) {
        CurrentPlanItemOrTemporaryPathCompletePercent = other.CurrentPlanItemOrTemporaryPathCompletePercent;
      }
      if (other.gotoThisPointAfterTakeoffSectionFinished_ != null) {
        if (gotoThisPointAfterTakeoffSectionFinished_ == null) {
          GotoThisPointAfterTakeoffSectionFinished = new global::MetaData.Proto_PointOnFlyPath();
        }
        GotoThisPointAfterTakeoffSectionFinished.MergeFrom(other.GotoThisPointAfterTakeoffSectionFinished);
      }
      if (other.HasFlySeconds) {
        FlySeconds = other.FlySeconds;
      }
      if (other.HasTargetFlySpeed) {
        TargetFlySpeed = other.TargetFlySpeed;
      }
      if (other.HasMagneticConfiguration) {
        MagneticConfiguration = other.MagneticConfiguration;
      }
      if (other.HasWingCruiseLonOverrideMode) {
        WingCruiseLonOverrideMode = other.WingCruiseLonOverrideMode;
      }
      if (other.HasIsAllCruiseFuelEnginePowerOn) {
        IsAllCruiseFuelEnginePowerOn = other.IsAllCruiseFuelEnginePowerOn;
      }
      if (other.HasIsAllCruiseFuelEngineRunning) {
        IsAllCruiseFuelEngineRunning = other.IsAllCruiseFuelEngineRunning;
      }
      if (other.HasShouldCruiseEngineAvailable) {
        ShouldCruiseEngineAvailable = other.ShouldCruiseEngineAvailable;
      }
      if (other.HasIsOnGround) {
        IsOnGround = other.IsOnGround;
      }
      if (other.HasIsCmdRotorExpand) {
        IsCmdRotorExpand = other.IsCmdRotorExpand;
      }
      if (other.HasIsCmdCargoLock) {
        IsCmdCargoLock = other.IsCmdCargoLock;
      }
      if (other.HasIsAGLBySonarAvailable) {
        IsAGLBySonarAvailable = other.IsAGLBySonarAvailable;
      }
      if (other.HasIsInTestMotorServoMode) {
        IsInTestMotorServoMode = other.IsInTestMotorServoMode;
      }
      if (other.HasIsUsePitotTube) {
        IsUsePitotTube = other.IsUsePitotTube;
      }
      if (other.HasIsMotorsAndServosEnabled) {
        IsMotorsAndServosEnabled = other.IsMotorsAndServosEnabled;
      }
      if (other.HasHasLiftedOff) {
        HasLiftedOff = other.HasLiftedOff;
      }
      if (other.HasIsFlightScheduleHasFinished) {
        IsFlightScheduleHasFinished = other.IsFlightScheduleHasFinished;
      }
      if (other.HasIsPilotControlActive) {
        IsPilotControlActive = other.IsPilotControlActive;
      }
      if (other.HasIsWingCruiseHasFailed) {
        IsWingCruiseHasFailed = other.IsWingCruiseHasFailed;
      }
      if (other.HasIsEmergencyLandRequested) {
        IsEmergencyLandRequested = other.IsEmergencyLandRequested;
      }
      if (other.HasIsEmergencyLand) {
        IsEmergencyLand = other.IsEmergencyLand;
      }
      if (other.HasHasException) {
        HasException = other.HasException;
      }
      if (other.HasIsInSafeMode) {
        IsInSafeMode = other.IsInSafeMode;
      }
      if (other.HasIsInTemporaryPath) {
        IsInTemporaryPath = other.IsInTemporaryPath;
      }
      if (other.HasIsGNSSDataQualityGood) {
        IsGNSSDataQualityGood = other.IsGNSSDataQualityGood;
      }
      if (other.HasIsRejectingTakeOff) {
        IsRejectingTakeOff = other.IsRejectingTakeOff;
      }
      if (other.HasIsBreakPointRecorded) {
        IsBreakPointRecorded = other.IsBreakPointRecorded;
      }
      if (other.HasIsInHighPosAccuracyRotorModes) {
        IsInHighPosAccuracyRotorModes = other.IsInHighPosAccuracyRotorModes;
      }
      if (other.HasIsTargetAltitudeAGL) {
        IsTargetAltitudeAGL = other.IsTargetAltitudeAGL;
      }
      if (other.HasIsPosFileOpen) {
        IsPosFileOpen = other.IsPosFileOpen;
      }
      if (other.HasIsCameraAutoShootPeriodically) {
        IsCameraAutoShootPeriodically = other.IsCameraAutoShootPeriodically;
      }
      if (other.HasIsRequestOpenOnboardLog) {
        IsRequestOpenOnboardLog = other.IsRequestOpenOnboardLog;
      }
      if (other.HasIsOnboardLogOpen) {
        IsOnboardLogOpen = other.IsOnboardLogOpen;
      }
      if (other.HasEnableFlightControlBoardAutoHeater) {
        EnableFlightControlBoardAutoHeater = other.EnableFlightControlBoardAutoHeater;
      }
      if (other.HasIsAutoSelfDriveSpeed) {
        IsAutoSelfDriveSpeed = other.IsAutoSelfDriveSpeed;
      }
      if (other.HasIsTargetAirspeedElseGndspeed) {
        IsTargetAirspeedElseGndspeed = other.IsTargetAirspeedElseGndspeed;
      }
      if (other.HasIsLowAltitudeProtection) {
        IsLowAltitudeProtection = other.IsLowAltitudeProtection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Milliseconds = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskState = input.ReadInt32();
            break;
          }
          case 24: {
            ScheduleID = input.ReadUInt32();
            break;
          }
          case 32: {
            CurrentPlanItemIndex = input.ReadInt32();
            break;
          }
          case 48: {
            HorizNaviMode = input.ReadUInt32();
            break;
          }
          case 56: {
            VertNaviMode = input.ReadUInt32();
            break;
          }
          case 64: {
            LonInnerMode = input.ReadUInt32();
            break;
          }
          case 72: {
            LatInnerMode = input.ReadUInt32();
            break;
          }
          case 80: {
            RotorExpandState = input.ReadUInt32();
            break;
          }
          case 88: {
            CargoState = input.ReadUInt32();
            break;
          }
          case 101: {
            EquivSeaLevelAirspeed = input.ReadFloat();
            break;
          }
          case 109: {
            AirDensity = input.ReadFloat();
            break;
          }
          case 113: {
            ReferenceAltitude = input.ReadDouble();
            break;
          }
          case 121: {
            TargetAltitude = input.ReadDouble();
            break;
          }
          case 133: {
            LandingGearAltAGLByRadar = input.ReadFloat();
            break;
          }
          case 141: {
            DetectedGroundAltitude = input.ReadFloat();
            break;
          }
          case 144: {
            DiagnosticActionType = input.ReadInt32();
            break;
          }
          case 153: {
            FlyDistance = input.ReadDouble();
            break;
          }
          case 165: {
            CurrentPlanItemOrTemporaryPathCompletePercent = input.ReadFloat();
            break;
          }
          case 170: {
            if (gotoThisPointAfterTakeoffSectionFinished_ == null) {
              GotoThisPointAfterTakeoffSectionFinished = new global::MetaData.Proto_PointOnFlyPath();
            }
            input.ReadMessage(GotoThisPointAfterTakeoffSectionFinished);
            break;
          }
          case 176: {
            FlySeconds = input.ReadUInt32();
            break;
          }
          case 189: {
            TargetFlySpeed = input.ReadFloat();
            break;
          }
          case 192: {
            MagneticConfiguration = input.ReadUInt32();
            break;
          }
          case 200: {
            WingCruiseLonOverrideMode = input.ReadUInt32();
            break;
          }
          case 208: {
            IsAllCruiseFuelEnginePowerOn = input.ReadBool();
            break;
          }
          case 216: {
            IsAllCruiseFuelEngineRunning = input.ReadBool();
            break;
          }
          case 224: {
            ShouldCruiseEngineAvailable = input.ReadBool();
            break;
          }
          case 232: {
            IsOnGround = input.ReadBool();
            break;
          }
          case 240: {
            IsCmdRotorExpand = input.ReadBool();
            break;
          }
          case 248: {
            IsCmdCargoLock = input.ReadBool();
            break;
          }
          case 256: {
            IsAGLBySonarAvailable = input.ReadBool();
            break;
          }
          case 264: {
            IsInTestMotorServoMode = input.ReadBool();
            break;
          }
          case 272: {
            IsUsePitotTube = input.ReadBool();
            break;
          }
          case 280: {
            IsMotorsAndServosEnabled = input.ReadBool();
            break;
          }
          case 288: {
            HasLiftedOff = input.ReadBool();
            break;
          }
          case 296: {
            IsFlightScheduleHasFinished = input.ReadBool();
            break;
          }
          case 304: {
            IsPilotControlActive = input.ReadBool();
            break;
          }
          case 312: {
            IsWingCruiseHasFailed = input.ReadBool();
            break;
          }
          case 320: {
            IsEmergencyLandRequested = input.ReadBool();
            break;
          }
          case 328: {
            IsEmergencyLand = input.ReadBool();
            break;
          }
          case 336: {
            HasException = input.ReadBool();
            break;
          }
          case 344: {
            IsInSafeMode = input.ReadBool();
            break;
          }
          case 352: {
            IsInTemporaryPath = input.ReadBool();
            break;
          }
          case 360: {
            IsGNSSDataQualityGood = input.ReadBool();
            break;
          }
          case 368: {
            IsRejectingTakeOff = input.ReadBool();
            break;
          }
          case 376: {
            IsBreakPointRecorded = input.ReadBool();
            break;
          }
          case 384: {
            IsInHighPosAccuracyRotorModes = input.ReadBool();
            break;
          }
          case 392: {
            IsTargetAltitudeAGL = input.ReadBool();
            break;
          }
          case 400: {
            IsPosFileOpen = input.ReadBool();
            break;
          }
          case 408: {
            IsCameraAutoShootPeriodically = input.ReadBool();
            break;
          }
          case 416: {
            IsRequestOpenOnboardLog = input.ReadBool();
            break;
          }
          case 424: {
            IsOnboardLogOpen = input.ReadBool();
            break;
          }
          case 432: {
            EnableFlightControlBoardAutoHeater = input.ReadBool();
            break;
          }
          case 440: {
            IsAutoSelfDriveSpeed = input.ReadBool();
            break;
          }
          case 448: {
            IsTargetAirspeedElseGndspeed = input.ReadBool();
            break;
          }
          case 456: {
            IsLowAltitudeProtection = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Milliseconds = input.ReadUInt32();
            break;
          }
          case 16: {
            TaskState = input.ReadInt32();
            break;
          }
          case 24: {
            ScheduleID = input.ReadUInt32();
            break;
          }
          case 32: {
            CurrentPlanItemIndex = input.ReadInt32();
            break;
          }
          case 48: {
            HorizNaviMode = input.ReadUInt32();
            break;
          }
          case 56: {
            VertNaviMode = input.ReadUInt32();
            break;
          }
          case 64: {
            LonInnerMode = input.ReadUInt32();
            break;
          }
          case 72: {
            LatInnerMode = input.ReadUInt32();
            break;
          }
          case 80: {
            RotorExpandState = input.ReadUInt32();
            break;
          }
          case 88: {
            CargoState = input.ReadUInt32();
            break;
          }
          case 101: {
            EquivSeaLevelAirspeed = input.ReadFloat();
            break;
          }
          case 109: {
            AirDensity = input.ReadFloat();
            break;
          }
          case 113: {
            ReferenceAltitude = input.ReadDouble();
            break;
          }
          case 121: {
            TargetAltitude = input.ReadDouble();
            break;
          }
          case 133: {
            LandingGearAltAGLByRadar = input.ReadFloat();
            break;
          }
          case 141: {
            DetectedGroundAltitude = input.ReadFloat();
            break;
          }
          case 144: {
            DiagnosticActionType = input.ReadInt32();
            break;
          }
          case 153: {
            FlyDistance = input.ReadDouble();
            break;
          }
          case 165: {
            CurrentPlanItemOrTemporaryPathCompletePercent = input.ReadFloat();
            break;
          }
          case 170: {
            if (gotoThisPointAfterTakeoffSectionFinished_ == null) {
              GotoThisPointAfterTakeoffSectionFinished = new global::MetaData.Proto_PointOnFlyPath();
            }
            input.ReadMessage(GotoThisPointAfterTakeoffSectionFinished);
            break;
          }
          case 176: {
            FlySeconds = input.ReadUInt32();
            break;
          }
          case 189: {
            TargetFlySpeed = input.ReadFloat();
            break;
          }
          case 192: {
            MagneticConfiguration = input.ReadUInt32();
            break;
          }
          case 200: {
            WingCruiseLonOverrideMode = input.ReadUInt32();
            break;
          }
          case 208: {
            IsAllCruiseFuelEnginePowerOn = input.ReadBool();
            break;
          }
          case 216: {
            IsAllCruiseFuelEngineRunning = input.ReadBool();
            break;
          }
          case 224: {
            ShouldCruiseEngineAvailable = input.ReadBool();
            break;
          }
          case 232: {
            IsOnGround = input.ReadBool();
            break;
          }
          case 240: {
            IsCmdRotorExpand = input.ReadBool();
            break;
          }
          case 248: {
            IsCmdCargoLock = input.ReadBool();
            break;
          }
          case 256: {
            IsAGLBySonarAvailable = input.ReadBool();
            break;
          }
          case 264: {
            IsInTestMotorServoMode = input.ReadBool();
            break;
          }
          case 272: {
            IsUsePitotTube = input.ReadBool();
            break;
          }
          case 280: {
            IsMotorsAndServosEnabled = input.ReadBool();
            break;
          }
          case 288: {
            HasLiftedOff = input.ReadBool();
            break;
          }
          case 296: {
            IsFlightScheduleHasFinished = input.ReadBool();
            break;
          }
          case 304: {
            IsPilotControlActive = input.ReadBool();
            break;
          }
          case 312: {
            IsWingCruiseHasFailed = input.ReadBool();
            break;
          }
          case 320: {
            IsEmergencyLandRequested = input.ReadBool();
            break;
          }
          case 328: {
            IsEmergencyLand = input.ReadBool();
            break;
          }
          case 336: {
            HasException = input.ReadBool();
            break;
          }
          case 344: {
            IsInSafeMode = input.ReadBool();
            break;
          }
          case 352: {
            IsInTemporaryPath = input.ReadBool();
            break;
          }
          case 360: {
            IsGNSSDataQualityGood = input.ReadBool();
            break;
          }
          case 368: {
            IsRejectingTakeOff = input.ReadBool();
            break;
          }
          case 376: {
            IsBreakPointRecorded = input.ReadBool();
            break;
          }
          case 384: {
            IsInHighPosAccuracyRotorModes = input.ReadBool();
            break;
          }
          case 392: {
            IsTargetAltitudeAGL = input.ReadBool();
            break;
          }
          case 400: {
            IsPosFileOpen = input.ReadBool();
            break;
          }
          case 408: {
            IsCameraAutoShootPeriodically = input.ReadBool();
            break;
          }
          case 416: {
            IsRequestOpenOnboardLog = input.ReadBool();
            break;
          }
          case 424: {
            IsOnboardLogOpen = input.ReadBool();
            break;
          }
          case 432: {
            EnableFlightControlBoardAutoHeater = input.ReadBool();
            break;
          }
          case 440: {
            IsAutoSelfDriveSpeed = input.ReadBool();
            break;
          }
          case 448: {
            IsTargetAirspeedElseGndspeed = input.ReadBool();
            break;
          }
          case 456: {
            IsLowAltitudeProtection = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///飞机设置项
  /// </summary>
  public sealed partial class Proto_AircraftSetting : pb::IMessage<Proto_AircraftSetting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_AircraftSetting> _parser = new pb::MessageParser<Proto_AircraftSetting>(() => new Proto_AircraftSetting());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_AircraftSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftSetting(Proto_AircraftSetting other) : this() {
      _hasBits0 = other._hasBits0;
      aircraftName_ = other.aircraftName_;
      isOpenEngine_ = other.isOpenEngine_;
      isLowAltitudeProtection_ = other.isLowAltitudeProtection_;
      isEnableBatteryEnergyLowAutoReturn_ = other.isEnableBatteryEnergyLowAutoReturn_;
      isEnableFlyPlanModeAutoReturnWhenLinkLost_ = other.isEnableFlyPlanModeAutoReturnWhenLinkLost_;
      isEnableExitRICModeWhenLinkLost_ = other.isEnableExitRICModeWhenLinkLost_;
      isDisableEmergencyAutoLand_ = other.isDisableEmergencyAutoLand_;
      isAutoVertPortMode_ = other.isAutoVertPortMode_;
      isAutoSelfDriveAirspeed_ = other.isAutoSelfDriveAirspeed_;
      isForceExpandRotorsOnGround_ = other.isForceExpandRotorsOnGround_;
      payload_ = other.payload_ != null ? other.payload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftSetting Clone() {
      return new Proto_AircraftSetting(this);
    }

    /// <summary>Field number for the "AircraftName" field.</summary>
    public const int AircraftNameFieldNumber = 1;
    private string aircraftName_ = "";
    /// <summary>
    ///飞机名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AircraftName {
      get { return aircraftName_; }
      set {
        aircraftName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsOpenEngine" field.</summary>
    public const int IsOpenEngineFieldNumber = 2;
    private readonly static bool IsOpenEngineDefaultValue = false;

    private bool isOpenEngine_;
    /// <summary>
    ///开启动力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOpenEngine {
      get { if ((_hasBits0 & 1) != 0) { return isOpenEngine_; } else { return IsOpenEngineDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isOpenEngine_ = value;
      }
    }
    /// <summary>Gets whether the "IsOpenEngine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOpenEngine {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "IsOpenEngine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOpenEngine() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "IsLowAltitudeProtection" field.</summary>
    public const int IsLowAltitudeProtectionFieldNumber = 3;
    private readonly static bool IsLowAltitudeProtectionDefaultValue = false;

    private bool isLowAltitudeProtection_;
    /// <summary>
    ///向下避障
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLowAltitudeProtection {
      get { if ((_hasBits0 & 2) != 0) { return isLowAltitudeProtection_; } else { return IsLowAltitudeProtectionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isLowAltitudeProtection_ = value;
      }
    }
    /// <summary>Gets whether the "IsLowAltitudeProtection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLowAltitudeProtection {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsLowAltitudeProtection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLowAltitudeProtection() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "IsEnableBatteryEnergyLowAutoReturn" field.</summary>
    public const int IsEnableBatteryEnergyLowAutoReturnFieldNumber = 4;
    private readonly static bool IsEnableBatteryEnergyLowAutoReturnDefaultValue = false;

    private bool isEnableBatteryEnergyLowAutoReturn_;
    /// <summary>
    ///开启低电量返航
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEnableBatteryEnergyLowAutoReturn {
      get { if ((_hasBits0 & 4) != 0) { return isEnableBatteryEnergyLowAutoReturn_; } else { return IsEnableBatteryEnergyLowAutoReturnDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isEnableBatteryEnergyLowAutoReturn_ = value;
      }
    }
    /// <summary>Gets whether the "IsEnableBatteryEnergyLowAutoReturn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEnableBatteryEnergyLowAutoReturn {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "IsEnableBatteryEnergyLowAutoReturn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEnableBatteryEnergyLowAutoReturn() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "IsEnableFlyPlanModeAutoReturnWhenLinkLost" field.</summary>
    public const int IsEnableFlyPlanModeAutoReturnWhenLinkLostFieldNumber = 5;
    private readonly static bool IsEnableFlyPlanModeAutoReturnWhenLinkLostDefaultValue = false;

    private bool isEnableFlyPlanModeAutoReturnWhenLinkLost_;
    /// <summary>
    ///开启飞行计划模式数据链中断返航
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEnableFlyPlanModeAutoReturnWhenLinkLost {
      get { if ((_hasBits0 & 8) != 0) { return isEnableFlyPlanModeAutoReturnWhenLinkLost_; } else { return IsEnableFlyPlanModeAutoReturnWhenLinkLostDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isEnableFlyPlanModeAutoReturnWhenLinkLost_ = value;
      }
    }
    /// <summary>Gets whether the "IsEnableFlyPlanModeAutoReturnWhenLinkLost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEnableFlyPlanModeAutoReturnWhenLinkLost {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "IsEnableFlyPlanModeAutoReturnWhenLinkLost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEnableFlyPlanModeAutoReturnWhenLinkLost() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "IsEnableExitRICModeWhenLinkLost" field.</summary>
    public const int IsEnableExitRICModeWhenLinkLostFieldNumber = 6;
    private readonly static bool IsEnableExitRICModeWhenLinkLostDefaultValue = false;

    private bool isEnableExitRICModeWhenLinkLost_;
    /// <summary>
    ///开启实时控制模式数据链中断返航
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEnableExitRICModeWhenLinkLost {
      get { if ((_hasBits0 & 16) != 0) { return isEnableExitRICModeWhenLinkLost_; } else { return IsEnableExitRICModeWhenLinkLostDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isEnableExitRICModeWhenLinkLost_ = value;
      }
    }
    /// <summary>Gets whether the "IsEnableExitRICModeWhenLinkLost" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEnableExitRICModeWhenLinkLost {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "IsEnableExitRICModeWhenLinkLost" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEnableExitRICModeWhenLinkLost() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "IsDisableEmergencyAutoLand" field.</summary>
    public const int IsDisableEmergencyAutoLandFieldNumber = 7;
    private readonly static bool IsDisableEmergencyAutoLandDefaultValue = false;

    private bool isDisableEmergencyAutoLand_;
    /// <summary>
    ///是禁用紧急降落
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsDisableEmergencyAutoLand {
      get { if ((_hasBits0 & 32) != 0) { return isDisableEmergencyAutoLand_; } else { return IsDisableEmergencyAutoLandDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isDisableEmergencyAutoLand_ = value;
      }
    }
    /// <summary>Gets whether the "IsDisableEmergencyAutoLand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsDisableEmergencyAutoLand {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "IsDisableEmergencyAutoLand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsDisableEmergencyAutoLand() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "IsAutoVertPortMode" field.</summary>
    public const int IsAutoVertPortModeFieldNumber = 8;
    private readonly static bool IsAutoVertPortModeDefaultValue = false;

    private bool isAutoVertPortMode_;
    /// <summary>
    /// 开启自动机巢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoVertPortMode {
      get { if ((_hasBits0 & 64) != 0) { return isAutoVertPortMode_; } else { return IsAutoVertPortModeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isAutoVertPortMode_ = value;
      }
    }
    /// <summary>Gets whether the "IsAutoVertPortMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoVertPortMode {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "IsAutoVertPortMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoVertPortMode() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "IsAutoSelfDriveAirspeed" field.</summary>
    public const int IsAutoSelfDriveAirspeedFieldNumber = 9;
    private readonly static bool IsAutoSelfDriveAirspeedDefaultValue = false;

    private bool isAutoSelfDriveAirspeed_;
    /// <summary>
    ///开启自动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoSelfDriveAirspeed {
      get { if ((_hasBits0 & 128) != 0) { return isAutoSelfDriveAirspeed_; } else { return IsAutoSelfDriveAirspeedDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isAutoSelfDriveAirspeed_ = value;
      }
    }
    /// <summary>Gets whether the "IsAutoSelfDriveAirspeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoSelfDriveAirspeed {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "IsAutoSelfDriveAirspeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoSelfDriveAirspeed() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "IsForceExpandRotorsOnGround" field.</summary>
    public const int IsForceExpandRotorsOnGroundFieldNumber = 10;
    private readonly static bool IsForceExpandRotorsOnGroundDefaultValue = false;

    private bool isForceExpandRotorsOnGround_;
    /// <summary>
    ///展开旋翼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsForceExpandRotorsOnGround {
      get { if ((_hasBits0 & 256) != 0) { return isForceExpandRotorsOnGround_; } else { return IsForceExpandRotorsOnGroundDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isForceExpandRotorsOnGround_ = value;
      }
    }
    /// <summary>Gets whether the "IsForceExpandRotorsOnGround" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsForceExpandRotorsOnGround {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "IsForceExpandRotorsOnGround" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsForceExpandRotorsOnGround() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "Payload" field.</summary>
    public const int PayloadFieldNumber = 11;
    private global::Proto3FlightInfo.Proto_AircraftPayloadSetting payload_;
    /// <summary>
    ///云台载荷设置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Proto3FlightInfo.Proto_AircraftPayloadSetting Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_AircraftSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_AircraftSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AircraftName != other.AircraftName) return false;
      if (IsOpenEngine != other.IsOpenEngine) return false;
      if (IsLowAltitudeProtection != other.IsLowAltitudeProtection) return false;
      if (IsEnableBatteryEnergyLowAutoReturn != other.IsEnableBatteryEnergyLowAutoReturn) return false;
      if (IsEnableFlyPlanModeAutoReturnWhenLinkLost != other.IsEnableFlyPlanModeAutoReturnWhenLinkLost) return false;
      if (IsEnableExitRICModeWhenLinkLost != other.IsEnableExitRICModeWhenLinkLost) return false;
      if (IsDisableEmergencyAutoLand != other.IsDisableEmergencyAutoLand) return false;
      if (IsAutoVertPortMode != other.IsAutoVertPortMode) return false;
      if (IsAutoSelfDriveAirspeed != other.IsAutoSelfDriveAirspeed) return false;
      if (IsForceExpandRotorsOnGround != other.IsForceExpandRotorsOnGround) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AircraftName.Length != 0) hash ^= AircraftName.GetHashCode();
      if (HasIsOpenEngine) hash ^= IsOpenEngine.GetHashCode();
      if (HasIsLowAltitudeProtection) hash ^= IsLowAltitudeProtection.GetHashCode();
      if (HasIsEnableBatteryEnergyLowAutoReturn) hash ^= IsEnableBatteryEnergyLowAutoReturn.GetHashCode();
      if (HasIsEnableFlyPlanModeAutoReturnWhenLinkLost) hash ^= IsEnableFlyPlanModeAutoReturnWhenLinkLost.GetHashCode();
      if (HasIsEnableExitRICModeWhenLinkLost) hash ^= IsEnableExitRICModeWhenLinkLost.GetHashCode();
      if (HasIsDisableEmergencyAutoLand) hash ^= IsDisableEmergencyAutoLand.GetHashCode();
      if (HasIsAutoVertPortMode) hash ^= IsAutoVertPortMode.GetHashCode();
      if (HasIsAutoSelfDriveAirspeed) hash ^= IsAutoSelfDriveAirspeed.GetHashCode();
      if (HasIsForceExpandRotorsOnGround) hash ^= IsForceExpandRotorsOnGround.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AircraftName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AircraftName);
      }
      if (HasIsOpenEngine) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpenEngine);
      }
      if (HasIsLowAltitudeProtection) {
        output.WriteRawTag(24);
        output.WriteBool(IsLowAltitudeProtection);
      }
      if (HasIsEnableBatteryEnergyLowAutoReturn) {
        output.WriteRawTag(32);
        output.WriteBool(IsEnableBatteryEnergyLowAutoReturn);
      }
      if (HasIsEnableFlyPlanModeAutoReturnWhenLinkLost) {
        output.WriteRawTag(40);
        output.WriteBool(IsEnableFlyPlanModeAutoReturnWhenLinkLost);
      }
      if (HasIsEnableExitRICModeWhenLinkLost) {
        output.WriteRawTag(48);
        output.WriteBool(IsEnableExitRICModeWhenLinkLost);
      }
      if (HasIsDisableEmergencyAutoLand) {
        output.WriteRawTag(56);
        output.WriteBool(IsDisableEmergencyAutoLand);
      }
      if (HasIsAutoVertPortMode) {
        output.WriteRawTag(64);
        output.WriteBool(IsAutoVertPortMode);
      }
      if (HasIsAutoSelfDriveAirspeed) {
        output.WriteRawTag(72);
        output.WriteBool(IsAutoSelfDriveAirspeed);
      }
      if (HasIsForceExpandRotorsOnGround) {
        output.WriteRawTag(80);
        output.WriteBool(IsForceExpandRotorsOnGround);
      }
      if (payload_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AircraftName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AircraftName);
      }
      if (HasIsOpenEngine) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpenEngine);
      }
      if (HasIsLowAltitudeProtection) {
        output.WriteRawTag(24);
        output.WriteBool(IsLowAltitudeProtection);
      }
      if (HasIsEnableBatteryEnergyLowAutoReturn) {
        output.WriteRawTag(32);
        output.WriteBool(IsEnableBatteryEnergyLowAutoReturn);
      }
      if (HasIsEnableFlyPlanModeAutoReturnWhenLinkLost) {
        output.WriteRawTag(40);
        output.WriteBool(IsEnableFlyPlanModeAutoReturnWhenLinkLost);
      }
      if (HasIsEnableExitRICModeWhenLinkLost) {
        output.WriteRawTag(48);
        output.WriteBool(IsEnableExitRICModeWhenLinkLost);
      }
      if (HasIsDisableEmergencyAutoLand) {
        output.WriteRawTag(56);
        output.WriteBool(IsDisableEmergencyAutoLand);
      }
      if (HasIsAutoVertPortMode) {
        output.WriteRawTag(64);
        output.WriteBool(IsAutoVertPortMode);
      }
      if (HasIsAutoSelfDriveAirspeed) {
        output.WriteRawTag(72);
        output.WriteBool(IsAutoSelfDriveAirspeed);
      }
      if (HasIsForceExpandRotorsOnGround) {
        output.WriteRawTag(80);
        output.WriteBool(IsForceExpandRotorsOnGround);
      }
      if (payload_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AircraftName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AircraftName);
      }
      if (HasIsOpenEngine) {
        size += 1 + 1;
      }
      if (HasIsLowAltitudeProtection) {
        size += 1 + 1;
      }
      if (HasIsEnableBatteryEnergyLowAutoReturn) {
        size += 1 + 1;
      }
      if (HasIsEnableFlyPlanModeAutoReturnWhenLinkLost) {
        size += 1 + 1;
      }
      if (HasIsEnableExitRICModeWhenLinkLost) {
        size += 1 + 1;
      }
      if (HasIsDisableEmergencyAutoLand) {
        size += 1 + 1;
      }
      if (HasIsAutoVertPortMode) {
        size += 1 + 1;
      }
      if (HasIsAutoSelfDriveAirspeed) {
        size += 1 + 1;
      }
      if (HasIsForceExpandRotorsOnGround) {
        size += 1 + 1;
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_AircraftSetting other) {
      if (other == null) {
        return;
      }
      if (other.AircraftName.Length != 0) {
        AircraftName = other.AircraftName;
      }
      if (other.HasIsOpenEngine) {
        IsOpenEngine = other.IsOpenEngine;
      }
      if (other.HasIsLowAltitudeProtection) {
        IsLowAltitudeProtection = other.IsLowAltitudeProtection;
      }
      if (other.HasIsEnableBatteryEnergyLowAutoReturn) {
        IsEnableBatteryEnergyLowAutoReturn = other.IsEnableBatteryEnergyLowAutoReturn;
      }
      if (other.HasIsEnableFlyPlanModeAutoReturnWhenLinkLost) {
        IsEnableFlyPlanModeAutoReturnWhenLinkLost = other.IsEnableFlyPlanModeAutoReturnWhenLinkLost;
      }
      if (other.HasIsEnableExitRICModeWhenLinkLost) {
        IsEnableExitRICModeWhenLinkLost = other.IsEnableExitRICModeWhenLinkLost;
      }
      if (other.HasIsDisableEmergencyAutoLand) {
        IsDisableEmergencyAutoLand = other.IsDisableEmergencyAutoLand;
      }
      if (other.HasIsAutoVertPortMode) {
        IsAutoVertPortMode = other.IsAutoVertPortMode;
      }
      if (other.HasIsAutoSelfDriveAirspeed) {
        IsAutoSelfDriveAirspeed = other.IsAutoSelfDriveAirspeed;
      }
      if (other.HasIsForceExpandRotorsOnGround) {
        IsForceExpandRotorsOnGround = other.IsForceExpandRotorsOnGround;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          Payload = new global::Proto3FlightInfo.Proto_AircraftPayloadSetting();
        }
        Payload.MergeFrom(other.Payload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AircraftName = input.ReadString();
            break;
          }
          case 16: {
            IsOpenEngine = input.ReadBool();
            break;
          }
          case 24: {
            IsLowAltitudeProtection = input.ReadBool();
            break;
          }
          case 32: {
            IsEnableBatteryEnergyLowAutoReturn = input.ReadBool();
            break;
          }
          case 40: {
            IsEnableFlyPlanModeAutoReturnWhenLinkLost = input.ReadBool();
            break;
          }
          case 48: {
            IsEnableExitRICModeWhenLinkLost = input.ReadBool();
            break;
          }
          case 56: {
            IsDisableEmergencyAutoLand = input.ReadBool();
            break;
          }
          case 64: {
            IsAutoVertPortMode = input.ReadBool();
            break;
          }
          case 72: {
            IsAutoSelfDriveAirspeed = input.ReadBool();
            break;
          }
          case 80: {
            IsForceExpandRotorsOnGround = input.ReadBool();
            break;
          }
          case 90: {
            if (payload_ == null) {
              Payload = new global::Proto3FlightInfo.Proto_AircraftPayloadSetting();
            }
            input.ReadMessage(Payload);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AircraftName = input.ReadString();
            break;
          }
          case 16: {
            IsOpenEngine = input.ReadBool();
            break;
          }
          case 24: {
            IsLowAltitudeProtection = input.ReadBool();
            break;
          }
          case 32: {
            IsEnableBatteryEnergyLowAutoReturn = input.ReadBool();
            break;
          }
          case 40: {
            IsEnableFlyPlanModeAutoReturnWhenLinkLost = input.ReadBool();
            break;
          }
          case 48: {
            IsEnableExitRICModeWhenLinkLost = input.ReadBool();
            break;
          }
          case 56: {
            IsDisableEmergencyAutoLand = input.ReadBool();
            break;
          }
          case 64: {
            IsAutoVertPortMode = input.ReadBool();
            break;
          }
          case 72: {
            IsAutoSelfDriveAirspeed = input.ReadBool();
            break;
          }
          case 80: {
            IsForceExpandRotorsOnGround = input.ReadBool();
            break;
          }
          case 90: {
            if (payload_ == null) {
              Payload = new global::Proto3FlightInfo.Proto_AircraftPayloadSetting();
            }
            input.ReadMessage(Payload);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///飞机载荷设置
  /// </summary>
  public sealed partial class Proto_AircraftPayloadSetting : pb::IMessage<Proto_AircraftPayloadSetting>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_AircraftPayloadSetting> _parser = new pb::MessageParser<Proto_AircraftPayloadSetting>(() => new Proto_AircraftPayloadSetting());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_AircraftPayloadSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftPayloadSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftPayloadSetting(Proto_AircraftPayloadSetting other) : this() {
      _hasBits0 = other._hasBits0;
      isStopRecordOnLand_ = other.isStopRecordOnLand_;
      isBeginRecordOnTakeOff_ = other.isBeginRecordOnTakeOff_;
      isGimbalCameraSDCardDestroyPowerOn_ = other.isGimbalCameraSDCardDestroyPowerOn_;
      isCameraRecordingVideo_ = other.isCameraRecordingVideo_;
      isOSDEnabled_ = other.isOSDEnabled_;
      isRangerEnabled_ = other.isRangerEnabled_;
      isYawFollowEnabled_ = other.isYawFollowEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftPayloadSetting Clone() {
      return new Proto_AircraftPayloadSetting(this);
    }

    /// <summary>Field number for the "IsStopRecordOnLand" field.</summary>
    public const int IsStopRecordOnLandFieldNumber = 1;
    private readonly static bool IsStopRecordOnLandDefaultValue = false;

    private bool isStopRecordOnLand_;
    /// <summary>
    ///云台降落停录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsStopRecordOnLand {
      get { if ((_hasBits0 & 1) != 0) { return isStopRecordOnLand_; } else { return IsStopRecordOnLandDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isStopRecordOnLand_ = value;
      }
    }
    /// <summary>Gets whether the "IsStopRecordOnLand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsStopRecordOnLand {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "IsStopRecordOnLand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsStopRecordOnLand() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "IsBeginRecordOnTakeOff" field.</summary>
    public const int IsBeginRecordOnTakeOffFieldNumber = 2;
    private readonly static bool IsBeginRecordOnTakeOffDefaultValue = false;

    private bool isBeginRecordOnTakeOff_;
    /// <summary>
    ///云台起飞录像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBeginRecordOnTakeOff {
      get { if ((_hasBits0 & 2) != 0) { return isBeginRecordOnTakeOff_; } else { return IsBeginRecordOnTakeOffDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isBeginRecordOnTakeOff_ = value;
      }
    }
    /// <summary>Gets whether the "IsBeginRecordOnTakeOff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsBeginRecordOnTakeOff {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsBeginRecordOnTakeOff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsBeginRecordOnTakeOff() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "IsGimbalCameraSDCardDestroyPowerOn" field.</summary>
    public const int IsGimbalCameraSDCardDestroyPowerOnFieldNumber = 3;
    private readonly static bool IsGimbalCameraSDCardDestroyPowerOnDefaultValue = false;

    private bool isGimbalCameraSDCardDestroyPowerOn_;
    /// <summary>
    /// 云台销毁SD卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGimbalCameraSDCardDestroyPowerOn {
      get { if ((_hasBits0 & 4) != 0) { return isGimbalCameraSDCardDestroyPowerOn_; } else { return IsGimbalCameraSDCardDestroyPowerOnDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isGimbalCameraSDCardDestroyPowerOn_ = value;
      }
    }
    /// <summary>Gets whether the "IsGimbalCameraSDCardDestroyPowerOn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsGimbalCameraSDCardDestroyPowerOn {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "IsGimbalCameraSDCardDestroyPowerOn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsGimbalCameraSDCardDestroyPowerOn() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "IsCameraRecordingVideo" field.</summary>
    public const int IsCameraRecordingVideoFieldNumber = 4;
    private readonly static bool IsCameraRecordingVideoDefaultValue = false;

    private bool isCameraRecordingVideo_;
    /// <summary>
    ///云台开起录像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCameraRecordingVideo {
      get { if ((_hasBits0 & 8) != 0) { return isCameraRecordingVideo_; } else { return IsCameraRecordingVideoDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isCameraRecordingVideo_ = value;
      }
    }
    /// <summary>Gets whether the "IsCameraRecordingVideo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsCameraRecordingVideo {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "IsCameraRecordingVideo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsCameraRecordingVideo() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "IsOSDEnabled" field.</summary>
    public const int IsOSDEnabledFieldNumber = 5;
    private readonly static bool IsOSDEnabledDefaultValue = false;

    private bool isOSDEnabled_;
    /// <summary>
    ///云台显示OSD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOSDEnabled {
      get { if ((_hasBits0 & 16) != 0) { return isOSDEnabled_; } else { return IsOSDEnabledDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isOSDEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "IsOSDEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOSDEnabled {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "IsOSDEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOSDEnabled() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "IsRangerEnabled" field.</summary>
    public const int IsRangerEnabledFieldNumber = 6;
    private readonly static bool IsRangerEnabledDefaultValue = false;

    private bool isRangerEnabled_;
    /// <summary>
    ///云台开启激光测距
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRangerEnabled {
      get { if ((_hasBits0 & 32) != 0) { return isRangerEnabled_; } else { return IsRangerEnabledDefaultValue; } }
      set {
        _hasBits0 |= 32;
        isRangerEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "IsRangerEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRangerEnabled {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "IsRangerEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRangerEnabled() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "IsYawFollowEnabled" field.</summary>
    public const int IsYawFollowEnabledFieldNumber = 7;
    private readonly static bool IsYawFollowEnabledDefaultValue = false;

    private bool isYawFollowEnabled_;
    /// <summary>
    ///云台开启目标跟踪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsYawFollowEnabled {
      get { if ((_hasBits0 & 64) != 0) { return isYawFollowEnabled_; } else { return IsYawFollowEnabledDefaultValue; } }
      set {
        _hasBits0 |= 64;
        isYawFollowEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "IsYawFollowEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsYawFollowEnabled {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "IsYawFollowEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsYawFollowEnabled() {
      _hasBits0 &= ~64;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_AircraftPayloadSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_AircraftPayloadSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsStopRecordOnLand != other.IsStopRecordOnLand) return false;
      if (IsBeginRecordOnTakeOff != other.IsBeginRecordOnTakeOff) return false;
      if (IsGimbalCameraSDCardDestroyPowerOn != other.IsGimbalCameraSDCardDestroyPowerOn) return false;
      if (IsCameraRecordingVideo != other.IsCameraRecordingVideo) return false;
      if (IsOSDEnabled != other.IsOSDEnabled) return false;
      if (IsRangerEnabled != other.IsRangerEnabled) return false;
      if (IsYawFollowEnabled != other.IsYawFollowEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsStopRecordOnLand) hash ^= IsStopRecordOnLand.GetHashCode();
      if (HasIsBeginRecordOnTakeOff) hash ^= IsBeginRecordOnTakeOff.GetHashCode();
      if (HasIsGimbalCameraSDCardDestroyPowerOn) hash ^= IsGimbalCameraSDCardDestroyPowerOn.GetHashCode();
      if (HasIsCameraRecordingVideo) hash ^= IsCameraRecordingVideo.GetHashCode();
      if (HasIsOSDEnabled) hash ^= IsOSDEnabled.GetHashCode();
      if (HasIsRangerEnabled) hash ^= IsRangerEnabled.GetHashCode();
      if (HasIsYawFollowEnabled) hash ^= IsYawFollowEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsStopRecordOnLand) {
        output.WriteRawTag(8);
        output.WriteBool(IsStopRecordOnLand);
      }
      if (HasIsBeginRecordOnTakeOff) {
        output.WriteRawTag(16);
        output.WriteBool(IsBeginRecordOnTakeOff);
      }
      if (HasIsGimbalCameraSDCardDestroyPowerOn) {
        output.WriteRawTag(24);
        output.WriteBool(IsGimbalCameraSDCardDestroyPowerOn);
      }
      if (HasIsCameraRecordingVideo) {
        output.WriteRawTag(32);
        output.WriteBool(IsCameraRecordingVideo);
      }
      if (HasIsOSDEnabled) {
        output.WriteRawTag(40);
        output.WriteBool(IsOSDEnabled);
      }
      if (HasIsRangerEnabled) {
        output.WriteRawTag(48);
        output.WriteBool(IsRangerEnabled);
      }
      if (HasIsYawFollowEnabled) {
        output.WriteRawTag(56);
        output.WriteBool(IsYawFollowEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsStopRecordOnLand) {
        output.WriteRawTag(8);
        output.WriteBool(IsStopRecordOnLand);
      }
      if (HasIsBeginRecordOnTakeOff) {
        output.WriteRawTag(16);
        output.WriteBool(IsBeginRecordOnTakeOff);
      }
      if (HasIsGimbalCameraSDCardDestroyPowerOn) {
        output.WriteRawTag(24);
        output.WriteBool(IsGimbalCameraSDCardDestroyPowerOn);
      }
      if (HasIsCameraRecordingVideo) {
        output.WriteRawTag(32);
        output.WriteBool(IsCameraRecordingVideo);
      }
      if (HasIsOSDEnabled) {
        output.WriteRawTag(40);
        output.WriteBool(IsOSDEnabled);
      }
      if (HasIsRangerEnabled) {
        output.WriteRawTag(48);
        output.WriteBool(IsRangerEnabled);
      }
      if (HasIsYawFollowEnabled) {
        output.WriteRawTag(56);
        output.WriteBool(IsYawFollowEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsStopRecordOnLand) {
        size += 1 + 1;
      }
      if (HasIsBeginRecordOnTakeOff) {
        size += 1 + 1;
      }
      if (HasIsGimbalCameraSDCardDestroyPowerOn) {
        size += 1 + 1;
      }
      if (HasIsCameraRecordingVideo) {
        size += 1 + 1;
      }
      if (HasIsOSDEnabled) {
        size += 1 + 1;
      }
      if (HasIsRangerEnabled) {
        size += 1 + 1;
      }
      if (HasIsYawFollowEnabled) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_AircraftPayloadSetting other) {
      if (other == null) {
        return;
      }
      if (other.HasIsStopRecordOnLand) {
        IsStopRecordOnLand = other.IsStopRecordOnLand;
      }
      if (other.HasIsBeginRecordOnTakeOff) {
        IsBeginRecordOnTakeOff = other.IsBeginRecordOnTakeOff;
      }
      if (other.HasIsGimbalCameraSDCardDestroyPowerOn) {
        IsGimbalCameraSDCardDestroyPowerOn = other.IsGimbalCameraSDCardDestroyPowerOn;
      }
      if (other.HasIsCameraRecordingVideo) {
        IsCameraRecordingVideo = other.IsCameraRecordingVideo;
      }
      if (other.HasIsOSDEnabled) {
        IsOSDEnabled = other.IsOSDEnabled;
      }
      if (other.HasIsRangerEnabled) {
        IsRangerEnabled = other.IsRangerEnabled;
      }
      if (other.HasIsYawFollowEnabled) {
        IsYawFollowEnabled = other.IsYawFollowEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsStopRecordOnLand = input.ReadBool();
            break;
          }
          case 16: {
            IsBeginRecordOnTakeOff = input.ReadBool();
            break;
          }
          case 24: {
            IsGimbalCameraSDCardDestroyPowerOn = input.ReadBool();
            break;
          }
          case 32: {
            IsCameraRecordingVideo = input.ReadBool();
            break;
          }
          case 40: {
            IsOSDEnabled = input.ReadBool();
            break;
          }
          case 48: {
            IsRangerEnabled = input.ReadBool();
            break;
          }
          case 56: {
            IsYawFollowEnabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsStopRecordOnLand = input.ReadBool();
            break;
          }
          case 16: {
            IsBeginRecordOnTakeOff = input.ReadBool();
            break;
          }
          case 24: {
            IsGimbalCameraSDCardDestroyPowerOn = input.ReadBool();
            break;
          }
          case 32: {
            IsCameraRecordingVideo = input.ReadBool();
            break;
          }
          case 40: {
            IsOSDEnabled = input.ReadBool();
            break;
          }
          case 48: {
            IsRangerEnabled = input.ReadBool();
            break;
          }
          case 56: {
            IsYawFollowEnabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Gnss状态
  /// </summary>
  public sealed partial class Proto_GnssInfo : pb::IMessage<Proto_GnssInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_GnssInfo> _parser = new pb::MessageParser<Proto_GnssInfo>(() => new Proto_GnssInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_GnssInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_GnssInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_GnssInfo(Proto_GnssInfo other) : this() {
      _hasBits0 = other._hasBits0;
      positioningStatus_ = other.positioningStatus_;
      rTKState_ = other.rTKState_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      sateNum_ = other.sateNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_GnssInfo Clone() {
      return new Proto_GnssInfo(this);
    }

    /// <summary>Field number for the "PositioningStatus" field.</summary>
    public const int PositioningStatusFieldNumber = 1;
    private readonly static global::MetaData.Proto_GNSSLocationStatus PositioningStatusDefaultValue = global::MetaData.Proto_GNSSLocationStatus.Gnss3D;

    private global::MetaData.Proto_GNSSLocationStatus positioningStatus_;
    /// <summary>
    /// 定位状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_GNSSLocationStatus PositioningStatus {
      get { if ((_hasBits0 & 1) != 0) { return positioningStatus_; } else { return PositioningStatusDefaultValue; } }
      set {
        _hasBits0 |= 1;
        positioningStatus_ = value;
      }
    }
    /// <summary>Gets whether the "PositioningStatus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPositioningStatus {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "PositioningStatus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPositioningStatus() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "RTKState" field.</summary>
    public const int RTKStateFieldNumber = 2;
    private readonly static global::MetaData.Proto_RTKSolutionState RTKStateDefaultValue = global::MetaData.Proto_RTKSolutionState.RtkFixedSolution;

    private global::MetaData.Proto_RTKSolutionState rTKState_;
    /// <summary>
    /// RTK状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_RTKSolutionState RTKState {
      get { if ((_hasBits0 & 2) != 0) { return rTKState_; } else { return RTKStateDefaultValue; } }
      set {
        _hasBits0 |= 2;
        rTKState_ = value;
      }
    }
    /// <summary>Gets whether the "RTKState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRTKState {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "RTKState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRTKState() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::MetaData.Proto_LLA position_;
    /// <summary>
    /// 当前位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_LLA Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "SateNum" field.</summary>
    public const int SateNumFieldNumber = 4;
    private readonly static int SateNumDefaultValue = 0;

    private int sateNum_;
    /// <summary>
    /// 卫星数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SateNum {
      get { if ((_hasBits0 & 4) != 0) { return sateNum_; } else { return SateNumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sateNum_ = value;
      }
    }
    /// <summary>Gets whether the "SateNum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSateNum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "SateNum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSateNum() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_GnssInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_GnssInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PositioningStatus != other.PositioningStatus) return false;
      if (RTKState != other.RTKState) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (SateNum != other.SateNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPositioningStatus) hash ^= PositioningStatus.GetHashCode();
      if (HasRTKState) hash ^= RTKState.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (HasSateNum) hash ^= SateNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPositioningStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PositioningStatus);
      }
      if (HasRTKState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RTKState);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (HasSateNum) {
        output.WriteRawTag(32);
        output.WriteInt32(SateNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPositioningStatus) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PositioningStatus);
      }
      if (HasRTKState) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RTKState);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (HasSateNum) {
        output.WriteRawTag(32);
        output.WriteInt32(SateNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPositioningStatus) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PositioningStatus);
      }
      if (HasRTKState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RTKState);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (HasSateNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SateNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_GnssInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasPositioningStatus) {
        PositioningStatus = other.PositioningStatus;
      }
      if (other.HasRTKState) {
        RTKState = other.RTKState;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::MetaData.Proto_LLA();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.HasSateNum) {
        SateNum = other.SateNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PositioningStatus = (global::MetaData.Proto_GNSSLocationStatus) input.ReadEnum();
            break;
          }
          case 16: {
            RTKState = (global::MetaData.Proto_RTKSolutionState) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::MetaData.Proto_LLA();
            }
            input.ReadMessage(Position);
            break;
          }
          case 32: {
            SateNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PositioningStatus = (global::MetaData.Proto_GNSSLocationStatus) input.ReadEnum();
            break;
          }
          case 16: {
            RTKState = (global::MetaData.Proto_RTKSolutionState) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::MetaData.Proto_LLA();
            }
            input.ReadMessage(Position);
            break;
          }
          case 32: {
            SateNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Proto_AircraftMessage : pb::IMessage<Proto_AircraftMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_AircraftMessage> _parser = new pb::MessageParser<Proto_AircraftMessage>(() => new Proto_AircraftMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_AircraftMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftMessage(Proto_AircraftMessage other) : this() {
      level_ = other.level_;
      message_ = other.message_;
      timeStamp_ = other.timeStamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftMessage Clone() {
      return new Proto_AircraftMessage(this);
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 1;
    private global::MetaData.Proto_MessageLevel level_ = global::MetaData.Proto_MessageLevel.Info;
    /// <summary>
    /// 消息等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_MessageLevel Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// 消息内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 3;
    private long timeStamp_;
    /// <summary>
    /// 时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_AircraftMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_AircraftMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Message != other.Message) return false;
      if (TimeStamp != other.TimeStamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != global::MetaData.Proto_MessageLevel.Info) hash ^= Level.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Level != global::MetaData.Proto_MessageLevel.Info) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Level);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeStamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Level != global::MetaData.Proto_MessageLevel.Info) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Level);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimeStamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Level != global::MetaData.Proto_MessageLevel.Info) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_AircraftMessage other) {
      if (other == null) {
        return;
      }
      if (other.Level != global::MetaData.Proto_MessageLevel.Info) {
        Level = other.Level;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = (global::MetaData.Proto_MessageLevel) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            TimeStamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Level = (global::MetaData.Proto_MessageLevel) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            TimeStamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 来自地面控制中心的消息判断
  /// </summary>
  public sealed partial class AircraftControlCenterMessages : pb::IMessage<AircraftControlCenterMessages>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AircraftControlCenterMessages> _parser = new pb::MessageParser<AircraftControlCenterMessages>(() => new AircraftControlCenterMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AircraftControlCenterMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AircraftControlCenterMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AircraftControlCenterMessages(AircraftControlCenterMessages other) : this() {
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AircraftControlCenterMessages Clone() {
      return new AircraftControlCenterMessages(this);
    }

    /// <summary>Field number for the "Messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_messages_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> messages_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 飞机消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AircraftControlCenterMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AircraftControlCenterMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      messages_.WriteTo(ref output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AircraftControlCenterMessages other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            messages_.AddEntriesFrom(ref input, _repeated_messages_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Proto_AircraftMessages : pb::IMessage<Proto_AircraftMessages>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_AircraftMessages> _parser = new pb::MessageParser<Proto_AircraftMessages>(() => new Proto_AircraftMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_AircraftMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftMessages(Proto_AircraftMessages other) : this() {
      messages_ = other.messages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AircraftMessages Clone() {
      return new Proto_AircraftMessages(this);
    }

    /// <summary>Field number for the "Messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto3FlightInfo.Proto_AircraftMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::Proto3FlightInfo.Proto_AircraftMessage.Parser);
    private readonly pbc::RepeatedField<global::Proto3FlightInfo.Proto_AircraftMessage> messages_ = new pbc::RepeatedField<global::Proto3FlightInfo.Proto_AircraftMessage>();
    /// <summary>
    /// 飞机消息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Proto3FlightInfo.Proto_AircraftMessage> Messages {
      get { return messages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_AircraftMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_AircraftMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      messages_.WriteTo(output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      messages_.WriteTo(ref output, _repeated_messages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_AircraftMessages other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            messages_.AddEntriesFrom(ref input, _repeated_messages_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Porto_BoolDouble : pb::IMessage<Porto_BoolDouble>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Porto_BoolDouble> _parser = new pb::MessageParser<Porto_BoolDouble>(() => new Porto_BoolDouble());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Porto_BoolDouble> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Porto_BoolDouble() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Porto_BoolDouble(Porto_BoolDouble other) : this() {
      boolValue_ = other.boolValue_;
      doubleValue_ = other.doubleValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Porto_BoolDouble Clone() {
      return new Porto_BoolDouble(this);
    }

    /// <summary>Field number for the "BoolValue" field.</summary>
    public const int BoolValueFieldNumber = 1;
    private bool boolValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BoolValue {
      get { return boolValue_; }
      set {
        boolValue_ = value;
      }
    }

    /// <summary>Field number for the "DoubleValue" field.</summary>
    public const int DoubleValueFieldNumber = 2;
    private double doubleValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DoubleValue {
      get { return doubleValue_; }
      set {
        doubleValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Porto_BoolDouble);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Porto_BoolDouble other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoolValue != other.BoolValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BoolValue != false) hash ^= BoolValue.GetHashCode();
      if (DoubleValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BoolValue != false) {
        output.WriteRawTag(8);
        output.WriteBool(BoolValue);
      }
      if (DoubleValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DoubleValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BoolValue != false) {
        output.WriteRawTag(8);
        output.WriteBool(BoolValue);
      }
      if (DoubleValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DoubleValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BoolValue != false) {
        size += 1 + 1;
      }
      if (DoubleValue != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Porto_BoolDouble other) {
      if (other == null) {
        return;
      }
      if (other.BoolValue != false) {
        BoolValue = other.BoolValue;
      }
      if (other.DoubleValue != 0D) {
        DoubleValue = other.DoubleValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BoolValue = input.ReadBool();
            break;
          }
          case 17: {
            DoubleValue = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BoolValue = input.ReadBool();
            break;
          }
          case 17: {
            DoubleValue = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 姿态仪
  /// </summary>
  public sealed partial class Proto_AttitudeIndicator : pb::IMessage<Proto_AttitudeIndicator>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_AttitudeIndicator> _parser = new pb::MessageParser<Proto_AttitudeIndicator>(() => new Proto_AttitudeIndicator());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_AttitudeIndicator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AttitudeIndicator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AttitudeIndicator(Proto_AttitudeIndicator other) : this() {
      _hasBits0 = other._hasBits0;
      planeLLA_ = other.planeLLA_ != null ? other.planeLLA_.Clone() : null;
      planeOrientation_ = other.planeOrientation_ != null ? other.planeOrientation_.Clone() : null;
      planeBodyFrameSpeed_ = other.planeBodyFrameSpeed_ != null ? other.planeBodyFrameSpeed_.Clone() : null;
      planeENUSpeed_ = other.planeENUSpeed_ != null ? other.planeENUSpeed_.Clone() : null;
      calibratedAirspeed_ = other.calibratedAirspeed_;
      batteryRemainEnergyRatio_ = other.batteryRemainEnergyRatio_;
      planeAGL_ = other.planeAGL_ != null ? other.planeAGL_.Clone() : null;
      planeRelativeHeight_ = other.planeRelativeHeight_;
      planePitchErrorLowSpdPSP_ = other.planePitchErrorLowSpdPSP_;
      planePitchErrorHighSpdPSP_ = other.planePitchErrorHighSpdPSP_;
      bodyFrameZAccel_ = other.bodyFrameZAccel_;
      cruiseThrottleRatio_ = other.cruiseThrottleRatio_;
      rotorThrustRatio_ = other.rotorThrustRatio_;
      aoA_ = other.aoA_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_AttitudeIndicator Clone() {
      return new Proto_AttitudeIndicator(this);
    }

    /// <summary>Field number for the "PlaneLLA" field.</summary>
    public const int PlaneLLAFieldNumber = 1;
    private global::MetaData.Proto_LLA planeLLA_;
    /// <summary>
    /// 当前位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_LLA PlaneLLA {
      get { return planeLLA_; }
      set {
        planeLLA_ = value;
      }
    }

    /// <summary>Field number for the "PlaneOrientation" field.</summary>
    public const int PlaneOrientationFieldNumber = 2;
    private global::MetaData.Proto_Matrix3F planeOrientation_;
    /// <summary>
    /// 当前姿态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_Matrix3F PlaneOrientation {
      get { return planeOrientation_; }
      set {
        planeOrientation_ = value;
      }
    }

    /// <summary>Field number for the "PlaneBodyFrameSpeed" field.</summary>
    public const int PlaneBodyFrameSpeedFieldNumber = 3;
    private global::MetaData.Proto_Vector3F planeBodyFrameSpeed_;
    /// <summary>
    /// 飞机在体轴坐标系中的速度。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_Vector3F PlaneBodyFrameSpeed {
      get { return planeBodyFrameSpeed_; }
      set {
        planeBodyFrameSpeed_ = value;
      }
    }

    /// <summary>Field number for the "PlaneENUSpeed" field.</summary>
    public const int PlaneENUSpeedFieldNumber = 4;
    private global::MetaData.Proto_Vector3F planeENUSpeed_;
    /// <summary>
    /// 飞机在全局坐标系（ENU）中的速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_Vector3F PlaneENUSpeed {
      get { return planeENUSpeed_; }
      set {
        planeENUSpeed_ = value;
      }
    }

    /// <summary>Field number for the "CalibratedAirspeed" field.</summary>
    public const int CalibratedAirspeedFieldNumber = 5;
    private readonly static float CalibratedAirspeedDefaultValue = 0F;

    private float calibratedAirspeed_;
    /// <summary>
    /// 校准空速，指示飞机收到的动压。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CalibratedAirspeed {
      get { if ((_hasBits0 & 1) != 0) { return calibratedAirspeed_; } else { return CalibratedAirspeedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        calibratedAirspeed_ = value;
      }
    }
    /// <summary>Gets whether the "CalibratedAirspeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCalibratedAirspeed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "CalibratedAirspeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCalibratedAirspeed() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "BatteryRemainEnergyRatio" field.</summary>
    public const int BatteryRemainEnergyRatioFieldNumber = 6;
    private readonly static float BatteryRemainEnergyRatioDefaultValue = 0F;

    private float batteryRemainEnergyRatio_;
    /// <summary>
    /// 电池剩余电量比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BatteryRemainEnergyRatio {
      get { if ((_hasBits0 & 2) != 0) { return batteryRemainEnergyRatio_; } else { return BatteryRemainEnergyRatioDefaultValue; } }
      set {
        _hasBits0 |= 2;
        batteryRemainEnergyRatio_ = value;
      }
    }
    /// <summary>Gets whether the "BatteryRemainEnergyRatio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBatteryRemainEnergyRatio {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "BatteryRemainEnergyRatio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBatteryRemainEnergyRatio() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "PlaneAGL" field.</summary>
    public const int PlaneAGLFieldNumber = 7;
    private global::Proto3FlightInfo.Porto_BoolDouble planeAGL_;
    /// <summary>
    /// 飞机高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Proto3FlightInfo.Porto_BoolDouble PlaneAGL {
      get { return planeAGL_; }
      set {
        planeAGL_ = value;
      }
    }

    /// <summary>Field number for the "PlaneRelativeHeight" field.</summary>
    public const int PlaneRelativeHeightFieldNumber = 8;
    private readonly static double PlaneRelativeHeightDefaultValue = 0D;

    private double planeRelativeHeight_;
    /// <summary>
    /// 飞机相对高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PlaneRelativeHeight {
      get { if ((_hasBits0 & 4) != 0) { return planeRelativeHeight_; } else { return PlaneRelativeHeightDefaultValue; } }
      set {
        _hasBits0 |= 4;
        planeRelativeHeight_ = value;
      }
    }
    /// <summary>Gets whether the "PlaneRelativeHeight" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlaneRelativeHeight {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "PlaneRelativeHeight" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlaneRelativeHeight() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "PlanePitchErrorLowSpdPSP" field.</summary>
    public const int PlanePitchErrorLowSpdPSPFieldNumber = 9;
    private readonly static double PlanePitchErrorLowSpdPSPDefaultValue = 0D;

    private double planePitchErrorLowSpdPSP_;
    /// <summary>
    ///  低速机动时的俯仰角误差
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PlanePitchErrorLowSpdPSP {
      get { if ((_hasBits0 & 8) != 0) { return planePitchErrorLowSpdPSP_; } else { return PlanePitchErrorLowSpdPSPDefaultValue; } }
      set {
        _hasBits0 |= 8;
        planePitchErrorLowSpdPSP_ = value;
      }
    }
    /// <summary>Gets whether the "PlanePitchErrorLowSpdPSP" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlanePitchErrorLowSpdPSP {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "PlanePitchErrorLowSpdPSP" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlanePitchErrorLowSpdPSP() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "PlanePitchErrorHighSpdPSP" field.</summary>
    public const int PlanePitchErrorHighSpdPSPFieldNumber = 10;
    private readonly static double PlanePitchErrorHighSpdPSPDefaultValue = 0D;

    private double planePitchErrorHighSpdPSP_;
    /// <summary>
    /// 高速机动时的俯仰角误差
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PlanePitchErrorHighSpdPSP {
      get { if ((_hasBits0 & 16) != 0) { return planePitchErrorHighSpdPSP_; } else { return PlanePitchErrorHighSpdPSPDefaultValue; } }
      set {
        _hasBits0 |= 16;
        planePitchErrorHighSpdPSP_ = value;
      }
    }
    /// <summary>Gets whether the "PlanePitchErrorHighSpdPSP" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlanePitchErrorHighSpdPSP {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "PlanePitchErrorHighSpdPSP" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlanePitchErrorHighSpdPSP() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "BodyFrameZAccel" field.</summary>
    public const int BodyFrameZAccelFieldNumber = 11;
    private readonly static double BodyFrameZAccelDefaultValue = 0D;

    private double bodyFrameZAccel_;
    /// <summary>
    /// 飞机在体轴坐标系中的Z轴加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BodyFrameZAccel {
      get { if ((_hasBits0 & 32) != 0) { return bodyFrameZAccel_; } else { return BodyFrameZAccelDefaultValue; } }
      set {
        _hasBits0 |= 32;
        bodyFrameZAccel_ = value;
      }
    }
    /// <summary>Gets whether the "BodyFrameZAccel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBodyFrameZAccel {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "BodyFrameZAccel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBodyFrameZAccel() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "CruiseThrottleRatio" field.</summary>
    public const int CruiseThrottleRatioFieldNumber = 12;
    private readonly static double CruiseThrottleRatioDefaultValue = 0D;

    private double cruiseThrottleRatio_;
    /// <summary>
    /// 巡航油门比例，范围[0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CruiseThrottleRatio {
      get { if ((_hasBits0 & 64) != 0) { return cruiseThrottleRatio_; } else { return CruiseThrottleRatioDefaultValue; } }
      set {
        _hasBits0 |= 64;
        cruiseThrottleRatio_ = value;
      }
    }
    /// <summary>Gets whether the "CruiseThrottleRatio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCruiseThrottleRatio {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "CruiseThrottleRatio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCruiseThrottleRatio() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "RotorThrustRatio" field.</summary>
    public const int RotorThrustRatioFieldNumber = 13;
    private readonly static double RotorThrustRatioDefaultValue = 0D;

    private double rotorThrustRatio_;
    /// <summary>
    /// 旋翼推力比例，范围[0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RotorThrustRatio {
      get { if ((_hasBits0 & 128) != 0) { return rotorThrustRatio_; } else { return RotorThrustRatioDefaultValue; } }
      set {
        _hasBits0 |= 128;
        rotorThrustRatio_ = value;
      }
    }
    /// <summary>Gets whether the "RotorThrustRatio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRotorThrustRatio {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "RotorThrustRatio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRotorThrustRatio() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "AoA" field.</summary>
    public const int AoAFieldNumber = 14;
    private readonly static double AoADefaultValue = 0D;

    private double aoA_;
    /// <summary>
    /// 迎角，单位：Rad
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AoA {
      get { if ((_hasBits0 & 256) != 0) { return aoA_; } else { return AoADefaultValue; } }
      set {
        _hasBits0 |= 256;
        aoA_ = value;
      }
    }
    /// <summary>Gets whether the "AoA" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAoA {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "AoA" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAoA() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_AttitudeIndicator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_AttitudeIndicator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlaneLLA, other.PlaneLLA)) return false;
      if (!object.Equals(PlaneOrientation, other.PlaneOrientation)) return false;
      if (!object.Equals(PlaneBodyFrameSpeed, other.PlaneBodyFrameSpeed)) return false;
      if (!object.Equals(PlaneENUSpeed, other.PlaneENUSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CalibratedAirspeed, other.CalibratedAirspeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryRemainEnergyRatio, other.BatteryRemainEnergyRatio)) return false;
      if (!object.Equals(PlaneAGL, other.PlaneAGL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlaneRelativeHeight, other.PlaneRelativeHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlanePitchErrorLowSpdPSP, other.PlanePitchErrorLowSpdPSP)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlanePitchErrorHighSpdPSP, other.PlanePitchErrorHighSpdPSP)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BodyFrameZAccel, other.BodyFrameZAccel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CruiseThrottleRatio, other.CruiseThrottleRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RotorThrustRatio, other.RotorThrustRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AoA, other.AoA)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (planeLLA_ != null) hash ^= PlaneLLA.GetHashCode();
      if (planeOrientation_ != null) hash ^= PlaneOrientation.GetHashCode();
      if (planeBodyFrameSpeed_ != null) hash ^= PlaneBodyFrameSpeed.GetHashCode();
      if (planeENUSpeed_ != null) hash ^= PlaneENUSpeed.GetHashCode();
      if (HasCalibratedAirspeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CalibratedAirspeed);
      if (HasBatteryRemainEnergyRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryRemainEnergyRatio);
      if (planeAGL_ != null) hash ^= PlaneAGL.GetHashCode();
      if (HasPlaneRelativeHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlaneRelativeHeight);
      if (HasPlanePitchErrorLowSpdPSP) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlanePitchErrorLowSpdPSP);
      if (HasPlanePitchErrorHighSpdPSP) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlanePitchErrorHighSpdPSP);
      if (HasBodyFrameZAccel) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BodyFrameZAccel);
      if (HasCruiseThrottleRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CruiseThrottleRatio);
      if (HasRotorThrustRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RotorThrustRatio);
      if (HasAoA) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AoA);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (planeLLA_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlaneLLA);
      }
      if (planeOrientation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlaneOrientation);
      }
      if (planeBodyFrameSpeed_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlaneBodyFrameSpeed);
      }
      if (planeENUSpeed_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlaneENUSpeed);
      }
      if (HasCalibratedAirspeed) {
        output.WriteRawTag(45);
        output.WriteFloat(CalibratedAirspeed);
      }
      if (HasBatteryRemainEnergyRatio) {
        output.WriteRawTag(53);
        output.WriteFloat(BatteryRemainEnergyRatio);
      }
      if (planeAGL_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PlaneAGL);
      }
      if (HasPlaneRelativeHeight) {
        output.WriteRawTag(65);
        output.WriteDouble(PlaneRelativeHeight);
      }
      if (HasPlanePitchErrorLowSpdPSP) {
        output.WriteRawTag(73);
        output.WriteDouble(PlanePitchErrorLowSpdPSP);
      }
      if (HasPlanePitchErrorHighSpdPSP) {
        output.WriteRawTag(81);
        output.WriteDouble(PlanePitchErrorHighSpdPSP);
      }
      if (HasBodyFrameZAccel) {
        output.WriteRawTag(89);
        output.WriteDouble(BodyFrameZAccel);
      }
      if (HasCruiseThrottleRatio) {
        output.WriteRawTag(97);
        output.WriteDouble(CruiseThrottleRatio);
      }
      if (HasRotorThrustRatio) {
        output.WriteRawTag(105);
        output.WriteDouble(RotorThrustRatio);
      }
      if (HasAoA) {
        output.WriteRawTag(113);
        output.WriteDouble(AoA);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (planeLLA_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlaneLLA);
      }
      if (planeOrientation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlaneOrientation);
      }
      if (planeBodyFrameSpeed_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlaneBodyFrameSpeed);
      }
      if (planeENUSpeed_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlaneENUSpeed);
      }
      if (HasCalibratedAirspeed) {
        output.WriteRawTag(45);
        output.WriteFloat(CalibratedAirspeed);
      }
      if (HasBatteryRemainEnergyRatio) {
        output.WriteRawTag(53);
        output.WriteFloat(BatteryRemainEnergyRatio);
      }
      if (planeAGL_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PlaneAGL);
      }
      if (HasPlaneRelativeHeight) {
        output.WriteRawTag(65);
        output.WriteDouble(PlaneRelativeHeight);
      }
      if (HasPlanePitchErrorLowSpdPSP) {
        output.WriteRawTag(73);
        output.WriteDouble(PlanePitchErrorLowSpdPSP);
      }
      if (HasPlanePitchErrorHighSpdPSP) {
        output.WriteRawTag(81);
        output.WriteDouble(PlanePitchErrorHighSpdPSP);
      }
      if (HasBodyFrameZAccel) {
        output.WriteRawTag(89);
        output.WriteDouble(BodyFrameZAccel);
      }
      if (HasCruiseThrottleRatio) {
        output.WriteRawTag(97);
        output.WriteDouble(CruiseThrottleRatio);
      }
      if (HasRotorThrustRatio) {
        output.WriteRawTag(105);
        output.WriteDouble(RotorThrustRatio);
      }
      if (HasAoA) {
        output.WriteRawTag(113);
        output.WriteDouble(AoA);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (planeLLA_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaneLLA);
      }
      if (planeOrientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaneOrientation);
      }
      if (planeBodyFrameSpeed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaneBodyFrameSpeed);
      }
      if (planeENUSpeed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaneENUSpeed);
      }
      if (HasCalibratedAirspeed) {
        size += 1 + 4;
      }
      if (HasBatteryRemainEnergyRatio) {
        size += 1 + 4;
      }
      if (planeAGL_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaneAGL);
      }
      if (HasPlaneRelativeHeight) {
        size += 1 + 8;
      }
      if (HasPlanePitchErrorLowSpdPSP) {
        size += 1 + 8;
      }
      if (HasPlanePitchErrorHighSpdPSP) {
        size += 1 + 8;
      }
      if (HasBodyFrameZAccel) {
        size += 1 + 8;
      }
      if (HasCruiseThrottleRatio) {
        size += 1 + 8;
      }
      if (HasRotorThrustRatio) {
        size += 1 + 8;
      }
      if (HasAoA) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_AttitudeIndicator other) {
      if (other == null) {
        return;
      }
      if (other.planeLLA_ != null) {
        if (planeLLA_ == null) {
          PlaneLLA = new global::MetaData.Proto_LLA();
        }
        PlaneLLA.MergeFrom(other.PlaneLLA);
      }
      if (other.planeOrientation_ != null) {
        if (planeOrientation_ == null) {
          PlaneOrientation = new global::MetaData.Proto_Matrix3F();
        }
        PlaneOrientation.MergeFrom(other.PlaneOrientation);
      }
      if (other.planeBodyFrameSpeed_ != null) {
        if (planeBodyFrameSpeed_ == null) {
          PlaneBodyFrameSpeed = new global::MetaData.Proto_Vector3F();
        }
        PlaneBodyFrameSpeed.MergeFrom(other.PlaneBodyFrameSpeed);
      }
      if (other.planeENUSpeed_ != null) {
        if (planeENUSpeed_ == null) {
          PlaneENUSpeed = new global::MetaData.Proto_Vector3F();
        }
        PlaneENUSpeed.MergeFrom(other.PlaneENUSpeed);
      }
      if (other.HasCalibratedAirspeed) {
        CalibratedAirspeed = other.CalibratedAirspeed;
      }
      if (other.HasBatteryRemainEnergyRatio) {
        BatteryRemainEnergyRatio = other.BatteryRemainEnergyRatio;
      }
      if (other.planeAGL_ != null) {
        if (planeAGL_ == null) {
          PlaneAGL = new global::Proto3FlightInfo.Porto_BoolDouble();
        }
        PlaneAGL.MergeFrom(other.PlaneAGL);
      }
      if (other.HasPlaneRelativeHeight) {
        PlaneRelativeHeight = other.PlaneRelativeHeight;
      }
      if (other.HasPlanePitchErrorLowSpdPSP) {
        PlanePitchErrorLowSpdPSP = other.PlanePitchErrorLowSpdPSP;
      }
      if (other.HasPlanePitchErrorHighSpdPSP) {
        PlanePitchErrorHighSpdPSP = other.PlanePitchErrorHighSpdPSP;
      }
      if (other.HasBodyFrameZAccel) {
        BodyFrameZAccel = other.BodyFrameZAccel;
      }
      if (other.HasCruiseThrottleRatio) {
        CruiseThrottleRatio = other.CruiseThrottleRatio;
      }
      if (other.HasRotorThrustRatio) {
        RotorThrustRatio = other.RotorThrustRatio;
      }
      if (other.HasAoA) {
        AoA = other.AoA;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (planeLLA_ == null) {
              PlaneLLA = new global::MetaData.Proto_LLA();
            }
            input.ReadMessage(PlaneLLA);
            break;
          }
          case 18: {
            if (planeOrientation_ == null) {
              PlaneOrientation = new global::MetaData.Proto_Matrix3F();
            }
            input.ReadMessage(PlaneOrientation);
            break;
          }
          case 26: {
            if (planeBodyFrameSpeed_ == null) {
              PlaneBodyFrameSpeed = new global::MetaData.Proto_Vector3F();
            }
            input.ReadMessage(PlaneBodyFrameSpeed);
            break;
          }
          case 34: {
            if (planeENUSpeed_ == null) {
              PlaneENUSpeed = new global::MetaData.Proto_Vector3F();
            }
            input.ReadMessage(PlaneENUSpeed);
            break;
          }
          case 45: {
            CalibratedAirspeed = input.ReadFloat();
            break;
          }
          case 53: {
            BatteryRemainEnergyRatio = input.ReadFloat();
            break;
          }
          case 58: {
            if (planeAGL_ == null) {
              PlaneAGL = new global::Proto3FlightInfo.Porto_BoolDouble();
            }
            input.ReadMessage(PlaneAGL);
            break;
          }
          case 65: {
            PlaneRelativeHeight = input.ReadDouble();
            break;
          }
          case 73: {
            PlanePitchErrorLowSpdPSP = input.ReadDouble();
            break;
          }
          case 81: {
            PlanePitchErrorHighSpdPSP = input.ReadDouble();
            break;
          }
          case 89: {
            BodyFrameZAccel = input.ReadDouble();
            break;
          }
          case 97: {
            CruiseThrottleRatio = input.ReadDouble();
            break;
          }
          case 105: {
            RotorThrustRatio = input.ReadDouble();
            break;
          }
          case 113: {
            AoA = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (planeLLA_ == null) {
              PlaneLLA = new global::MetaData.Proto_LLA();
            }
            input.ReadMessage(PlaneLLA);
            break;
          }
          case 18: {
            if (planeOrientation_ == null) {
              PlaneOrientation = new global::MetaData.Proto_Matrix3F();
            }
            input.ReadMessage(PlaneOrientation);
            break;
          }
          case 26: {
            if (planeBodyFrameSpeed_ == null) {
              PlaneBodyFrameSpeed = new global::MetaData.Proto_Vector3F();
            }
            input.ReadMessage(PlaneBodyFrameSpeed);
            break;
          }
          case 34: {
            if (planeENUSpeed_ == null) {
              PlaneENUSpeed = new global::MetaData.Proto_Vector3F();
            }
            input.ReadMessage(PlaneENUSpeed);
            break;
          }
          case 45: {
            CalibratedAirspeed = input.ReadFloat();
            break;
          }
          case 53: {
            BatteryRemainEnergyRatio = input.ReadFloat();
            break;
          }
          case 58: {
            if (planeAGL_ == null) {
              PlaneAGL = new global::Proto3FlightInfo.Porto_BoolDouble();
            }
            input.ReadMessage(PlaneAGL);
            break;
          }
          case 65: {
            PlaneRelativeHeight = input.ReadDouble();
            break;
          }
          case 73: {
            PlanePitchErrorLowSpdPSP = input.ReadDouble();
            break;
          }
          case 81: {
            PlanePitchErrorHighSpdPSP = input.ReadDouble();
            break;
          }
          case 89: {
            BodyFrameZAccel = input.ReadDouble();
            break;
          }
          case 97: {
            CruiseThrottleRatio = input.ReadDouble();
            break;
          }
          case 105: {
            RotorThrustRatio = input.ReadDouble();
            break;
          }
          case 113: {
            AoA = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Proto_FlightPlan : pb::IMessage<Proto_FlightPlan>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_FlightPlan> _parser = new pb::MessageParser<Proto_FlightPlan>(() => new Proto_FlightPlan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_FlightPlan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlightPlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlightPlan(Proto_FlightPlan other) : this() {
      flightPlan_ = other.flightPlan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_FlightPlan Clone() {
      return new Proto_FlightPlan(this);
    }

    /// <summary>Field number for the "FlightPlan" field.</summary>
    public const int FlightPlanFieldNumber = 1;
    private pb::ByteString flightPlan_ = pb::ByteString.Empty;
    /// <summary>
    /// 飞行计划
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString FlightPlan {
      get { return flightPlan_; }
      set {
        flightPlan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_FlightPlan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_FlightPlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FlightPlan != other.FlightPlan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FlightPlan.Length != 0) hash ^= FlightPlan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FlightPlan.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FlightPlan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FlightPlan.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FlightPlan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FlightPlan.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FlightPlan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_FlightPlan other) {
      if (other == null) {
        return;
      }
      if (other.FlightPlan.Length != 0) {
        FlightPlan = other.FlightPlan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FlightPlan = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FlightPlan = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Proto_GenerateInfo : pb::IMessage<Proto_GenerateInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Proto_GenerateInfo> _parser = new pb::MessageParser<Proto_GenerateInfo>(() => new Proto_GenerateInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    private int _hasBits2;
    private int _hasBits3;
    private int _hasBits4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Proto_GenerateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto3FlightInfo.OperFlightControlReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_GenerateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_GenerateInfo(Proto_GenerateInfo other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      _hasBits2 = other._hasBits2;
      _hasBits3 = other._hasBits3;
      _hasBits4 = other._hasBits4;
      isReceivingHot_ = other.isReceivingHot_;
      isMotorsAndServosEnabled_ = other.isMotorsAndServosEnabled_;
      isInTestMotorServoMode_ = other.isInTestMotorServoMode_;
      receivedBytesPerSecond_ = other.receivedBytesPerSecond_;
      sentBytesPerSecond_ = other.sentBytesPerSecond_;
      connectedDataLinkName_ = other.connectedDataLinkName_;
      aircraftUseFuelEngineForFixedWingCruise_ = other.aircraftUseFuelEngineForFixedWingCruise_;
      actualThrottleServoPosition_ = other.actualThrottleServoPosition_.Clone();
      cylinderHeadMaxTemperature_ = other.cylinderHeadMaxTemperature_.Clone();
      estimatedPropellerThrustN_ = other.estimatedPropellerThrustN_.Clone();
      cruiseFuelEngineRPMs_ = other.cruiseFuelEngineRPMs_.Clone();
      shouldCruiseEngineAvailable_ = other.shouldCruiseEngineAvailable_;
      isAllCruiseFuelEnginePowerOn_ = other.isAllCruiseFuelEnginePowerOn_;
      isAllCruiseFuelEngineRunning_ = other.isAllCruiseFuelEngineRunning_;
      flightControlUseAirspeedSensor_ = other.flightControlUseAirspeedSensor_;
      isUsePitotTube_ = other.isUsePitotTube_;
      isInSafeMode_ = other.isInSafeMode_;
      doNotUseBaroSensor_ = other.doNotUseBaroSensor_;
      totalRotorAndCruisePower_ = other.totalRotorAndCruisePower_;
      minMotorVoltage_ = other.minMotorVoltage_;
      minBatteryRemainEnergyRatio_ = other.minBatteryRemainEnergyRatio_;
      showFullBatteryEndurance_ = other.showFullBatteryEndurance_;
      isOnGround_ = other.isOnGround_;
      autoLandEnergyRatio_ = other.autoLandEnergyRatio_;
      enableBatteryEnergyLowAutoReturn_ = other.enableBatteryEnergyLowAutoReturn_;
      autoReturnBatteryEnergyRatio_ = other.autoReturnBatteryEnergyRatio_;
      remainCruiseEnergyWh_ = other.remainCruiseEnergyWh_;
      remainRotorEnergyWh_ = other.remainRotorEnergyWh_;
      lonInnerMode_ = other.lonInnerMode_;
      aircraftMass_ = other.aircraftMass_;
      targetFlySpeed_ = other.targetFlySpeed_;
      cruisePowerEstimation_ = other.cruisePowerEstimation_;
      cruiseEnergyPerMeter_ = other.cruiseEnergyPerMeter_;
      remainCruiseTime_ = other.remainCruiseTime_;
      remainCruiseDist_ = other.remainCruiseDist_;
      vTOLPowerEstimation_ = other.vTOLPowerEstimation_;
      airDensity_ = other.airDensity_;
      remainVTOLTime_ = other.remainVTOLTime_;
      aircraftHorizDistToLandAlongFlightPlan_ = other.aircraftHorizDistToLandAlongFlightPlan_;
      hasFixedWingModes_ = other.hasFixedWingModes_;
      rotorExpandState_ = other.rotorExpandState_;
      hasRetractableRotors_ = other.hasRetractableRotors_;
      isAutoRetractLandingGear_ = other.isAutoRetractLandingGear_;
      isLandingGearRetracted_ = other.isLandingGearRetracted_;
      rTKSolutionState_ = other.rTKSolutionState_;
      lLA_ = other.lLA_ != null ? other.lLA_.Clone() : null;
      eulerAnglesF_ = other.eulerAnglesF_ != null ? other.eulerAnglesF_.Clone() : null;
      targetAltitude_ = other.targetAltitude_;
      referenceAltitude_ = other.referenceAltitude_;
      trueAirSpeed_ = other.trueAirSpeed_;
      ground2DSpeed_ = other.ground2DSpeed_;
      straightDistToTakeOff_ = other.straightDistToTakeOff_;
      flyDistance_ = other.flyDistance_;
      flySeconds_ = other.flySeconds_;
      hasEstimatedWind_ = other.hasEstimatedWind_;
      estimatedWindAngle_ = other.estimatedWindAngle_;
      estimatedWindSpeed_ = other.estimatedWindSpeed_;
      writeCameraPosDataToFile_ = other.writeCameraPosDataToFile_;
      undownloadedPosDataCount_ = other.undownloadedPosDataCount_;
      averageRotorThrustRatioFor1G_ = other.averageRotorThrustRatioFor1G_;
      planeENUSpeed_ = other.planeENUSpeed_ != null ? other.planeENUSpeed_.Clone() : null;
      isGNSS2DAvailable_ = other.isGNSS2DAvailable_;
      isGNSSAltAvailable_ = other.isGNSSAltAvailable_;
      usingGnssSateNum_ = other.usingGnssSateNum_;
      isGNSSDataQualityGood_ = other.isGNSSDataQualityGood_;
      gNSSsomeNotUsable_ = other.gNSSsomeNotUsable_;
      isIRSReadyForTakeoff_ = other.isIRSReadyForTakeoff_;
      isInSensorCalibrationMode_ = other.isInSensorCalibrationMode_;
      isInNoMagMode_ = other.isInNoMagMode_;
      isUsingVisualPositionSystemForIRS_ = other.isUsingVisualPositionSystemForIRS_;
      isFlyTestParamsModified_ = other.isFlyTestParamsModified_;
      isInAutoVertPortOperationMode_ = other.isInAutoVertPortOperationMode_;
      isAutoPortLandElseAlterLand_ = other.isAutoPortLandElseAlterLand_;
      isVerticalLanding_ = other.isVerticalLanding_;
      isInLandingConstDescentAndAlignPhase_ = other.isInLandingConstDescentAndAlignPhase_;
      isVertLandPauseTouchDownForAlignment_ = other.isVertLandPauseTouchDownForAlignment_;
      precisionLandMaxAllowableErrors_ = other.precisionLandMaxAllowableErrors_ != null ? other.precisionLandMaxAllowableErrors_.Clone() : null;
      landingGlobal2DPosError_ = other.landingGlobal2DPosError_;
      landActiveYawAlign_ = other.landActiveYawAlign_;
      landPassiveYawAlign_ = other.landPassiveYawAlign_;
      portTableHeadingAngle_ = other.portTableHeadingAngle_;
      yawAngleAlignError_ = other.yawAngleAlignError_;
      isProtocolVersionConflict_ = other.isProtocolVersionConflict_;
      canEnterHighPosAccuRotorMode_ = other.canEnterHighPosAccuRotorMode_;
      serverErrorsHasMessage_ = other.serverErrorsHasMessage_;
      receivedAircraftMessagesErrorCount_ = other.receivedAircraftMessagesErrorCount_;
      receivedAircraftMessagesWarningCount_ = other.receivedAircraftMessagesWarningCount_;
      isInEngineerMode_ = other.isInEngineerMode_;
      isLowNzProtectionActivated_ = other.isLowNzProtectionActivated_;
      isHighAoAProtectionActivated_ = other.isHighAoAProtectionActivated_;
      isHighStructNzProtectionActivated_ = other.isHighStructNzProtectionActivated_;
      isLowSpeedPSPActivated_ = other.isLowSpeedPSPActivated_;
      isHighSpeedPSPActivated_ = other.isHighSpeedPSPActivated_;
      isAltitudeDropFloorActivated_ = other.isAltitudeDropFloorActivated_;
      isAltitudeRiseCeilingActivated_ = other.isAltitudeRiseCeilingActivated_;
      altitudeDeviation_ = other.altitudeDeviation_;
      isAltitudeDeviationHigh_ = other.isAltitudeDeviationHigh_;
      isAltitudeDeviationLow_ = other.isAltitudeDeviationLow_;
      isRollLostControl_ = other.isRollLostControl_;
      isPitchLostControl_ = other.isPitchLostControl_;
      emergencyLandBecauseBatteryLow_ = other.emergencyLandBecauseBatteryLow_;
      emergencyLandBecauseFlyTimeHigh_ = other.emergencyLandBecauseFlyTimeHigh_;
      isRejectingTakeOff_ = other.isRejectingTakeOff_;
      gyroHFRMSDPS_ = other.gyroHFRMSDPS_ != null ? other.gyroHFRMSDPS_.Clone() : null;
      isLogFileAlmostFull_ = other.isLogFileAlmostFull_;
      enableOnGndFastFileTransmit_ = other.enableOnGndFastFileTransmit_;
      minimumRemainRatio_ = other.minimumRemainRatio_;
      warningRemainRatio_ = other.warningRemainRatio_;
      dateTimeNow_ = other.dateTimeNow_;
      debugCurveLastReceiveTime_ = other.debugCurveLastReceiveTime_;
      lastReceivingGNSSRawDataTime_ = other.lastReceivingGNSSRawDataTime_;
      allGNSSRawDataCounter_ = other.allGNSSRawDataCounter_;
      isRequestOpenOnboardLog_ = other.isRequestOpenOnboardLog_;
      isOnboardLogOpen_ = other.isOnboardLogOpen_;
      isWingCruiseHasFailed_ = other.isWingCruiseHasFailed_;
      isEmergencyLand_ = other.isEmergencyLand_;
      isEmergencyLandRequested_ = other.isEmergencyLandRequested_;
      disableEmergencyAutoLand_ = other.disableEmergencyAutoLand_;
      enableGroundDistLowWarning_ = other.enableGroundDistLowWarning_;
      isLowGndDistWarning_ = other.isLowGndDistWarning_;
      isAGLBySonarAvailable_ = other.isAGLBySonarAvailable_;
      landingGearAltAGLByRadar_ = other.landingGearAltAGLByRadar_;
      isLowAltProtectionActive_ = other.isLowAltProtectionActive_;
      isControllerHearingFromAircraft_ = other.isControllerHearingFromAircraft_;
      isAircraftHearingFromController_ = other.isAircraftHearingFromController_;
      isInOnGroundActionLayerCommandMode_ = other.isInOnGroundActionLayerCommandMode_;
      hasManualRCReceiver_ = other.hasManualRCReceiver_;
      hasManualControlInputs_ = other.hasManualControlInputs_;
      enableExceptionWhenRCReceiverNoSignal_ = other.enableExceptionWhenRCReceiverNoSignal_;
      sensorInvalidMessage_ = other.sensorInvalidMessage_;
      taskMode_ = other.taskMode_;
      isPilotControlActive_ = other.isPilotControlActive_;
      manualControlInDisableMotorServoState_ = other.manualControlInDisableMotorServoState_;
      canEnterWingFlyWithRotorMode_ = other.canEnterWingFlyWithRotorMode_;
      canEnterWingCruiseMode_ = other.canEnterWingCruiseMode_;
      cruiseMotorCount_ = other.cruiseMotorCount_;
      enableCruiseMotorInRotorHoverMode_ = other.enableCruiseMotorInRotorHoverMode_;
      enforceRTKTakeOffAndLand_ = other.enforceRTKTakeOffAndLand_;
      isRTKAndIRSPrecisionOKForAutoPortTakeOff_ = other.isRTKAndIRSPrecisionOKForAutoPortTakeOff_;
      isGimbalCamSDCardDestroyPowerOn_ = other.isGimbalCamSDCardDestroyPowerOn_;
      isGimbalCameraNotDetected_ = other.isGimbalCameraNotDetected_;
      targetAltitudeHMSLOffset_ = other.targetAltitudeHMSLOffset_;
      targetAltitudeAGLOffset_ = other.targetAltitudeAGLOffset_;
      isWingCruiseAirspeedPriorToHeight_ = other.isWingCruiseAirspeedPriorToHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Proto_GenerateInfo Clone() {
      return new Proto_GenerateInfo(this);
    }

    /// <summary>Field number for the "IsReceivingHot" field.</summary>
    public const int IsReceivingHotFieldNumber = 1;
    private readonly static bool IsReceivingHotDefaultValue = false;

    private bool isReceivingHot_;
    /// <summary>
    /// 是否正在接收热数据（连接是否中断判断条件）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsReceivingHot {
      get { if ((_hasBits0 & 1) != 0) { return isReceivingHot_; } else { return IsReceivingHotDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isReceivingHot_ = value;
      }
    }
    /// <summary>Gets whether the "IsReceivingHot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsReceivingHot {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "IsReceivingHot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsReceivingHot() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "IsMotorsAndServosEnabled" field.</summary>
    public const int IsMotorsAndServosEnabledFieldNumber = 2;
    private readonly static bool IsMotorsAndServosEnabledDefaultValue = false;

    private bool isMotorsAndServosEnabled_;
    /// <summary>
    /// 是否使能电机和舵机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMotorsAndServosEnabled {
      get { if ((_hasBits0 & 2) != 0) { return isMotorsAndServosEnabled_; } else { return IsMotorsAndServosEnabledDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isMotorsAndServosEnabled_ = value;
      }
    }
    /// <summary>Gets whether the "IsMotorsAndServosEnabled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsMotorsAndServosEnabled {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsMotorsAndServosEnabled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsMotorsAndServosEnabled() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "IsInTestMotorServoMode" field.</summary>
    public const int IsInTestMotorServoModeFieldNumber = 3;
    private readonly static bool IsInTestMotorServoModeDefaultValue = false;

    private bool isInTestMotorServoMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInTestMotorServoMode {
      get { if ((_hasBits0 & 4) != 0) { return isInTestMotorServoMode_; } else { return IsInTestMotorServoModeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isInTestMotorServoMode_ = value;
      }
    }
    /// <summary>Gets whether the "IsInTestMotorServoMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInTestMotorServoMode {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "IsInTestMotorServoMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInTestMotorServoMode() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ReceivedBytesPerSecond" field.</summary>
    public const int ReceivedBytesPerSecondFieldNumber = 4;
    private readonly static double ReceivedBytesPerSecondDefaultValue = 0D;

    private double receivedBytesPerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ReceivedBytesPerSecond {
      get { if ((_hasBits0 & 8) != 0) { return receivedBytesPerSecond_; } else { return ReceivedBytesPerSecondDefaultValue; } }
      set {
        _hasBits0 |= 8;
        receivedBytesPerSecond_ = value;
      }
    }
    /// <summary>Gets whether the "ReceivedBytesPerSecond" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReceivedBytesPerSecond {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ReceivedBytesPerSecond" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReceivedBytesPerSecond() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "SentBytesPerSecond" field.</summary>
    public const int SentBytesPerSecondFieldNumber = 5;
    private readonly static double SentBytesPerSecondDefaultValue = 0D;

    private double sentBytesPerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SentBytesPerSecond {
      get { if ((_hasBits0 & 16) != 0) { return sentBytesPerSecond_; } else { return SentBytesPerSecondDefaultValue; } }
      set {
        _hasBits0 |= 16;
        sentBytesPerSecond_ = value;
      }
    }
    /// <summary>Gets whether the "SentBytesPerSecond" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSentBytesPerSecond {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "SentBytesPerSecond" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSentBytesPerSecond() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "ConnectedDataLinkName" field.</summary>
    public const int ConnectedDataLinkNameFieldNumber = 6;
    private readonly static string ConnectedDataLinkNameDefaultValue = "";

    private string connectedDataLinkName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConnectedDataLinkName {
      get { return connectedDataLinkName_ ?? ConnectedDataLinkNameDefaultValue; }
      set {
        connectedDataLinkName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "ConnectedDataLinkName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConnectedDataLinkName {
      get { return connectedDataLinkName_ != null; }
    }
    /// <summary>Clears the value of the "ConnectedDataLinkName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConnectedDataLinkName() {
      connectedDataLinkName_ = null;
    }

    /// <summary>Field number for the "AircraftUseFuelEngineForFixedWingCruise" field.</summary>
    public const int AircraftUseFuelEngineForFixedWingCruiseFieldNumber = 7;
    private readonly static bool AircraftUseFuelEngineForFixedWingCruiseDefaultValue = false;

    private bool aircraftUseFuelEngineForFixedWingCruise_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AircraftUseFuelEngineForFixedWingCruise {
      get { if ((_hasBits0 & 32) != 0) { return aircraftUseFuelEngineForFixedWingCruise_; } else { return AircraftUseFuelEngineForFixedWingCruiseDefaultValue; } }
      set {
        _hasBits0 |= 32;
        aircraftUseFuelEngineForFixedWingCruise_ = value;
      }
    }
    /// <summary>Gets whether the "AircraftUseFuelEngineForFixedWingCruise" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAircraftUseFuelEngineForFixedWingCruise {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "AircraftUseFuelEngineForFixedWingCruise" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAircraftUseFuelEngineForFixedWingCruise() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ActualThrottleServoPosition" field.</summary>
    public const int ActualThrottleServoPositionFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_actualThrottleServoPosition_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> actualThrottleServoPosition_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 实际油门舵机位置，范围[0,100]。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> ActualThrottleServoPosition {
      get { return actualThrottleServoPosition_; }
    }

    /// <summary>Field number for the "CylinderHeadMaxTemperature" field.</summary>
    public const int CylinderHeadMaxTemperatureFieldNumber = 9;
    private static readonly pb::FieldCodec<float> _repeated_cylinderHeadMaxTemperature_codec
        = pb::FieldCodec.ForFloat(74);
    private readonly pbc::RepeatedField<float> cylinderHeadMaxTemperature_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> CylinderHeadMaxTemperature {
      get { return cylinderHeadMaxTemperature_; }
    }

    /// <summary>Field number for the "EstimatedPropellerThrustN" field.</summary>
    public const int EstimatedPropellerThrustNFieldNumber = 10;
    private static readonly pb::FieldCodec<float> _repeated_estimatedPropellerThrustN_codec
        = pb::FieldCodec.ForFloat(82);
    private readonly pbc::RepeatedField<float> estimatedPropellerThrustN_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// 估算的螺旋桨的推力。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> EstimatedPropellerThrustN {
      get { return estimatedPropellerThrustN_; }
    }

    /// <summary>Field number for the "CruiseFuelEngineRPMs" field.</summary>
    public const int CruiseFuelEngineRPMsFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_cruiseFuelEngineRPMs_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> cruiseFuelEngineRPMs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///int16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> CruiseFuelEngineRPMs {
      get { return cruiseFuelEngineRPMs_; }
    }

    /// <summary>Field number for the "ShouldCruiseEngineAvailable" field.</summary>
    public const int ShouldCruiseEngineAvailableFieldNumber = 12;
    private readonly static bool ShouldCruiseEngineAvailableDefaultValue = false;

    private bool shouldCruiseEngineAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShouldCruiseEngineAvailable {
      get { if ((_hasBits0 & 64) != 0) { return shouldCruiseEngineAvailable_; } else { return ShouldCruiseEngineAvailableDefaultValue; } }
      set {
        _hasBits0 |= 64;
        shouldCruiseEngineAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "ShouldCruiseEngineAvailable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShouldCruiseEngineAvailable {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "ShouldCruiseEngineAvailable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShouldCruiseEngineAvailable() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "IsAllCruiseFuelEnginePowerOn" field.</summary>
    public const int IsAllCruiseFuelEnginePowerOnFieldNumber = 13;
    private readonly static bool IsAllCruiseFuelEnginePowerOnDefaultValue = false;

    private bool isAllCruiseFuelEnginePowerOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAllCruiseFuelEnginePowerOn {
      get { if ((_hasBits0 & 128) != 0) { return isAllCruiseFuelEnginePowerOn_; } else { return IsAllCruiseFuelEnginePowerOnDefaultValue; } }
      set {
        _hasBits0 |= 128;
        isAllCruiseFuelEnginePowerOn_ = value;
      }
    }
    /// <summary>Gets whether the "IsAllCruiseFuelEnginePowerOn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAllCruiseFuelEnginePowerOn {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "IsAllCruiseFuelEnginePowerOn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAllCruiseFuelEnginePowerOn() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "IsAllCruiseFuelEngineRunning" field.</summary>
    public const int IsAllCruiseFuelEngineRunningFieldNumber = 14;
    private readonly static bool IsAllCruiseFuelEngineRunningDefaultValue = false;

    private bool isAllCruiseFuelEngineRunning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAllCruiseFuelEngineRunning {
      get { if ((_hasBits0 & 256) != 0) { return isAllCruiseFuelEngineRunning_; } else { return IsAllCruiseFuelEngineRunningDefaultValue; } }
      set {
        _hasBits0 |= 256;
        isAllCruiseFuelEngineRunning_ = value;
      }
    }
    /// <summary>Gets whether the "IsAllCruiseFuelEngineRunning" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAllCruiseFuelEngineRunning {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "IsAllCruiseFuelEngineRunning" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAllCruiseFuelEngineRunning() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "FlightControlUseAirspeedSensor" field.</summary>
    public const int FlightControlUseAirspeedSensorFieldNumber = 15;
    private readonly static bool FlightControlUseAirspeedSensorDefaultValue = false;

    private bool flightControlUseAirspeedSensor_;
    /// <summary>
    /// 是否有空速传感器。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FlightControlUseAirspeedSensor {
      get { if ((_hasBits0 & 512) != 0) { return flightControlUseAirspeedSensor_; } else { return FlightControlUseAirspeedSensorDefaultValue; } }
      set {
        _hasBits0 |= 512;
        flightControlUseAirspeedSensor_ = value;
      }
    }
    /// <summary>Gets whether the "FlightControlUseAirspeedSensor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlightControlUseAirspeedSensor {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "FlightControlUseAirspeedSensor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlightControlUseAirspeedSensor() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "IsUsePitotTube" field.</summary>
    public const int IsUsePitotTubeFieldNumber = 16;
    private readonly static bool IsUsePitotTubeDefaultValue = false;

    private bool isUsePitotTube_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUsePitotTube {
      get { if ((_hasBits0 & 1024) != 0) { return isUsePitotTube_; } else { return IsUsePitotTubeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        isUsePitotTube_ = value;
      }
    }
    /// <summary>Gets whether the "IsUsePitotTube" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsUsePitotTube {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "IsUsePitotTube" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsUsePitotTube() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "IsInSafeMode" field.</summary>
    public const int IsInSafeModeFieldNumber = 17;
    private readonly static bool IsInSafeModeDefaultValue = false;

    private bool isInSafeMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInSafeMode {
      get { if ((_hasBits0 & 2048) != 0) { return isInSafeMode_; } else { return IsInSafeModeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        isInSafeMode_ = value;
      }
    }
    /// <summary>Gets whether the "IsInSafeMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInSafeMode {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "IsInSafeMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInSafeMode() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "DoNotUseBaroSensor" field.</summary>
    public const int DoNotUseBaroSensorFieldNumber = 18;
    private readonly static bool DoNotUseBaroSensorDefaultValue = false;

    private bool doNotUseBaroSensor_;
    /// <summary>
    /// 是否不适用气压传感器。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DoNotUseBaroSensor {
      get { if ((_hasBits0 & 4096) != 0) { return doNotUseBaroSensor_; } else { return DoNotUseBaroSensorDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        doNotUseBaroSensor_ = value;
      }
    }
    /// <summary>Gets whether the "DoNotUseBaroSensor" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDoNotUseBaroSensor {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "DoNotUseBaroSensor" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDoNotUseBaroSensor() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "TotalRotorAndCruisePower" field.</summary>
    public const int TotalRotorAndCruisePowerFieldNumber = 19;
    private readonly static float TotalRotorAndCruisePowerDefaultValue = 0F;

    private float totalRotorAndCruisePower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TotalRotorAndCruisePower {
      get { if ((_hasBits0 & 8192) != 0) { return totalRotorAndCruisePower_; } else { return TotalRotorAndCruisePowerDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        totalRotorAndCruisePower_ = value;
      }
    }
    /// <summary>Gets whether the "TotalRotorAndCruisePower" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTotalRotorAndCruisePower {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "TotalRotorAndCruisePower" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTotalRotorAndCruisePower() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "MinMotorVoltage" field.</summary>
    public const int MinMotorVoltageFieldNumber = 20;
    private readonly static float MinMotorVoltageDefaultValue = 0F;

    private float minMotorVoltage_;
    /// <summary>
    /// 获取电压最低的那个电机的电压。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinMotorVoltage {
      get { if ((_hasBits0 & 16384) != 0) { return minMotorVoltage_; } else { return MinMotorVoltageDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        minMotorVoltage_ = value;
      }
    }
    /// <summary>Gets whether the "MinMotorVoltage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinMotorVoltage {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "MinMotorVoltage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinMotorVoltage() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "MinBatteryRemainEnergyRatio" field.</summary>
    public const int MinBatteryRemainEnergyRatioFieldNumber = 21;
    private readonly static float MinBatteryRemainEnergyRatioDefaultValue = 0F;

    private float minBatteryRemainEnergyRatio_;
    /// <summary>
    /// 获取电量最少的电池的剩余能量比例。值范围[0,1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinBatteryRemainEnergyRatio {
      get { if ((_hasBits0 & 32768) != 0) { return minBatteryRemainEnergyRatio_; } else { return MinBatteryRemainEnergyRatioDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        minBatteryRemainEnergyRatio_ = value;
      }
    }
    /// <summary>Gets whether the "MinBatteryRemainEnergyRatio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinBatteryRemainEnergyRatio {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "MinBatteryRemainEnergyRatio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinBatteryRemainEnergyRatio() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "ShowFullBatteryEndurance" field.</summary>
    public const int ShowFullBatteryEnduranceFieldNumber = 22;
    private readonly static bool ShowFullBatteryEnduranceDefaultValue = false;

    private bool showFullBatteryEndurance_;
    /// <summary>
    /// 显示至返航电量的续航能力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShowFullBatteryEndurance {
      get { if ((_hasBits0 & 65536) != 0) { return showFullBatteryEndurance_; } else { return ShowFullBatteryEnduranceDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        showFullBatteryEndurance_ = value;
      }
    }
    /// <summary>Gets whether the "ShowFullBatteryEndurance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShowFullBatteryEndurance {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "ShowFullBatteryEndurance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShowFullBatteryEndurance() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "IsOnGround" field.</summary>
    public const int IsOnGroundFieldNumber = 23;
    private readonly static bool IsOnGroundDefaultValue = false;

    private bool isOnGround_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOnGround {
      get { if ((_hasBits0 & 131072) != 0) { return isOnGround_; } else { return IsOnGroundDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        isOnGround_ = value;
      }
    }
    /// <summary>Gets whether the "IsOnGround" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOnGround {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "IsOnGround" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOnGround() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "AutoLandEnergyRatio" field.</summary>
    public const int AutoLandEnergyRatioFieldNumber = 24;
    private readonly static float AutoLandEnergyRatioDefaultValue = 0F;

    private float autoLandEnergyRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AutoLandEnergyRatio {
      get { if ((_hasBits0 & 262144) != 0) { return autoLandEnergyRatio_; } else { return AutoLandEnergyRatioDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        autoLandEnergyRatio_ = value;
      }
    }
    /// <summary>Gets whether the "AutoLandEnergyRatio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoLandEnergyRatio {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "AutoLandEnergyRatio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoLandEnergyRatio() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "EnableBatteryEnergyLowAutoReturn" field.</summary>
    public const int EnableBatteryEnergyLowAutoReturnFieldNumber = 25;
    private readonly static bool EnableBatteryEnergyLowAutoReturnDefaultValue = false;

    private bool enableBatteryEnergyLowAutoReturn_;
    /// <summary>
    /// 是否开启电池能量低时，自动返航的功能。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableBatteryEnergyLowAutoReturn {
      get { if ((_hasBits0 & 524288) != 0) { return enableBatteryEnergyLowAutoReturn_; } else { return EnableBatteryEnergyLowAutoReturnDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        enableBatteryEnergyLowAutoReturn_ = value;
      }
    }
    /// <summary>Gets whether the "EnableBatteryEnergyLowAutoReturn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnableBatteryEnergyLowAutoReturn {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "EnableBatteryEnergyLowAutoReturn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnableBatteryEnergyLowAutoReturn() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "AutoReturnBatteryEnergyRatio" field.</summary>
    public const int AutoReturnBatteryEnergyRatioFieldNumber = 26;
    private readonly static float AutoReturnBatteryEnergyRatioDefaultValue = 0F;

    private float autoReturnBatteryEnergyRatio_;
    /// <summary>
    /// 当剩余电量比例低于这个值时，且EnableBatteryEnergyLowAutoReturn为true时，触发自动返航。值范围为[0,1]。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AutoReturnBatteryEnergyRatio {
      get { if ((_hasBits0 & 1048576) != 0) { return autoReturnBatteryEnergyRatio_; } else { return AutoReturnBatteryEnergyRatioDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        autoReturnBatteryEnergyRatio_ = value;
      }
    }
    /// <summary>Gets whether the "AutoReturnBatteryEnergyRatio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAutoReturnBatteryEnergyRatio {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "AutoReturnBatteryEnergyRatio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAutoReturnBatteryEnergyRatio() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "RemainCruiseEnergyWh" field.</summary>
    public const int RemainCruiseEnergyWhFieldNumber = 27;
    private readonly static float RemainCruiseEnergyWhDefaultValue = 0F;

    private float remainCruiseEnergyWh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RemainCruiseEnergyWh {
      get { if ((_hasBits0 & 2097152) != 0) { return remainCruiseEnergyWh_; } else { return RemainCruiseEnergyWhDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        remainCruiseEnergyWh_ = value;
      }
    }
    /// <summary>Gets whether the "RemainCruiseEnergyWh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRemainCruiseEnergyWh {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "RemainCruiseEnergyWh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRemainCruiseEnergyWh() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "RemainRotorEnergyWh" field.</summary>
    public const int RemainRotorEnergyWhFieldNumber = 28;
    private readonly static float RemainRotorEnergyWhDefaultValue = 0F;

    private float remainRotorEnergyWh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RemainRotorEnergyWh {
      get { if ((_hasBits0 & 4194304) != 0) { return remainRotorEnergyWh_; } else { return RemainRotorEnergyWhDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        remainRotorEnergyWh_ = value;
      }
    }
    /// <summary>Gets whether the "RemainRotorEnergyWh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRemainRotorEnergyWh {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "RemainRotorEnergyWh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRemainRotorEnergyWh() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "LonInnerMode" field.</summary>
    public const int LonInnerModeFieldNumber = 29;
    private readonly static global::MetaData.Proto_FCControlInnerLoopLonModes LonInnerModeDefaultValue = global::MetaData.Proto_FCControlInnerLoopLonModes.OnGround;

    private global::MetaData.Proto_FCControlInnerLoopLonModes lonInnerMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_FCControlInnerLoopLonModes LonInnerMode {
      get { if ((_hasBits0 & 8388608) != 0) { return lonInnerMode_; } else { return LonInnerModeDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        lonInnerMode_ = value;
      }
    }
    /// <summary>Gets whether the "LonInnerMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLonInnerMode {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "LonInnerMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLonInnerMode() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "AircraftMass" field.</summary>
    public const int AircraftMassFieldNumber = 30;
    private readonly static float AircraftMassDefaultValue = 0F;

    private float aircraftMass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AircraftMass {
      get { if ((_hasBits0 & 16777216) != 0) { return aircraftMass_; } else { return AircraftMassDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        aircraftMass_ = value;
      }
    }
    /// <summary>Gets whether the "AircraftMass" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAircraftMass {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "AircraftMass" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAircraftMass() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "TargetFlySpeed" field.</summary>
    public const int TargetFlySpeedFieldNumber = 31;
    private readonly static float TargetFlySpeedDefaultValue = 0F;

    private float targetFlySpeed_;
    /// <summary>
    /// 目标速度。由IsTargetAirspeedElseGndspeed决定是什么速度。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TargetFlySpeed {
      get { if ((_hasBits0 & 33554432) != 0) { return targetFlySpeed_; } else { return TargetFlySpeedDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        targetFlySpeed_ = value;
      }
    }
    /// <summary>Gets whether the "TargetFlySpeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetFlySpeed {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "TargetFlySpeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetFlySpeed() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "CruisePowerEstimation" field.</summary>
    public const int CruisePowerEstimationFieldNumber = 32;
    private readonly static double CruisePowerEstimationDefaultValue = 0D;

    private double cruisePowerEstimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CruisePowerEstimation {
      get { if ((_hasBits0 & 67108864) != 0) { return cruisePowerEstimation_; } else { return CruisePowerEstimationDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        cruisePowerEstimation_ = value;
      }
    }
    /// <summary>Gets whether the "CruisePowerEstimation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCruisePowerEstimation {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "CruisePowerEstimation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCruisePowerEstimation() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "CruiseEnergyPerMeter" field.</summary>
    public const int CruiseEnergyPerMeterFieldNumber = 33;
    private readonly static double CruiseEnergyPerMeterDefaultValue = 0D;

    private double cruiseEnergyPerMeter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CruiseEnergyPerMeter {
      get { if ((_hasBits0 & 134217728) != 0) { return cruiseEnergyPerMeter_; } else { return CruiseEnergyPerMeterDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        cruiseEnergyPerMeter_ = value;
      }
    }
    /// <summary>Gets whether the "CruiseEnergyPerMeter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCruiseEnergyPerMeter {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "CruiseEnergyPerMeter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCruiseEnergyPerMeter() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "RemainCruiseTime" field.</summary>
    public const int RemainCruiseTimeFieldNumber = 34;
    private readonly static double RemainCruiseTimeDefaultValue = 0D;

    private double remainCruiseTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RemainCruiseTime {
      get { if ((_hasBits0 & 268435456) != 0) { return remainCruiseTime_; } else { return RemainCruiseTimeDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        remainCruiseTime_ = value;
      }
    }
    /// <summary>Gets whether the "RemainCruiseTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRemainCruiseTime {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "RemainCruiseTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRemainCruiseTime() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "RemainCruiseDist" field.</summary>
    public const int RemainCruiseDistFieldNumber = 35;
    private readonly static double RemainCruiseDistDefaultValue = 0D;

    private double remainCruiseDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RemainCruiseDist {
      get { if ((_hasBits0 & 536870912) != 0) { return remainCruiseDist_; } else { return RemainCruiseDistDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        remainCruiseDist_ = value;
      }
    }
    /// <summary>Gets whether the "RemainCruiseDist" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRemainCruiseDist {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "RemainCruiseDist" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRemainCruiseDist() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "VTOLPowerEstimation" field.</summary>
    public const int VTOLPowerEstimationFieldNumber = 36;
    private readonly static double VTOLPowerEstimationDefaultValue = 0D;

    private double vTOLPowerEstimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VTOLPowerEstimation {
      get { if ((_hasBits0 & 1073741824) != 0) { return vTOLPowerEstimation_; } else { return VTOLPowerEstimationDefaultValue; } }
      set {
        _hasBits0 |= 1073741824;
        vTOLPowerEstimation_ = value;
      }
    }
    /// <summary>Gets whether the "VTOLPowerEstimation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVTOLPowerEstimation {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "VTOLPowerEstimation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVTOLPowerEstimation() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "AirDensity" field.</summary>
    public const int AirDensityFieldNumber = 37;
    private readonly static float AirDensityDefaultValue = 0F;

    private float airDensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AirDensity {
      get { if ((_hasBits0 & -2147483648) != 0) { return airDensity_; } else { return AirDensityDefaultValue; } }
      set {
        _hasBits0 |= -2147483648;
        airDensity_ = value;
      }
    }
    /// <summary>Gets whether the "AirDensity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAirDensity {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "AirDensity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAirDensity() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "RemainVTOLTime" field.</summary>
    public const int RemainVTOLTimeFieldNumber = 38;
    private readonly static double RemainVTOLTimeDefaultValue = 0D;

    private double remainVTOLTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RemainVTOLTime {
      get { if ((_hasBits1 & 1) != 0) { return remainVTOLTime_; } else { return RemainVTOLTimeDefaultValue; } }
      set {
        _hasBits1 |= 1;
        remainVTOLTime_ = value;
      }
    }
    /// <summary>Gets whether the "RemainVTOLTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRemainVTOLTime {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "RemainVTOLTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRemainVTOLTime() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "AircraftHorizDistToLandAlongFlightPlan" field.</summary>
    public const int AircraftHorizDistToLandAlongFlightPlanFieldNumber = 39;
    private readonly static float AircraftHorizDistToLandAlongFlightPlanDefaultValue = 0F;

    private float aircraftHorizDistToLandAlongFlightPlan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AircraftHorizDistToLandAlongFlightPlan {
      get { if ((_hasBits1 & 2) != 0) { return aircraftHorizDistToLandAlongFlightPlan_; } else { return AircraftHorizDistToLandAlongFlightPlanDefaultValue; } }
      set {
        _hasBits1 |= 2;
        aircraftHorizDistToLandAlongFlightPlan_ = value;
      }
    }
    /// <summary>Gets whether the "AircraftHorizDistToLandAlongFlightPlan" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAircraftHorizDistToLandAlongFlightPlan {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "AircraftHorizDistToLandAlongFlightPlan" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAircraftHorizDistToLandAlongFlightPlan() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "HasFixedWingModes" field.</summary>
    public const int HasFixedWingModesFieldNumber = 40;
    private readonly static bool HasFixedWingModesDefaultValue = false;

    private bool hasFixedWingModes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFixedWingModes {
      get { if ((_hasBits1 & 4) != 0) { return hasFixedWingModes_; } else { return HasFixedWingModesDefaultValue; } }
      set {
        _hasBits1 |= 4;
        hasFixedWingModes_ = value;
      }
    }
    /// <summary>Gets whether the "HasFixedWingModes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasFixedWingModes {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "HasFixedWingModes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasFixedWingModes() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "RotorExpandState" field.</summary>
    public const int RotorExpandStateFieldNumber = 41;
    private readonly static global::MetaData.Proto_RotorFoldingStates RotorExpandStateDefaultValue = global::MetaData.Proto_RotorFoldingStates.RotorUnfolded;

    private global::MetaData.Proto_RotorFoldingStates rotorExpandState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_RotorFoldingStates RotorExpandState {
      get { if ((_hasBits1 & 8) != 0) { return rotorExpandState_; } else { return RotorExpandStateDefaultValue; } }
      set {
        _hasBits1 |= 8;
        rotorExpandState_ = value;
      }
    }
    /// <summary>Gets whether the "RotorExpandState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRotorExpandState {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "RotorExpandState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRotorExpandState() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "HasRetractableRotors" field.</summary>
    public const int HasRetractableRotorsFieldNumber = 42;
    private readonly static bool HasRetractableRotorsDefaultValue = false;

    private bool hasRetractableRotors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRetractableRotors {
      get { if ((_hasBits1 & 16) != 0) { return hasRetractableRotors_; } else { return HasRetractableRotorsDefaultValue; } }
      set {
        _hasBits1 |= 16;
        hasRetractableRotors_ = value;
      }
    }
    /// <summary>Gets whether the "HasRetractableRotors" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasRetractableRotors {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "HasRetractableRotors" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasRetractableRotors() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "IsAutoRetractLandingGear" field.</summary>
    public const int IsAutoRetractLandingGearFieldNumber = 43;
    private readonly static bool IsAutoRetractLandingGearDefaultValue = false;

    private bool isAutoRetractLandingGear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoRetractLandingGear {
      get { if ((_hasBits1 & 32) != 0) { return isAutoRetractLandingGear_; } else { return IsAutoRetractLandingGearDefaultValue; } }
      set {
        _hasBits1 |= 32;
        isAutoRetractLandingGear_ = value;
      }
    }
    /// <summary>Gets whether the "IsAutoRetractLandingGear" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoRetractLandingGear {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "IsAutoRetractLandingGear" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoRetractLandingGear() {
      _hasBits1 &= ~32;
    }

    /// <summary>Field number for the "IsLandingGearRetracted" field.</summary>
    public const int IsLandingGearRetractedFieldNumber = 44;
    private readonly static bool IsLandingGearRetractedDefaultValue = false;

    private bool isLandingGearRetracted_;
    /// <summary>
    /// 起落架是否收起。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLandingGearRetracted {
      get { if ((_hasBits1 & 64) != 0) { return isLandingGearRetracted_; } else { return IsLandingGearRetractedDefaultValue; } }
      set {
        _hasBits1 |= 64;
        isLandingGearRetracted_ = value;
      }
    }
    /// <summary>Gets whether the "IsLandingGearRetracted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLandingGearRetracted {
      get { return (_hasBits1 & 64) != 0; }
    }
    /// <summary>Clears the value of the "IsLandingGearRetracted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLandingGearRetracted() {
      _hasBits1 &= ~64;
    }

    /// <summary>Field number for the "RTKSolutionState" field.</summary>
    public const int RTKSolutionStateFieldNumber = 45;
    private readonly static global::MetaData.Proto_RTKSolutionState RTKSolutionStateDefaultValue = global::MetaData.Proto_RTKSolutionState.RtkFixedSolution;

    private global::MetaData.Proto_RTKSolutionState rTKSolutionState_;
    /// <summary>
    /// GNSS RTK差分定位状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_RTKSolutionState RTKSolutionState {
      get { if ((_hasBits1 & 128) != 0) { return rTKSolutionState_; } else { return RTKSolutionStateDefaultValue; } }
      set {
        _hasBits1 |= 128;
        rTKSolutionState_ = value;
      }
    }
    /// <summary>Gets whether the "RTKSolutionState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRTKSolutionState {
      get { return (_hasBits1 & 128) != 0; }
    }
    /// <summary>Clears the value of the "RTKSolutionState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRTKSolutionState() {
      _hasBits1 &= ~128;
    }

    /// <summary>Field number for the "LLA" field.</summary>
    public const int LLAFieldNumber = 46;
    private global::MetaData.Proto_LLA lLA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_LLA LLA {
      get { return lLA_; }
      set {
        lLA_ = value;
      }
    }

    /// <summary>Field number for the "EulerAnglesF" field.</summary>
    public const int EulerAnglesFFieldNumber = 47;
    private global::MetaData.Proto_EulerAnglesF eulerAnglesF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_EulerAnglesF EulerAnglesF {
      get { return eulerAnglesF_; }
      set {
        eulerAnglesF_ = value;
      }
    }

    /// <summary>Field number for the "TargetAltitude" field.</summary>
    public const int TargetAltitudeFieldNumber = 48;
    private readonly static double TargetAltitudeDefaultValue = 0D;

    private double targetAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TargetAltitude {
      get { if ((_hasBits1 & 256) != 0) { return targetAltitude_; } else { return TargetAltitudeDefaultValue; } }
      set {
        _hasBits1 |= 256;
        targetAltitude_ = value;
      }
    }
    /// <summary>Gets whether the "TargetAltitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetAltitude {
      get { return (_hasBits1 & 256) != 0; }
    }
    /// <summary>Clears the value of the "TargetAltitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetAltitude() {
      _hasBits1 &= ~256;
    }

    /// <summary>Field number for the "ReferenceAltitude" field.</summary>
    public const int ReferenceAltitudeFieldNumber = 49;
    private readonly static double ReferenceAltitudeDefaultValue = 0D;

    private double referenceAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ReferenceAltitude {
      get { if ((_hasBits1 & 512) != 0) { return referenceAltitude_; } else { return ReferenceAltitudeDefaultValue; } }
      set {
        _hasBits1 |= 512;
        referenceAltitude_ = value;
      }
    }
    /// <summary>Gets whether the "ReferenceAltitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReferenceAltitude {
      get { return (_hasBits1 & 512) != 0; }
    }
    /// <summary>Clears the value of the "ReferenceAltitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReferenceAltitude() {
      _hasBits1 &= ~512;
    }

    /// <summary>Field number for the "TrueAirSpeed" field.</summary>
    public const int TrueAirSpeedFieldNumber = 50;
    private readonly static float TrueAirSpeedDefaultValue = 0F;

    private float trueAirSpeed_;
    /// <summary>
    /// m/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TrueAirSpeed {
      get { if ((_hasBits1 & 1024) != 0) { return trueAirSpeed_; } else { return TrueAirSpeedDefaultValue; } }
      set {
        _hasBits1 |= 1024;
        trueAirSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "TrueAirSpeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTrueAirSpeed {
      get { return (_hasBits1 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "TrueAirSpeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTrueAirSpeed() {
      _hasBits1 &= ~1024;
    }

    /// <summary>Field number for the "Ground2DSpeed" field.</summary>
    public const int Ground2DSpeedFieldNumber = 51;
    private readonly static float Ground2DSpeedDefaultValue = 0F;

    private float ground2DSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ground2DSpeed {
      get { if ((_hasBits1 & 2048) != 0) { return ground2DSpeed_; } else { return Ground2DSpeedDefaultValue; } }
      set {
        _hasBits1 |= 2048;
        ground2DSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "Ground2DSpeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGround2DSpeed {
      get { return (_hasBits1 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "Ground2DSpeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGround2DSpeed() {
      _hasBits1 &= ~2048;
    }

    /// <summary>Field number for the "StraightDistToTakeOff" field.</summary>
    public const int StraightDistToTakeOffFieldNumber = 52;
    private readonly static float StraightDistToTakeOffDefaultValue = 0F;

    private float straightDistToTakeOff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StraightDistToTakeOff {
      get { if ((_hasBits1 & 4096) != 0) { return straightDistToTakeOff_; } else { return StraightDistToTakeOffDefaultValue; } }
      set {
        _hasBits1 |= 4096;
        straightDistToTakeOff_ = value;
      }
    }
    /// <summary>Gets whether the "StraightDistToTakeOff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStraightDistToTakeOff {
      get { return (_hasBits1 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "StraightDistToTakeOff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStraightDistToTakeOff() {
      _hasBits1 &= ~4096;
    }

    /// <summary>Field number for the "FlyDistance" field.</summary>
    public const int FlyDistanceFieldNumber = 53;
    private readonly static double FlyDistanceDefaultValue = 0D;

    private double flyDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FlyDistance {
      get { if ((_hasBits1 & 8192) != 0) { return flyDistance_; } else { return FlyDistanceDefaultValue; } }
      set {
        _hasBits1 |= 8192;
        flyDistance_ = value;
      }
    }
    /// <summary>Gets whether the "FlyDistance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlyDistance {
      get { return (_hasBits1 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "FlyDistance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlyDistance() {
      _hasBits1 &= ~8192;
    }

    /// <summary>Field number for the "FlySeconds" field.</summary>
    public const int FlySecondsFieldNumber = 54;
    private readonly static uint FlySecondsDefaultValue = 0;

    private uint flySeconds_;
    /// <summary>
    /// 飞行时间，单位秒。起飞时清零，降落后停止计数。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FlySeconds {
      get { if ((_hasBits1 & 16384) != 0) { return flySeconds_; } else { return FlySecondsDefaultValue; } }
      set {
        _hasBits1 |= 16384;
        flySeconds_ = value;
      }
    }
    /// <summary>Gets whether the "FlySeconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlySeconds {
      get { return (_hasBits1 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "FlySeconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlySeconds() {
      _hasBits1 &= ~16384;
    }

    /// <summary>Field number for the "HasEstimatedWind" field.</summary>
    public const int HasEstimatedWindFieldNumber = 55;
    private readonly static bool HasEstimatedWindDefaultValue = false;

    private bool hasEstimatedWind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEstimatedWind {
      get { if ((_hasBits1 & 32768) != 0) { return hasEstimatedWind_; } else { return HasEstimatedWindDefaultValue; } }
      set {
        _hasBits1 |= 32768;
        hasEstimatedWind_ = value;
      }
    }
    /// <summary>Gets whether the "HasEstimatedWind" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasEstimatedWind {
      get { return (_hasBits1 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "HasEstimatedWind" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasEstimatedWind() {
      _hasBits1 &= ~32768;
    }

    /// <summary>Field number for the "EstimatedWindAngle" field.</summary>
    public const int EstimatedWindAngleFieldNumber = 56;
    private readonly static double EstimatedWindAngleDefaultValue = 0D;

    private double estimatedWindAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EstimatedWindAngle {
      get { if ((_hasBits1 & 65536) != 0) { return estimatedWindAngle_; } else { return EstimatedWindAngleDefaultValue; } }
      set {
        _hasBits1 |= 65536;
        estimatedWindAngle_ = value;
      }
    }
    /// <summary>Gets whether the "EstimatedWindAngle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEstimatedWindAngle {
      get { return (_hasBits1 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "EstimatedWindAngle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEstimatedWindAngle() {
      _hasBits1 &= ~65536;
    }

    /// <summary>Field number for the "EstimatedWindSpeed" field.</summary>
    public const int EstimatedWindSpeedFieldNumber = 57;
    private readonly static double EstimatedWindSpeedDefaultValue = 0D;

    private double estimatedWindSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EstimatedWindSpeed {
      get { if ((_hasBits1 & 131072) != 0) { return estimatedWindSpeed_; } else { return EstimatedWindSpeedDefaultValue; } }
      set {
        _hasBits1 |= 131072;
        estimatedWindSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "EstimatedWindSpeed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEstimatedWindSpeed {
      get { return (_hasBits1 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "EstimatedWindSpeed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEstimatedWindSpeed() {
      _hasBits1 &= ~131072;
    }

    /// <summary>Field number for the "WriteCameraPosDataToFile" field.</summary>
    public const int WriteCameraPosDataToFileFieldNumber = 58;
    private readonly static bool WriteCameraPosDataToFileDefaultValue = false;

    private bool writeCameraPosDataToFile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WriteCameraPosDataToFile {
      get { if ((_hasBits1 & 262144) != 0) { return writeCameraPosDataToFile_; } else { return WriteCameraPosDataToFileDefaultValue; } }
      set {
        _hasBits1 |= 262144;
        writeCameraPosDataToFile_ = value;
      }
    }
    /// <summary>Gets whether the "WriteCameraPosDataToFile" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWriteCameraPosDataToFile {
      get { return (_hasBits1 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "WriteCameraPosDataToFile" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWriteCameraPosDataToFile() {
      _hasBits1 &= ~262144;
    }

    /// <summary>Field number for the "UndownloadedPosDataCount" field.</summary>
    public const int UndownloadedPosDataCountFieldNumber = 59;
    private readonly static uint UndownloadedPosDataCountDefaultValue = 0;

    private uint undownloadedPosDataCount_;
    /// <summary>
    ///uint16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UndownloadedPosDataCount {
      get { if ((_hasBits1 & 524288) != 0) { return undownloadedPosDataCount_; } else { return UndownloadedPosDataCountDefaultValue; } }
      set {
        _hasBits1 |= 524288;
        undownloadedPosDataCount_ = value;
      }
    }
    /// <summary>Gets whether the "UndownloadedPosDataCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUndownloadedPosDataCount {
      get { return (_hasBits1 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "UndownloadedPosDataCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUndownloadedPosDataCount() {
      _hasBits1 &= ~524288;
    }

    /// <summary>Field number for the "AverageRotorThrustRatioFor1G" field.</summary>
    public const int AverageRotorThrustRatioFor1GFieldNumber = 60;
    private readonly static float AverageRotorThrustRatioFor1GDefaultValue = 0F;

    private float averageRotorThrustRatioFor1G_;
    /// <summary>
    /// 1G过载时，旋翼总推力比例。值范围为[0,1]。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AverageRotorThrustRatioFor1G {
      get { if ((_hasBits1 & 1048576) != 0) { return averageRotorThrustRatioFor1G_; } else { return AverageRotorThrustRatioFor1GDefaultValue; } }
      set {
        _hasBits1 |= 1048576;
        averageRotorThrustRatioFor1G_ = value;
      }
    }
    /// <summary>Gets whether the "AverageRotorThrustRatioFor1G" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAverageRotorThrustRatioFor1G {
      get { return (_hasBits1 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "AverageRotorThrustRatioFor1G" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAverageRotorThrustRatioFor1G() {
      _hasBits1 &= ~1048576;
    }

    /// <summary>Field number for the "PlaneENUSpeed" field.</summary>
    public const int PlaneENUSpeedFieldNumber = 61;
    private global::MetaData.Proto_Vector3F planeENUSpeed_;
    /// <summary>
    /// 飞机在全局坐标系（ENU）中的速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_Vector3F PlaneENUSpeed {
      get { return planeENUSpeed_; }
      set {
        planeENUSpeed_ = value;
      }
    }

    /// <summary>Field number for the "IsGNSS2DAvailable" field.</summary>
    public const int IsGNSS2DAvailableFieldNumber = 62;
    private readonly static bool IsGNSS2DAvailableDefaultValue = false;

    private bool isGNSS2DAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGNSS2DAvailable {
      get { if ((_hasBits1 & 2097152) != 0) { return isGNSS2DAvailable_; } else { return IsGNSS2DAvailableDefaultValue; } }
      set {
        _hasBits1 |= 2097152;
        isGNSS2DAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "IsGNSS2DAvailable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsGNSS2DAvailable {
      get { return (_hasBits1 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "IsGNSS2DAvailable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsGNSS2DAvailable() {
      _hasBits1 &= ~2097152;
    }

    /// <summary>Field number for the "IsGNSSAltAvailable" field.</summary>
    public const int IsGNSSAltAvailableFieldNumber = 63;
    private readonly static bool IsGNSSAltAvailableDefaultValue = false;

    private bool isGNSSAltAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGNSSAltAvailable {
      get { if ((_hasBits1 & 4194304) != 0) { return isGNSSAltAvailable_; } else { return IsGNSSAltAvailableDefaultValue; } }
      set {
        _hasBits1 |= 4194304;
        isGNSSAltAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "IsGNSSAltAvailable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsGNSSAltAvailable {
      get { return (_hasBits1 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "IsGNSSAltAvailable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsGNSSAltAvailable() {
      _hasBits1 &= ~4194304;
    }

    /// <summary>Field number for the "UsingGnssSateNum" field.</summary>
    public const int UsingGnssSateNumFieldNumber = 64;
    private readonly static int UsingGnssSateNumDefaultValue = 0;

    private int usingGnssSateNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UsingGnssSateNum {
      get { if ((_hasBits1 & 8388608) != 0) { return usingGnssSateNum_; } else { return UsingGnssSateNumDefaultValue; } }
      set {
        _hasBits1 |= 8388608;
        usingGnssSateNum_ = value;
      }
    }
    /// <summary>Gets whether the "UsingGnssSateNum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUsingGnssSateNum {
      get { return (_hasBits1 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "UsingGnssSateNum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUsingGnssSateNum() {
      _hasBits1 &= ~8388608;
    }

    /// <summary>Field number for the "IsGNSSDataQualityGood" field.</summary>
    public const int IsGNSSDataQualityGoodFieldNumber = 65;
    private readonly static bool IsGNSSDataQualityGoodDefaultValue = false;

    private bool isGNSSDataQualityGood_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGNSSDataQualityGood {
      get { if ((_hasBits1 & 16777216) != 0) { return isGNSSDataQualityGood_; } else { return IsGNSSDataQualityGoodDefaultValue; } }
      set {
        _hasBits1 |= 16777216;
        isGNSSDataQualityGood_ = value;
      }
    }
    /// <summary>Gets whether the "IsGNSSDataQualityGood" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsGNSSDataQualityGood {
      get { return (_hasBits1 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "IsGNSSDataQualityGood" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsGNSSDataQualityGood() {
      _hasBits1 &= ~16777216;
    }

    /// <summary>Field number for the "GNSSsomeNotUsable" field.</summary>
    public const int GNSSsomeNotUsableFieldNumber = 66;
    private readonly static bool GNSSsomeNotUsableDefaultValue = false;

    private bool gNSSsomeNotUsable_;
    /// <summary>
    /// 检查是否有任何GNSS不可用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GNSSsomeNotUsable {
      get { if ((_hasBits1 & 33554432) != 0) { return gNSSsomeNotUsable_; } else { return GNSSsomeNotUsableDefaultValue; } }
      set {
        _hasBits1 |= 33554432;
        gNSSsomeNotUsable_ = value;
      }
    }
    /// <summary>Gets whether the "GNSSsomeNotUsable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGNSSsomeNotUsable {
      get { return (_hasBits1 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "GNSSsomeNotUsable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGNSSsomeNotUsable() {
      _hasBits1 &= ~33554432;
    }

    /// <summary>Field number for the "IsIRSReadyForTakeoff" field.</summary>
    public const int IsIRSReadyForTakeoffFieldNumber = 67;
    private readonly static bool IsIRSReadyForTakeoffDefaultValue = false;

    private bool isIRSReadyForTakeoff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsIRSReadyForTakeoff {
      get { if ((_hasBits1 & 67108864) != 0) { return isIRSReadyForTakeoff_; } else { return IsIRSReadyForTakeoffDefaultValue; } }
      set {
        _hasBits1 |= 67108864;
        isIRSReadyForTakeoff_ = value;
      }
    }
    /// <summary>Gets whether the "IsIRSReadyForTakeoff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsIRSReadyForTakeoff {
      get { return (_hasBits1 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "IsIRSReadyForTakeoff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsIRSReadyForTakeoff() {
      _hasBits1 &= ~67108864;
    }

    /// <summary>Field number for the "IsInSensorCalibrationMode" field.</summary>
    public const int IsInSensorCalibrationModeFieldNumber = 68;
    private readonly static bool IsInSensorCalibrationModeDefaultValue = false;

    private bool isInSensorCalibrationMode_;
    /// <summary>
    /// 惯导是否处在高漂移估算速度的模式。一般用来校准传感器。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInSensorCalibrationMode {
      get { if ((_hasBits1 & 134217728) != 0) { return isInSensorCalibrationMode_; } else { return IsInSensorCalibrationModeDefaultValue; } }
      set {
        _hasBits1 |= 134217728;
        isInSensorCalibrationMode_ = value;
      }
    }
    /// <summary>Gets whether the "IsInSensorCalibrationMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInSensorCalibrationMode {
      get { return (_hasBits1 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "IsInSensorCalibrationMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInSensorCalibrationMode() {
      _hasBits1 &= ~134217728;
    }

    /// <summary>Field number for the "IsInNoMagMode" field.</summary>
    public const int IsInNoMagModeFieldNumber = 69;
    private readonly static bool IsInNoMagModeDefaultValue = false;

    private bool isInNoMagMode_;
    /// <summary>
    /// 是否处在不使用磁传感器的模式。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInNoMagMode {
      get { if ((_hasBits1 & 268435456) != 0) { return isInNoMagMode_; } else { return IsInNoMagModeDefaultValue; } }
      set {
        _hasBits1 |= 268435456;
        isInNoMagMode_ = value;
      }
    }
    /// <summary>Gets whether the "IsInNoMagMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInNoMagMode {
      get { return (_hasBits1 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "IsInNoMagMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInNoMagMode() {
      _hasBits1 &= ~268435456;
    }

    /// <summary>Field number for the "IsUsingVisualPositionSystemForIRS" field.</summary>
    public const int IsUsingVisualPositionSystemForIRSFieldNumber = 70;
    private readonly static bool IsUsingVisualPositionSystemForIRSDefaultValue = false;

    private bool isUsingVisualPositionSystemForIRS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUsingVisualPositionSystemForIRS {
      get { if ((_hasBits1 & 536870912) != 0) { return isUsingVisualPositionSystemForIRS_; } else { return IsUsingVisualPositionSystemForIRSDefaultValue; } }
      set {
        _hasBits1 |= 536870912;
        isUsingVisualPositionSystemForIRS_ = value;
      }
    }
    /// <summary>Gets whether the "IsUsingVisualPositionSystemForIRS" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsUsingVisualPositionSystemForIRS {
      get { return (_hasBits1 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "IsUsingVisualPositionSystemForIRS" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsUsingVisualPositionSystemForIRS() {
      _hasBits1 &= ~536870912;
    }

    /// <summary>Field number for the "IsFlyTestParamsModified" field.</summary>
    public const int IsFlyTestParamsModifiedFieldNumber = 71;
    private readonly static bool IsFlyTestParamsModifiedDefaultValue = false;

    private bool isFlyTestParamsModified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFlyTestParamsModified {
      get { if ((_hasBits1 & 1073741824) != 0) { return isFlyTestParamsModified_; } else { return IsFlyTestParamsModifiedDefaultValue; } }
      set {
        _hasBits1 |= 1073741824;
        isFlyTestParamsModified_ = value;
      }
    }
    /// <summary>Gets whether the "IsFlyTestParamsModified" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsFlyTestParamsModified {
      get { return (_hasBits1 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "IsFlyTestParamsModified" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsFlyTestParamsModified() {
      _hasBits1 &= ~1073741824;
    }

    /// <summary>Field number for the "IsInAutoVertPortOperationMode" field.</summary>
    public const int IsInAutoVertPortOperationModeFieldNumber = 72;
    private readonly static bool IsInAutoVertPortOperationModeDefaultValue = false;

    private bool isInAutoVertPortOperationMode_;
    /// <summary>
    ///p4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInAutoVertPortOperationMode {
      get { if ((_hasBits1 & -2147483648) != 0) { return isInAutoVertPortOperationMode_; } else { return IsInAutoVertPortOperationModeDefaultValue; } }
      set {
        _hasBits1 |= -2147483648;
        isInAutoVertPortOperationMode_ = value;
      }
    }
    /// <summary>Gets whether the "IsInAutoVertPortOperationMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInAutoVertPortOperationMode {
      get { return (_hasBits1 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "IsInAutoVertPortOperationMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInAutoVertPortOperationMode() {
      _hasBits1 &= ~-2147483648;
    }

    /// <summary>Field number for the "IsAutoPortLandElseAlterLand" field.</summary>
    public const int IsAutoPortLandElseAlterLandFieldNumber = 73;
    private readonly static bool IsAutoPortLandElseAlterLandDefaultValue = false;

    private bool isAutoPortLandElseAlterLand_;
    /// <summary>
    /// 返回true表示将降落到自动机场，返回false表示将降落到备降机场。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAutoPortLandElseAlterLand {
      get { if ((_hasBits2 & 1) != 0) { return isAutoPortLandElseAlterLand_; } else { return IsAutoPortLandElseAlterLandDefaultValue; } }
      set {
        _hasBits2 |= 1;
        isAutoPortLandElseAlterLand_ = value;
      }
    }
    /// <summary>Gets whether the "IsAutoPortLandElseAlterLand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAutoPortLandElseAlterLand {
      get { return (_hasBits2 & 1) != 0; }
    }
    /// <summary>Clears the value of the "IsAutoPortLandElseAlterLand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAutoPortLandElseAlterLand() {
      _hasBits2 &= ~1;
    }

    /// <summary>Field number for the "IsVerticalLanding" field.</summary>
    public const int IsVerticalLandingFieldNumber = 74;
    private readonly static bool IsVerticalLandingDefaultValue = false;

    private bool isVerticalLanding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsVerticalLanding {
      get { if ((_hasBits2 & 2) != 0) { return isVerticalLanding_; } else { return IsVerticalLandingDefaultValue; } }
      set {
        _hasBits2 |= 2;
        isVerticalLanding_ = value;
      }
    }
    /// <summary>Gets whether the "IsVerticalLanding" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsVerticalLanding {
      get { return (_hasBits2 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsVerticalLanding" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsVerticalLanding() {
      _hasBits2 &= ~2;
    }

    /// <summary>Field number for the "IsInLandingConstDescentAndAlignPhase" field.</summary>
    public const int IsInLandingConstDescentAndAlignPhaseFieldNumber = 75;
    private readonly static bool IsInLandingConstDescentAndAlignPhaseDefaultValue = false;

    private bool isInLandingConstDescentAndAlignPhase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInLandingConstDescentAndAlignPhase {
      get { if ((_hasBits2 & 4) != 0) { return isInLandingConstDescentAndAlignPhase_; } else { return IsInLandingConstDescentAndAlignPhaseDefaultValue; } }
      set {
        _hasBits2 |= 4;
        isInLandingConstDescentAndAlignPhase_ = value;
      }
    }
    /// <summary>Gets whether the "IsInLandingConstDescentAndAlignPhase" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInLandingConstDescentAndAlignPhase {
      get { return (_hasBits2 & 4) != 0; }
    }
    /// <summary>Clears the value of the "IsInLandingConstDescentAndAlignPhase" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInLandingConstDescentAndAlignPhase() {
      _hasBits2 &= ~4;
    }

    /// <summary>Field number for the "IsVertLandPauseTouchDownForAlignment" field.</summary>
    public const int IsVertLandPauseTouchDownForAlignmentFieldNumber = 76;
    private readonly static bool IsVertLandPauseTouchDownForAlignmentDefaultValue = false;

    private bool isVertLandPauseTouchDownForAlignment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsVertLandPauseTouchDownForAlignment {
      get { if ((_hasBits2 & 8) != 0) { return isVertLandPauseTouchDownForAlignment_; } else { return IsVertLandPauseTouchDownForAlignmentDefaultValue; } }
      set {
        _hasBits2 |= 8;
        isVertLandPauseTouchDownForAlignment_ = value;
      }
    }
    /// <summary>Gets whether the "IsVertLandPauseTouchDownForAlignment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsVertLandPauseTouchDownForAlignment {
      get { return (_hasBits2 & 8) != 0; }
    }
    /// <summary>Clears the value of the "IsVertLandPauseTouchDownForAlignment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsVertLandPauseTouchDownForAlignment() {
      _hasBits2 &= ~8;
    }

    /// <summary>Field number for the "PrecisionLandMaxAllowableErrors" field.</summary>
    public const int PrecisionLandMaxAllowableErrorsFieldNumber = 77;
    private global::MetaData.Proto_PrecisionLandMaxAllowableErrors precisionLandMaxAllowableErrors_;
    /// <summary>
    /// 精准降落允许的最大误差。LandingError
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_PrecisionLandMaxAllowableErrors PrecisionLandMaxAllowableErrors {
      get { return precisionLandMaxAllowableErrors_; }
      set {
        precisionLandMaxAllowableErrors_ = value;
      }
    }

    /// <summary>Field number for the "LandingGlobal2DPosError" field.</summary>
    public const int LandingGlobal2DPosErrorFieldNumber = 78;
    private readonly static double LandingGlobal2DPosErrorDefaultValue = 0D;

    private double landingGlobal2DPosError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LandingGlobal2DPosError {
      get { if ((_hasBits2 & 16) != 0) { return landingGlobal2DPosError_; } else { return LandingGlobal2DPosErrorDefaultValue; } }
      set {
        _hasBits2 |= 16;
        landingGlobal2DPosError_ = value;
      }
    }
    /// <summary>Gets whether the "LandingGlobal2DPosError" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLandingGlobal2DPosError {
      get { return (_hasBits2 & 16) != 0; }
    }
    /// <summary>Clears the value of the "LandingGlobal2DPosError" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLandingGlobal2DPosError() {
      _hasBits2 &= ~16;
    }

    /// <summary>Field number for the "LandActiveYawAlign" field.</summary>
    public const int LandActiveYawAlignFieldNumber = 79;
    private readonly static bool LandActiveYawAlignDefaultValue = false;

    private bool landActiveYawAlign_;
    /// <summary>
    /// 在机场降落时，是否要通过主动的方式来进行偏航对齐。即飞机转动机头来对准机场。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LandActiveYawAlign {
      get { if ((_hasBits2 & 32) != 0) { return landActiveYawAlign_; } else { return LandActiveYawAlignDefaultValue; } }
      set {
        _hasBits2 |= 32;
        landActiveYawAlign_ = value;
      }
    }
    /// <summary>Gets whether the "LandActiveYawAlign" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLandActiveYawAlign {
      get { return (_hasBits2 & 32) != 0; }
    }
    /// <summary>Clears the value of the "LandActiveYawAlign" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLandActiveYawAlign() {
      _hasBits2 &= ~32;
    }

    /// <summary>Field number for the "LandPassiveYawAlign" field.</summary>
    public const int LandPassiveYawAlignFieldNumber = 80;
    private readonly static bool LandPassiveYawAlignDefaultValue = false;

    private bool landPassiveYawAlign_;
    /// <summary>
    /// 在机场降落时，是否要通过被动的方式进行偏航对齐。即机场转动来对准飞机。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LandPassiveYawAlign {
      get { if ((_hasBits2 & 64) != 0) { return landPassiveYawAlign_; } else { return LandPassiveYawAlignDefaultValue; } }
      set {
        _hasBits2 |= 64;
        landPassiveYawAlign_ = value;
      }
    }
    /// <summary>Gets whether the "LandPassiveYawAlign" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLandPassiveYawAlign {
      get { return (_hasBits2 & 64) != 0; }
    }
    /// <summary>Clears the value of the "LandPassiveYawAlign" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLandPassiveYawAlign() {
      _hasBits2 &= ~64;
    }

    /// <summary>Field number for the "PortTableHeadingAngle" field.</summary>
    public const int PortTableHeadingAngleFieldNumber = 81;
    private readonly static double PortTableHeadingAngleDefaultValue = 0D;

    private double portTableHeadingAngle_;
    /// <summary>
    ///  降落台的朝向[-PI,PI]。 向东为0，向北为PI/2。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PortTableHeadingAngle {
      get { if ((_hasBits2 & 128) != 0) { return portTableHeadingAngle_; } else { return PortTableHeadingAngleDefaultValue; } }
      set {
        _hasBits2 |= 128;
        portTableHeadingAngle_ = value;
      }
    }
    /// <summary>Gets whether the "PortTableHeadingAngle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPortTableHeadingAngle {
      get { return (_hasBits2 & 128) != 0; }
    }
    /// <summary>Clears the value of the "PortTableHeadingAngle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPortTableHeadingAngle() {
      _hasBits2 &= ~128;
    }

    /// <summary>Field number for the "YawAngleAlignError" field.</summary>
    public const int YawAngleAlignErrorFieldNumber = 82;
    private readonly static double YawAngleAlignErrorDefaultValue = 0D;

    private double yawAngleAlignError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double YawAngleAlignError {
      get { if ((_hasBits2 & 256) != 0) { return yawAngleAlignError_; } else { return YawAngleAlignErrorDefaultValue; } }
      set {
        _hasBits2 |= 256;
        yawAngleAlignError_ = value;
      }
    }
    /// <summary>Gets whether the "YawAngleAlignError" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYawAngleAlignError {
      get { return (_hasBits2 & 256) != 0; }
    }
    /// <summary>Clears the value of the "YawAngleAlignError" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYawAngleAlignError() {
      _hasBits2 &= ~256;
    }

    /// <summary>Field number for the "IsProtocolVersionConflict" field.</summary>
    public const int IsProtocolVersionConflictFieldNumber = 83;
    private readonly static bool IsProtocolVersionConflictDefaultValue = false;

    private bool isProtocolVersionConflict_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsProtocolVersionConflict {
      get { if ((_hasBits2 & 512) != 0) { return isProtocolVersionConflict_; } else { return IsProtocolVersionConflictDefaultValue; } }
      set {
        _hasBits2 |= 512;
        isProtocolVersionConflict_ = value;
      }
    }
    /// <summary>Gets whether the "IsProtocolVersionConflict" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsProtocolVersionConflict {
      get { return (_hasBits2 & 512) != 0; }
    }
    /// <summary>Clears the value of the "IsProtocolVersionConflict" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsProtocolVersionConflict() {
      _hasBits2 &= ~512;
    }

    /// <summary>Field number for the "CanEnterHighPosAccuRotorMode" field.</summary>
    public const int CanEnterHighPosAccuRotorModeFieldNumber = 84;
    private readonly static bool CanEnterHighPosAccuRotorModeDefaultValue = false;

    private bool canEnterHighPosAccuRotorMode_;
    /// <summary>
    /// 是否可以自动进入高精度悬停模式。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanEnterHighPosAccuRotorMode {
      get { if ((_hasBits2 & 1024) != 0) { return canEnterHighPosAccuRotorMode_; } else { return CanEnterHighPosAccuRotorModeDefaultValue; } }
      set {
        _hasBits2 |= 1024;
        canEnterHighPosAccuRotorMode_ = value;
      }
    }
    /// <summary>Gets whether the "CanEnterHighPosAccuRotorMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanEnterHighPosAccuRotorMode {
      get { return (_hasBits2 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "CanEnterHighPosAccuRotorMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanEnterHighPosAccuRotorMode() {
      _hasBits2 &= ~1024;
    }

    /// <summary>Field number for the "ServerErrorsHasMessage" field.</summary>
    public const int ServerErrorsHasMessageFieldNumber = 85;
    private readonly static bool ServerErrorsHasMessageDefaultValue = false;

    private bool serverErrorsHasMessage_;
    /// <summary>
    /// 地面站软件错误列表是否有错误信息。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ServerErrorsHasMessage {
      get { if ((_hasBits2 & 2048) != 0) { return serverErrorsHasMessage_; } else { return ServerErrorsHasMessageDefaultValue; } }
      set {
        _hasBits2 |= 2048;
        serverErrorsHasMessage_ = value;
      }
    }
    /// <summary>Gets whether the "ServerErrorsHasMessage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasServerErrorsHasMessage {
      get { return (_hasBits2 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "ServerErrorsHasMessage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearServerErrorsHasMessage() {
      _hasBits2 &= ~2048;
    }

    /// <summary>Field number for the "ReceivedAircraftMessagesErrorCount" field.</summary>
    public const int ReceivedAircraftMessagesErrorCountFieldNumber = 86;
    private readonly static int ReceivedAircraftMessagesErrorCountDefaultValue = 0;

    private int receivedAircraftMessagesErrorCount_;
    /// <summary>
    /// 从飞机收到的消息。包含信息、警告和错误。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReceivedAircraftMessagesErrorCount {
      get { if ((_hasBits2 & 4096) != 0) { return receivedAircraftMessagesErrorCount_; } else { return ReceivedAircraftMessagesErrorCountDefaultValue; } }
      set {
        _hasBits2 |= 4096;
        receivedAircraftMessagesErrorCount_ = value;
      }
    }
    /// <summary>Gets whether the "ReceivedAircraftMessagesErrorCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReceivedAircraftMessagesErrorCount {
      get { return (_hasBits2 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "ReceivedAircraftMessagesErrorCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReceivedAircraftMessagesErrorCount() {
      _hasBits2 &= ~4096;
    }

    /// <summary>Field number for the "ReceivedAircraftMessagesWarningCount" field.</summary>
    public const int ReceivedAircraftMessagesWarningCountFieldNumber = 87;
    private readonly static int ReceivedAircraftMessagesWarningCountDefaultValue = 0;

    private int receivedAircraftMessagesWarningCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReceivedAircraftMessagesWarningCount {
      get { if ((_hasBits2 & 8192) != 0) { return receivedAircraftMessagesWarningCount_; } else { return ReceivedAircraftMessagesWarningCountDefaultValue; } }
      set {
        _hasBits2 |= 8192;
        receivedAircraftMessagesWarningCount_ = value;
      }
    }
    /// <summary>Gets whether the "ReceivedAircraftMessagesWarningCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReceivedAircraftMessagesWarningCount {
      get { return (_hasBits2 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "ReceivedAircraftMessagesWarningCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReceivedAircraftMessagesWarningCount() {
      _hasBits2 &= ~8192;
    }

    /// <summary>Field number for the "IsInEngineerMode" field.</summary>
    public const int IsInEngineerModeFieldNumber = 88;
    private readonly static bool IsInEngineerModeDefaultValue = false;

    private bool isInEngineerMode_;
    /// <summary>
    /// 是否在工程师模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInEngineerMode {
      get { if ((_hasBits2 & 16384) != 0) { return isInEngineerMode_; } else { return IsInEngineerModeDefaultValue; } }
      set {
        _hasBits2 |= 16384;
        isInEngineerMode_ = value;
      }
    }
    /// <summary>Gets whether the "IsInEngineerMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInEngineerMode {
      get { return (_hasBits2 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "IsInEngineerMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInEngineerMode() {
      _hasBits2 &= ~16384;
    }

    /// <summary>Field number for the "IsLowNzProtectionActivated" field.</summary>
    public const int IsLowNzProtectionActivatedFieldNumber = 89;
    private readonly static bool IsLowNzProtectionActivatedDefaultValue = false;

    private bool isLowNzProtectionActivated_;
    /// <summary>
    /// 固定翼巡航时，低过载保护是否激活，即是否通过抬头来提高过载。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLowNzProtectionActivated {
      get { if ((_hasBits2 & 32768) != 0) { return isLowNzProtectionActivated_; } else { return IsLowNzProtectionActivatedDefaultValue; } }
      set {
        _hasBits2 |= 32768;
        isLowNzProtectionActivated_ = value;
      }
    }
    /// <summary>Gets whether the "IsLowNzProtectionActivated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLowNzProtectionActivated {
      get { return (_hasBits2 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "IsLowNzProtectionActivated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLowNzProtectionActivated() {
      _hasBits2 &= ~32768;
    }

    /// <summary>Field number for the "IsHighAoAProtectionActivated" field.</summary>
    public const int IsHighAoAProtectionActivatedFieldNumber = 90;
    private readonly static bool IsHighAoAProtectionActivatedDefaultValue = false;

    private bool isHighAoAProtectionActivated_;
    /// <summary>
    /// 固定翼巡航时，大迎角保护是否激活，即是否限制迎角继续增大。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsHighAoAProtectionActivated {
      get { if ((_hasBits2 & 65536) != 0) { return isHighAoAProtectionActivated_; } else { return IsHighAoAProtectionActivatedDefaultValue; } }
      set {
        _hasBits2 |= 65536;
        isHighAoAProtectionActivated_ = value;
      }
    }
    /// <summary>Gets whether the "IsHighAoAProtectionActivated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsHighAoAProtectionActivated {
      get { return (_hasBits2 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "IsHighAoAProtectionActivated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsHighAoAProtectionActivated() {
      _hasBits2 &= ~65536;
    }

    /// <summary>Field number for the "IsHighStructNzProtectionActivated" field.</summary>
    public const int IsHighStructNzProtectionActivatedFieldNumber = 91;
    private readonly static bool IsHighStructNzProtectionActivatedDefaultValue = false;

    private bool isHighStructNzProtectionActivated_;
    /// <summary>
    /// 固定翼巡航时，结构大过载保护是否激活，即是否通过低头来降低过载，以保护机体结构不受破坏。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsHighStructNzProtectionActivated {
      get { if ((_hasBits2 & 131072) != 0) { return isHighStructNzProtectionActivated_; } else { return IsHighStructNzProtectionActivatedDefaultValue; } }
      set {
        _hasBits2 |= 131072;
        isHighStructNzProtectionActivated_ = value;
      }
    }
    /// <summary>Gets whether the "IsHighStructNzProtectionActivated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsHighStructNzProtectionActivated {
      get { return (_hasBits2 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "IsHighStructNzProtectionActivated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsHighStructNzProtectionActivated() {
      _hasBits2 &= ~131072;
    }

    /// <summary>Field number for the "IsLowSpeedPSPActivated" field.</summary>
    public const int IsLowSpeedPSPActivatedFieldNumber = 92;
    private readonly static bool IsLowSpeedPSPActivatedDefaultValue = false;

    private bool isLowSpeedPSPActivated_;
    /// <summary>
    /// 固定翼巡航时，俯仰低速保护是否激活，即是否通过低头来提高速度。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLowSpeedPSPActivated {
      get { if ((_hasBits2 & 262144) != 0) { return isLowSpeedPSPActivated_; } else { return IsLowSpeedPSPActivatedDefaultValue; } }
      set {
        _hasBits2 |= 262144;
        isLowSpeedPSPActivated_ = value;
      }
    }
    /// <summary>Gets whether the "IsLowSpeedPSPActivated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLowSpeedPSPActivated {
      get { return (_hasBits2 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "IsLowSpeedPSPActivated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLowSpeedPSPActivated() {
      _hasBits2 &= ~262144;
    }

    /// <summary>Field number for the "IsHighSpeedPSPActivated" field.</summary>
    public const int IsHighSpeedPSPActivatedFieldNumber = 93;
    private readonly static bool IsHighSpeedPSPActivatedDefaultValue = false;

    private bool isHighSpeedPSPActivated_;
    /// <summary>
    /// 固定翼巡航时，俯仰高速保护是否激活，即是否通过抬头来提高速度。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsHighSpeedPSPActivated {
      get { if ((_hasBits2 & 524288) != 0) { return isHighSpeedPSPActivated_; } else { return IsHighSpeedPSPActivatedDefaultValue; } }
      set {
        _hasBits2 |= 524288;
        isHighSpeedPSPActivated_ = value;
      }
    }
    /// <summary>Gets whether the "IsHighSpeedPSPActivated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsHighSpeedPSPActivated {
      get { return (_hasBits2 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "IsHighSpeedPSPActivated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsHighSpeedPSPActivated() {
      _hasBits2 &= ~524288;
    }

    /// <summary>Field number for the "IsAltitudeDropFloorActivated" field.</summary>
    public const int IsAltitudeDropFloorActivatedFieldNumber = 94;
    private readonly static bool IsAltitudeDropFloorActivatedDefaultValue = false;

    private bool isAltitudeDropFloorActivated_;
    /// <summary>
    /// 负向高度偏离平台保护是否激活。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAltitudeDropFloorActivated {
      get { if ((_hasBits2 & 1048576) != 0) { return isAltitudeDropFloorActivated_; } else { return IsAltitudeDropFloorActivatedDefaultValue; } }
      set {
        _hasBits2 |= 1048576;
        isAltitudeDropFloorActivated_ = value;
      }
    }
    /// <summary>Gets whether the "IsAltitudeDropFloorActivated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAltitudeDropFloorActivated {
      get { return (_hasBits2 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "IsAltitudeDropFloorActivated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAltitudeDropFloorActivated() {
      _hasBits2 &= ~1048576;
    }

    /// <summary>Field number for the "IsAltitudeRiseCeilingActivated" field.</summary>
    public const int IsAltitudeRiseCeilingActivatedFieldNumber = 95;
    private readonly static bool IsAltitudeRiseCeilingActivatedDefaultValue = false;

    private bool isAltitudeRiseCeilingActivated_;
    /// <summary>
    /// 正向高度偏离平台保护是否激活。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAltitudeRiseCeilingActivated {
      get { if ((_hasBits2 & 2097152) != 0) { return isAltitudeRiseCeilingActivated_; } else { return IsAltitudeRiseCeilingActivatedDefaultValue; } }
      set {
        _hasBits2 |= 2097152;
        isAltitudeRiseCeilingActivated_ = value;
      }
    }
    /// <summary>Gets whether the "IsAltitudeRiseCeilingActivated" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAltitudeRiseCeilingActivated {
      get { return (_hasBits2 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "IsAltitudeRiseCeilingActivated" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAltitudeRiseCeilingActivated() {
      _hasBits2 &= ~2097152;
    }

    /// <summary>Field number for the "AltitudeDeviation" field.</summary>
    public const int AltitudeDeviationFieldNumber = 96;
    private readonly static float AltitudeDeviationDefaultValue = 0F;

    private float altitudeDeviation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AltitudeDeviation {
      get { if ((_hasBits2 & 4194304) != 0) { return altitudeDeviation_; } else { return AltitudeDeviationDefaultValue; } }
      set {
        _hasBits2 |= 4194304;
        altitudeDeviation_ = value;
      }
    }
    /// <summary>Gets whether the "AltitudeDeviation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAltitudeDeviation {
      get { return (_hasBits2 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "AltitudeDeviation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAltitudeDeviation() {
      _hasBits2 &= ~4194304;
    }

    /// <summary>Field number for the "IsAltitudeDeviationHigh" field.</summary>
    public const int IsAltitudeDeviationHighFieldNumber = 97;
    private readonly static bool IsAltitudeDeviationHighDefaultValue = false;

    private bool isAltitudeDeviationHigh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAltitudeDeviationHigh {
      get { if ((_hasBits2 & 8388608) != 0) { return isAltitudeDeviationHigh_; } else { return IsAltitudeDeviationHighDefaultValue; } }
      set {
        _hasBits2 |= 8388608;
        isAltitudeDeviationHigh_ = value;
      }
    }
    /// <summary>Gets whether the "IsAltitudeDeviationHigh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAltitudeDeviationHigh {
      get { return (_hasBits2 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "IsAltitudeDeviationHigh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAltitudeDeviationHigh() {
      _hasBits2 &= ~8388608;
    }

    /// <summary>Field number for the "IsAltitudeDeviationLow" field.</summary>
    public const int IsAltitudeDeviationLowFieldNumber = 98;
    private readonly static bool IsAltitudeDeviationLowDefaultValue = false;

    private bool isAltitudeDeviationLow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAltitudeDeviationLow {
      get { if ((_hasBits2 & 16777216) != 0) { return isAltitudeDeviationLow_; } else { return IsAltitudeDeviationLowDefaultValue; } }
      set {
        _hasBits2 |= 16777216;
        isAltitudeDeviationLow_ = value;
      }
    }
    /// <summary>Gets whether the "IsAltitudeDeviationLow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAltitudeDeviationLow {
      get { return (_hasBits2 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "IsAltitudeDeviationLow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAltitudeDeviationLow() {
      _hasBits2 &= ~16777216;
    }

    /// <summary>Field number for the "IsRollLostControl" field.</summary>
    public const int IsRollLostControlFieldNumber = 99;
    private readonly static bool IsRollLostControlDefaultValue = false;

    private bool isRollLostControl_;
    /// <summary>
    /// 滚转是否失控。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRollLostControl {
      get { if ((_hasBits2 & 33554432) != 0) { return isRollLostControl_; } else { return IsRollLostControlDefaultValue; } }
      set {
        _hasBits2 |= 33554432;
        isRollLostControl_ = value;
      }
    }
    /// <summary>Gets whether the "IsRollLostControl" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRollLostControl {
      get { return (_hasBits2 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "IsRollLostControl" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRollLostControl() {
      _hasBits2 &= ~33554432;
    }

    /// <summary>Field number for the "IsPitchLostControl" field.</summary>
    public const int IsPitchLostControlFieldNumber = 100;
    private readonly static bool IsPitchLostControlDefaultValue = false;

    private bool isPitchLostControl_;
    /// <summary>
    /// 俯仰是否失控。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPitchLostControl {
      get { if ((_hasBits2 & 67108864) != 0) { return isPitchLostControl_; } else { return IsPitchLostControlDefaultValue; } }
      set {
        _hasBits2 |= 67108864;
        isPitchLostControl_ = value;
      }
    }
    /// <summary>Gets whether the "IsPitchLostControl" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPitchLostControl {
      get { return (_hasBits2 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "IsPitchLostControl" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPitchLostControl() {
      _hasBits2 &= ~67108864;
    }

    /// <summary>Field number for the "EmergencyLandBecauseBatteryLow" field.</summary>
    public const int EmergencyLandBecauseBatteryLowFieldNumber = 101;
    private readonly static bool EmergencyLandBecauseBatteryLowDefaultValue = false;

    private bool emergencyLandBecauseBatteryLow_;
    /// <summary>
    /// 是否触发了低电量返航。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EmergencyLandBecauseBatteryLow {
      get { if ((_hasBits2 & 134217728) != 0) { return emergencyLandBecauseBatteryLow_; } else { return EmergencyLandBecauseBatteryLowDefaultValue; } }
      set {
        _hasBits2 |= 134217728;
        emergencyLandBecauseBatteryLow_ = value;
      }
    }
    /// <summary>Gets whether the "EmergencyLandBecauseBatteryLow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEmergencyLandBecauseBatteryLow {
      get { return (_hasBits2 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "EmergencyLandBecauseBatteryLow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEmergencyLandBecauseBatteryLow() {
      _hasBits2 &= ~134217728;
    }

    /// <summary>Field number for the "EmergencyLandBecauseFlyTimeHigh" field.</summary>
    public const int EmergencyLandBecauseFlyTimeHighFieldNumber = 102;
    private readonly static bool EmergencyLandBecauseFlyTimeHighDefaultValue = false;

    private bool emergencyLandBecauseFlyTimeHigh_;
    /// <summary>
    /// 是否触发了单次飞行时长过高返航。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EmergencyLandBecauseFlyTimeHigh {
      get { if ((_hasBits2 & 268435456) != 0) { return emergencyLandBecauseFlyTimeHigh_; } else { return EmergencyLandBecauseFlyTimeHighDefaultValue; } }
      set {
        _hasBits2 |= 268435456;
        emergencyLandBecauseFlyTimeHigh_ = value;
      }
    }
    /// <summary>Gets whether the "EmergencyLandBecauseFlyTimeHigh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEmergencyLandBecauseFlyTimeHigh {
      get { return (_hasBits2 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "EmergencyLandBecauseFlyTimeHigh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEmergencyLandBecauseFlyTimeHigh() {
      _hasBits2 &= ~268435456;
    }

    /// <summary>Field number for the "IsRejectingTakeOff" field.</summary>
    public const int IsRejectingTakeOffFieldNumber = 103;
    private readonly static bool IsRejectingTakeOffDefaultValue = false;

    private bool isRejectingTakeOff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRejectingTakeOff {
      get { if ((_hasBits2 & 536870912) != 0) { return isRejectingTakeOff_; } else { return IsRejectingTakeOffDefaultValue; } }
      set {
        _hasBits2 |= 536870912;
        isRejectingTakeOff_ = value;
      }
    }
    /// <summary>Gets whether the "IsRejectingTakeOff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRejectingTakeOff {
      get { return (_hasBits2 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "IsRejectingTakeOff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRejectingTakeOff() {
      _hasBits2 &= ~536870912;
    }

    /// <summary>Field number for the "GyroHFRMSDPS" field.</summary>
    public const int GyroHFRMSDPSFieldNumber = 104;
    private global::MetaData.Proto_GyroHFRMSDPS gyroHFRMSDPS_;
    /// <summary>
    /// °/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_GyroHFRMSDPS GyroHFRMSDPS {
      get { return gyroHFRMSDPS_; }
      set {
        gyroHFRMSDPS_ = value;
      }
    }

    /// <summary>Field number for the "IsLogFileAlmostFull" field.</summary>
    public const int IsLogFileAlmostFullFieldNumber = 105;
    private readonly static bool IsLogFileAlmostFullDefaultValue = false;

    private bool isLogFileAlmostFull_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLogFileAlmostFull {
      get { if ((_hasBits2 & 1073741824) != 0) { return isLogFileAlmostFull_; } else { return IsLogFileAlmostFullDefaultValue; } }
      set {
        _hasBits2 |= 1073741824;
        isLogFileAlmostFull_ = value;
      }
    }
    /// <summary>Gets whether the "IsLogFileAlmostFull" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLogFileAlmostFull {
      get { return (_hasBits2 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "IsLogFileAlmostFull" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLogFileAlmostFull() {
      _hasBits2 &= ~1073741824;
    }

    /// <summary>Field number for the "EnableOnGndFastFileTransmit" field.</summary>
    public const int EnableOnGndFastFileTransmitFieldNumber = 106;
    private readonly static bool EnableOnGndFastFileTransmitDefaultValue = false;

    private bool enableOnGndFastFileTransmit_;
    /// <summary>
    /// 在地面的时候，是否开启快速文件传输模式。通常需要线直连飞机才能使用这种模式。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableOnGndFastFileTransmit {
      get { if ((_hasBits2 & -2147483648) != 0) { return enableOnGndFastFileTransmit_; } else { return EnableOnGndFastFileTransmitDefaultValue; } }
      set {
        _hasBits2 |= -2147483648;
        enableOnGndFastFileTransmit_ = value;
      }
    }
    /// <summary>Gets whether the "EnableOnGndFastFileTransmit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnableOnGndFastFileTransmit {
      get { return (_hasBits2 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "EnableOnGndFastFileTransmit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnableOnGndFastFileTransmit() {
      _hasBits2 &= ~-2147483648;
    }

    /// <summary>Field number for the "MinimumRemainRatio" field.</summary>
    public const int MinimumRemainRatioFieldNumber = 107;
    private readonly static double MinimumRemainRatioDefaultValue = 0D;

    private double minimumRemainRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinimumRemainRatio {
      get { if ((_hasBits3 & 1) != 0) { return minimumRemainRatio_; } else { return MinimumRemainRatioDefaultValue; } }
      set {
        _hasBits3 |= 1;
        minimumRemainRatio_ = value;
      }
    }
    /// <summary>Gets whether the "MinimumRemainRatio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinimumRemainRatio {
      get { return (_hasBits3 & 1) != 0; }
    }
    /// <summary>Clears the value of the "MinimumRemainRatio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinimumRemainRatio() {
      _hasBits3 &= ~1;
    }

    /// <summary>Field number for the "WarningRemainRatio" field.</summary>
    public const int WarningRemainRatioFieldNumber = 108;
    private readonly static double WarningRemainRatioDefaultValue = 0D;

    private double warningRemainRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WarningRemainRatio {
      get { if ((_hasBits3 & 2) != 0) { return warningRemainRatio_; } else { return WarningRemainRatioDefaultValue; } }
      set {
        _hasBits3 |= 2;
        warningRemainRatio_ = value;
      }
    }
    /// <summary>Gets whether the "WarningRemainRatio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWarningRemainRatio {
      get { return (_hasBits3 & 2) != 0; }
    }
    /// <summary>Clears the value of the "WarningRemainRatio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWarningRemainRatio() {
      _hasBits3 &= ~2;
    }

    /// <summary>Field number for the "DateTimeNow" field.</summary>
    public const int DateTimeNowFieldNumber = 109;
    private readonly static long DateTimeNowDefaultValue = 0L;

    private long dateTimeNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DateTimeNow {
      get { if ((_hasBits3 & 4) != 0) { return dateTimeNow_; } else { return DateTimeNowDefaultValue; } }
      set {
        _hasBits3 |= 4;
        dateTimeNow_ = value;
      }
    }
    /// <summary>Gets whether the "DateTimeNow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDateTimeNow {
      get { return (_hasBits3 & 4) != 0; }
    }
    /// <summary>Clears the value of the "DateTimeNow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDateTimeNow() {
      _hasBits3 &= ~4;
    }

    /// <summary>Field number for the "DebugCurveLastReceiveTime" field.</summary>
    public const int DebugCurveLastReceiveTimeFieldNumber = 110;
    private readonly static long DebugCurveLastReceiveTimeDefaultValue = 0L;

    private long debugCurveLastReceiveTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DebugCurveLastReceiveTime {
      get { if ((_hasBits3 & 8) != 0) { return debugCurveLastReceiveTime_; } else { return DebugCurveLastReceiveTimeDefaultValue; } }
      set {
        _hasBits3 |= 8;
        debugCurveLastReceiveTime_ = value;
      }
    }
    /// <summary>Gets whether the "DebugCurveLastReceiveTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDebugCurveLastReceiveTime {
      get { return (_hasBits3 & 8) != 0; }
    }
    /// <summary>Clears the value of the "DebugCurveLastReceiveTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDebugCurveLastReceiveTime() {
      _hasBits3 &= ~8;
    }

    /// <summary>Field number for the "LastReceivingGNSSRawDataTime" field.</summary>
    public const int LastReceivingGNSSRawDataTimeFieldNumber = 111;
    private readonly static long LastReceivingGNSSRawDataTimeDefaultValue = 0L;

    private long lastReceivingGNSSRawDataTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LastReceivingGNSSRawDataTime {
      get { if ((_hasBits3 & 16) != 0) { return lastReceivingGNSSRawDataTime_; } else { return LastReceivingGNSSRawDataTimeDefaultValue; } }
      set {
        _hasBits3 |= 16;
        lastReceivingGNSSRawDataTime_ = value;
      }
    }
    /// <summary>Gets whether the "LastReceivingGNSSRawDataTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastReceivingGNSSRawDataTime {
      get { return (_hasBits3 & 16) != 0; }
    }
    /// <summary>Clears the value of the "LastReceivingGNSSRawDataTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastReceivingGNSSRawDataTime() {
      _hasBits3 &= ~16;
    }

    /// <summary>Field number for the "AllGNSSRawDataCounter" field.</summary>
    public const int AllGNSSRawDataCounterFieldNumber = 112;
    private readonly static ulong AllGNSSRawDataCounterDefaultValue = 0UL;

    private ulong allGNSSRawDataCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong AllGNSSRawDataCounter {
      get { if ((_hasBits3 & 32) != 0) { return allGNSSRawDataCounter_; } else { return AllGNSSRawDataCounterDefaultValue; } }
      set {
        _hasBits3 |= 32;
        allGNSSRawDataCounter_ = value;
      }
    }
    /// <summary>Gets whether the "AllGNSSRawDataCounter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllGNSSRawDataCounter {
      get { return (_hasBits3 & 32) != 0; }
    }
    /// <summary>Clears the value of the "AllGNSSRawDataCounter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllGNSSRawDataCounter() {
      _hasBits3 &= ~32;
    }

    /// <summary>Field number for the "IsRequestOpenOnboardLog" field.</summary>
    public const int IsRequestOpenOnboardLogFieldNumber = 113;
    private readonly static bool IsRequestOpenOnboardLogDefaultValue = false;

    private bool isRequestOpenOnboardLog_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRequestOpenOnboardLog {
      get { if ((_hasBits3 & 64) != 0) { return isRequestOpenOnboardLog_; } else { return IsRequestOpenOnboardLogDefaultValue; } }
      set {
        _hasBits3 |= 64;
        isRequestOpenOnboardLog_ = value;
      }
    }
    /// <summary>Gets whether the "IsRequestOpenOnboardLog" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRequestOpenOnboardLog {
      get { return (_hasBits3 & 64) != 0; }
    }
    /// <summary>Clears the value of the "IsRequestOpenOnboardLog" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRequestOpenOnboardLog() {
      _hasBits3 &= ~64;
    }

    /// <summary>Field number for the "IsOnboardLogOpen" field.</summary>
    public const int IsOnboardLogOpenFieldNumber = 114;
    private readonly static bool IsOnboardLogOpenDefaultValue = false;

    private bool isOnboardLogOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOnboardLogOpen {
      get { if ((_hasBits3 & 128) != 0) { return isOnboardLogOpen_; } else { return IsOnboardLogOpenDefaultValue; } }
      set {
        _hasBits3 |= 128;
        isOnboardLogOpen_ = value;
      }
    }
    /// <summary>Gets whether the "IsOnboardLogOpen" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsOnboardLogOpen {
      get { return (_hasBits3 & 128) != 0; }
    }
    /// <summary>Clears the value of the "IsOnboardLogOpen" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsOnboardLogOpen() {
      _hasBits3 &= ~128;
    }

    /// <summary>Field number for the "IsWingCruiseHasFailed" field.</summary>
    public const int IsWingCruiseHasFailedFieldNumber = 115;
    private readonly static bool IsWingCruiseHasFailedDefaultValue = false;

    private bool isWingCruiseHasFailed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsWingCruiseHasFailed {
      get { if ((_hasBits3 & 256) != 0) { return isWingCruiseHasFailed_; } else { return IsWingCruiseHasFailedDefaultValue; } }
      set {
        _hasBits3 |= 256;
        isWingCruiseHasFailed_ = value;
      }
    }
    /// <summary>Gets whether the "IsWingCruiseHasFailed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsWingCruiseHasFailed {
      get { return (_hasBits3 & 256) != 0; }
    }
    /// <summary>Clears the value of the "IsWingCruiseHasFailed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsWingCruiseHasFailed() {
      _hasBits3 &= ~256;
    }

    /// <summary>Field number for the "IsEmergencyLand" field.</summary>
    public const int IsEmergencyLandFieldNumber = 116;
    private readonly static bool IsEmergencyLandDefaultValue = false;

    private bool isEmergencyLand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEmergencyLand {
      get { if ((_hasBits3 & 512) != 0) { return isEmergencyLand_; } else { return IsEmergencyLandDefaultValue; } }
      set {
        _hasBits3 |= 512;
        isEmergencyLand_ = value;
      }
    }
    /// <summary>Gets whether the "IsEmergencyLand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEmergencyLand {
      get { return (_hasBits3 & 512) != 0; }
    }
    /// <summary>Clears the value of the "IsEmergencyLand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEmergencyLand() {
      _hasBits3 &= ~512;
    }

    /// <summary>Field number for the "IsEmergencyLandRequested" field.</summary>
    public const int IsEmergencyLandRequestedFieldNumber = 117;
    private readonly static bool IsEmergencyLandRequestedDefaultValue = false;

    private bool isEmergencyLandRequested_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEmergencyLandRequested {
      get { if ((_hasBits3 & 1024) != 0) { return isEmergencyLandRequested_; } else { return IsEmergencyLandRequestedDefaultValue; } }
      set {
        _hasBits3 |= 1024;
        isEmergencyLandRequested_ = value;
      }
    }
    /// <summary>Gets whether the "IsEmergencyLandRequested" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsEmergencyLandRequested {
      get { return (_hasBits3 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "IsEmergencyLandRequested" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsEmergencyLandRequested() {
      _hasBits3 &= ~1024;
    }

    /// <summary>Field number for the "DisableEmergencyAutoLand" field.</summary>
    public const int DisableEmergencyAutoLandFieldNumber = 118;
    private readonly static bool DisableEmergencyAutoLandDefaultValue = false;

    private bool disableEmergencyAutoLand_;
    /// <summary>
    /// 是否禁用紧急情况下自动降落功能。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableEmergencyAutoLand {
      get { if ((_hasBits3 & 2048) != 0) { return disableEmergencyAutoLand_; } else { return DisableEmergencyAutoLandDefaultValue; } }
      set {
        _hasBits3 |= 2048;
        disableEmergencyAutoLand_ = value;
      }
    }
    /// <summary>Gets whether the "DisableEmergencyAutoLand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisableEmergencyAutoLand {
      get { return (_hasBits3 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "DisableEmergencyAutoLand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisableEmergencyAutoLand() {
      _hasBits3 &= ~2048;
    }

    /// <summary>Field number for the "EnableGroundDistLowWarning" field.</summary>
    public const int EnableGroundDistLowWarningFieldNumber = 119;
    private readonly static bool EnableGroundDistLowWarningDefaultValue = false;

    private bool enableGroundDistLowWarning_;
    /// <summary>
    /// 是否启用低地面高度报警。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableGroundDistLowWarning {
      get { if ((_hasBits3 & 4096) != 0) { return enableGroundDistLowWarning_; } else { return EnableGroundDistLowWarningDefaultValue; } }
      set {
        _hasBits3 |= 4096;
        enableGroundDistLowWarning_ = value;
      }
    }
    /// <summary>Gets whether the "EnableGroundDistLowWarning" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnableGroundDistLowWarning {
      get { return (_hasBits3 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "EnableGroundDistLowWarning" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnableGroundDistLowWarning() {
      _hasBits3 &= ~4096;
    }

    /// <summary>Field number for the "IsLowGndDistWarning" field.</summary>
    public const int IsLowGndDistWarningFieldNumber = 120;
    private readonly static bool IsLowGndDistWarningDefaultValue = false;

    private bool isLowGndDistWarning_;
    /// <summary>
    /// 是否触发了距离地面高度过低警告。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLowGndDistWarning {
      get { if ((_hasBits3 & 8192) != 0) { return isLowGndDistWarning_; } else { return IsLowGndDistWarningDefaultValue; } }
      set {
        _hasBits3 |= 8192;
        isLowGndDistWarning_ = value;
      }
    }
    /// <summary>Gets whether the "IsLowGndDistWarning" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLowGndDistWarning {
      get { return (_hasBits3 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "IsLowGndDistWarning" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLowGndDistWarning() {
      _hasBits3 &= ~8192;
    }

    /// <summary>Field number for the "IsAGLBySonarAvailable" field.</summary>
    public const int IsAGLBySonarAvailableFieldNumber = 121;
    private readonly static bool IsAGLBySonarAvailableDefaultValue = false;

    private bool isAGLBySonarAvailable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAGLBySonarAvailable {
      get { if ((_hasBits3 & 16384) != 0) { return isAGLBySonarAvailable_; } else { return IsAGLBySonarAvailableDefaultValue; } }
      set {
        _hasBits3 |= 16384;
        isAGLBySonarAvailable_ = value;
      }
    }
    /// <summary>Gets whether the "IsAGLBySonarAvailable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAGLBySonarAvailable {
      get { return (_hasBits3 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "IsAGLBySonarAvailable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAGLBySonarAvailable() {
      _hasBits3 &= ~16384;
    }

    /// <summary>Field number for the "LandingGearAltAGLByRadar" field.</summary>
    public const int LandingGearAltAGLByRadarFieldNumber = 122;
    private readonly static float LandingGearAltAGLByRadarDefaultValue = 0F;

    private float landingGearAltAGLByRadar_;
    /// <summary>
    /// dist
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LandingGearAltAGLByRadar {
      get { if ((_hasBits3 & 32768) != 0) { return landingGearAltAGLByRadar_; } else { return LandingGearAltAGLByRadarDefaultValue; } }
      set {
        _hasBits3 |= 32768;
        landingGearAltAGLByRadar_ = value;
      }
    }
    /// <summary>Gets whether the "LandingGearAltAGLByRadar" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLandingGearAltAGLByRadar {
      get { return (_hasBits3 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "LandingGearAltAGLByRadar" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLandingGearAltAGLByRadar() {
      _hasBits3 &= ~32768;
    }

    /// <summary>Field number for the "IsLowAltProtectionActive" field.</summary>
    public const int IsLowAltProtectionActiveFieldNumber = 123;
    private readonly static bool IsLowAltProtectionActiveDefaultValue = false;

    private bool isLowAltProtectionActive_;
    /// <summary>
    /// 是否触发了距地高度保护
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLowAltProtectionActive {
      get { if ((_hasBits3 & 65536) != 0) { return isLowAltProtectionActive_; } else { return IsLowAltProtectionActiveDefaultValue; } }
      set {
        _hasBits3 |= 65536;
        isLowAltProtectionActive_ = value;
      }
    }
    /// <summary>Gets whether the "IsLowAltProtectionActive" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsLowAltProtectionActive {
      get { return (_hasBits3 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "IsLowAltProtectionActive" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsLowAltProtectionActive() {
      _hasBits3 &= ~65536;
    }

    /// <summary>Field number for the "IsControllerHearingFromAircraft" field.</summary>
    public const int IsControllerHearingFromAircraftFieldNumber = 124;
    private readonly static bool IsControllerHearingFromAircraftDefaultValue = false;

    private bool isControllerHearingFromAircraft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsControllerHearingFromAircraft {
      get { if ((_hasBits3 & 131072) != 0) { return isControllerHearingFromAircraft_; } else { return IsControllerHearingFromAircraftDefaultValue; } }
      set {
        _hasBits3 |= 131072;
        isControllerHearingFromAircraft_ = value;
      }
    }
    /// <summary>Gets whether the "IsControllerHearingFromAircraft" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsControllerHearingFromAircraft {
      get { return (_hasBits3 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "IsControllerHearingFromAircraft" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsControllerHearingFromAircraft() {
      _hasBits3 &= ~131072;
    }

    /// <summary>Field number for the "IsAircraftHearingFromController" field.</summary>
    public const int IsAircraftHearingFromControllerFieldNumber = 125;
    private readonly static bool IsAircraftHearingFromControllerDefaultValue = false;

    private bool isAircraftHearingFromController_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAircraftHearingFromController {
      get { if ((_hasBits3 & 262144) != 0) { return isAircraftHearingFromController_; } else { return IsAircraftHearingFromControllerDefaultValue; } }
      set {
        _hasBits3 |= 262144;
        isAircraftHearingFromController_ = value;
      }
    }
    /// <summary>Gets whether the "IsAircraftHearingFromController" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAircraftHearingFromController {
      get { return (_hasBits3 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "IsAircraftHearingFromController" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAircraftHearingFromController() {
      _hasBits3 &= ~262144;
    }

    /// <summary>Field number for the "IsInOnGroundActionLayerCommandMode" field.</summary>
    public const int IsInOnGroundActionLayerCommandModeFieldNumber = 126;
    private readonly static bool IsInOnGroundActionLayerCommandModeDefaultValue = false;

    private bool isInOnGroundActionLayerCommandMode_;
    /// <summary>
    /// 是否在地面测试模式。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsInOnGroundActionLayerCommandMode {
      get { if ((_hasBits3 & 524288) != 0) { return isInOnGroundActionLayerCommandMode_; } else { return IsInOnGroundActionLayerCommandModeDefaultValue; } }
      set {
        _hasBits3 |= 524288;
        isInOnGroundActionLayerCommandMode_ = value;
      }
    }
    /// <summary>Gets whether the "IsInOnGroundActionLayerCommandMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsInOnGroundActionLayerCommandMode {
      get { return (_hasBits3 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "IsInOnGroundActionLayerCommandMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsInOnGroundActionLayerCommandMode() {
      _hasBits3 &= ~524288;
    }

    /// <summary>Field number for the "HasManualRCReceiver" field.</summary>
    public const int HasManualRCReceiverFieldNumber = 127;
    private readonly static bool HasManualRCReceiverDefaultValue = false;

    private bool hasManualRCReceiver_;
    /// <summary>
    /// 飞机上是否装有人工控制的遥控器接收机。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasManualRCReceiver {
      get { if ((_hasBits3 & 1048576) != 0) { return hasManualRCReceiver_; } else { return HasManualRCReceiverDefaultValue; } }
      set {
        _hasBits3 |= 1048576;
        hasManualRCReceiver_ = value;
      }
    }
    /// <summary>Gets whether the "HasManualRCReceiver" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasManualRCReceiver {
      get { return (_hasBits3 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "HasManualRCReceiver" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasManualRCReceiver() {
      _hasBits3 &= ~1048576;
    }

    /// <summary>Field number for the "HasManualControlInputs" field.</summary>
    public const int HasManualControlInputsFieldNumber = 128;
    private readonly static bool HasManualControlInputsDefaultValue = false;

    private bool hasManualControlInputs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasManualControlInputs {
      get { if ((_hasBits3 & 2097152) != 0) { return hasManualControlInputs_; } else { return HasManualControlInputsDefaultValue; } }
      set {
        _hasBits3 |= 2097152;
        hasManualControlInputs_ = value;
      }
    }
    /// <summary>Gets whether the "HasManualControlInputs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHasManualControlInputs {
      get { return (_hasBits3 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "HasManualControlInputs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHasManualControlInputs() {
      _hasBits3 &= ~2097152;
    }

    /// <summary>Field number for the "EnableExceptionWhenRCReceiverNoSignal" field.</summary>
    public const int EnableExceptionWhenRCReceiverNoSignalFieldNumber = 129;
    private readonly static bool EnableExceptionWhenRCReceiverNoSignalDefaultValue = false;

    private bool enableExceptionWhenRCReceiverNoSignal_;
    /// <summary>
    /// 是否在没有收到遥控器信号的时候，抛异常。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableExceptionWhenRCReceiverNoSignal {
      get { if ((_hasBits3 & 4194304) != 0) { return enableExceptionWhenRCReceiverNoSignal_; } else { return EnableExceptionWhenRCReceiverNoSignalDefaultValue; } }
      set {
        _hasBits3 |= 4194304;
        enableExceptionWhenRCReceiverNoSignal_ = value;
      }
    }
    /// <summary>Gets whether the "EnableExceptionWhenRCReceiverNoSignal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnableExceptionWhenRCReceiverNoSignal {
      get { return (_hasBits3 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "EnableExceptionWhenRCReceiverNoSignal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnableExceptionWhenRCReceiverNoSignal() {
      _hasBits3 &= ~4194304;
    }

    /// <summary>Field number for the "SensorInvalidMessage" field.</summary>
    public const int SensorInvalidMessageFieldNumber = 130;
    private readonly static string SensorInvalidMessageDefaultValue = "";

    private string sensorInvalidMessage_;
    /// <summary>
    /// 获取无效的传感器消息。已经关闭的传感器不会报无效状态。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SensorInvalidMessage {
      get { return sensorInvalidMessage_ ?? SensorInvalidMessageDefaultValue; }
      set {
        sensorInvalidMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "SensorInvalidMessage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSensorInvalidMessage {
      get { return sensorInvalidMessage_ != null; }
    }
    /// <summary>Clears the value of the "SensorInvalidMessage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSensorInvalidMessage() {
      sensorInvalidMessage_ = null;
    }

    /// <summary>Field number for the "TaskMode" field.</summary>
    public const int TaskModeFieldNumber = 131;
    private readonly static global::MetaData.Proto_ControlTaskModes TaskModeDefaultValue = global::MetaData.Proto_ControlTaskModes.ManualControl;

    private global::MetaData.Proto_ControlTaskModes taskMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MetaData.Proto_ControlTaskModes TaskMode {
      get { if ((_hasBits3 & 8388608) != 0) { return taskMode_; } else { return TaskModeDefaultValue; } }
      set {
        _hasBits3 |= 8388608;
        taskMode_ = value;
      }
    }
    /// <summary>Gets whether the "TaskMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTaskMode {
      get { return (_hasBits3 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "TaskMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTaskMode() {
      _hasBits3 &= ~8388608;
    }

    /// <summary>Field number for the "IsPilotControlActive" field.</summary>
    public const int IsPilotControlActiveFieldNumber = 132;
    private readonly static bool IsPilotControlActiveDefaultValue = false;

    private bool isPilotControlActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPilotControlActive {
      get { if ((_hasBits3 & 16777216) != 0) { return isPilotControlActive_; } else { return IsPilotControlActiveDefaultValue; } }
      set {
        _hasBits3 |= 16777216;
        isPilotControlActive_ = value;
      }
    }
    /// <summary>Gets whether the "IsPilotControlActive" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPilotControlActive {
      get { return (_hasBits3 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "IsPilotControlActive" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPilotControlActive() {
      _hasBits3 &= ~16777216;
    }

    /// <summary>Field number for the "ManualControlInDisableMotorServoState" field.</summary>
    public const int ManualControlInDisableMotorServoStateFieldNumber = 133;
    private readonly static bool ManualControlInDisableMotorServoStateDefaultValue = false;

    private bool manualControlInDisableMotorServoState_;
    /// <summary>
    /// 如果不在遥控器接管模式，且当前动力系统启用，且遥控器处于动力系统停用状态，就会发出这个警报。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ManualControlInDisableMotorServoState {
      get { if ((_hasBits3 & 33554432) != 0) { return manualControlInDisableMotorServoState_; } else { return ManualControlInDisableMotorServoStateDefaultValue; } }
      set {
        _hasBits3 |= 33554432;
        manualControlInDisableMotorServoState_ = value;
      }
    }
    /// <summary>Gets whether the "ManualControlInDisableMotorServoState" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasManualControlInDisableMotorServoState {
      get { return (_hasBits3 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "ManualControlInDisableMotorServoState" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearManualControlInDisableMotorServoState() {
      _hasBits3 &= ~33554432;
    }

    /// <summary>Field number for the "CanEnterWingFlyWithRotorMode" field.</summary>
    public const int CanEnterWingFlyWithRotorModeFieldNumber = 134;
    private readonly static bool CanEnterWingFlyWithRotorModeDefaultValue = false;

    private bool canEnterWingFlyWithRotorMode_;
    /// <summary>
    /// 是否可以进入过渡转换模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanEnterWingFlyWithRotorMode {
      get { if ((_hasBits3 & 67108864) != 0) { return canEnterWingFlyWithRotorMode_; } else { return CanEnterWingFlyWithRotorModeDefaultValue; } }
      set {
        _hasBits3 |= 67108864;
        canEnterWingFlyWithRotorMode_ = value;
      }
    }
    /// <summary>Gets whether the "CanEnterWingFlyWithRotorMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanEnterWingFlyWithRotorMode {
      get { return (_hasBits3 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "CanEnterWingFlyWithRotorMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanEnterWingFlyWithRotorMode() {
      _hasBits3 &= ~67108864;
    }

    /// <summary>Field number for the "CanEnterWingCruiseMode" field.</summary>
    public const int CanEnterWingCruiseModeFieldNumber = 135;
    private readonly static bool CanEnterWingCruiseModeDefaultValue = false;

    private bool canEnterWingCruiseMode_;
    /// <summary>
    /// 是否可以进入固定翼巡航模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanEnterWingCruiseMode {
      get { if ((_hasBits3 & 134217728) != 0) { return canEnterWingCruiseMode_; } else { return CanEnterWingCruiseModeDefaultValue; } }
      set {
        _hasBits3 |= 134217728;
        canEnterWingCruiseMode_ = value;
      }
    }
    /// <summary>Gets whether the "CanEnterWingCruiseMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCanEnterWingCruiseMode {
      get { return (_hasBits3 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "CanEnterWingCruiseMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCanEnterWingCruiseMode() {
      _hasBits3 &= ~134217728;
    }

    /// <summary>Field number for the "CruiseMotorCount" field.</summary>
    public const int CruiseMotorCountFieldNumber = 136;
    private readonly static int CruiseMotorCountDefaultValue = 0;

    private int cruiseMotorCount_;
    /// <summary>
    ///byte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CruiseMotorCount {
      get { if ((_hasBits3 & 268435456) != 0) { return cruiseMotorCount_; } else { return CruiseMotorCountDefaultValue; } }
      set {
        _hasBits3 |= 268435456;
        cruiseMotorCount_ = value;
      }
    }
    /// <summary>Gets whether the "CruiseMotorCount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCruiseMotorCount {
      get { return (_hasBits3 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "CruiseMotorCount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCruiseMotorCount() {
      _hasBits3 &= ~268435456;
    }

    /// <summary>Field number for the "EnableCruiseMotorInRotorHoverMode" field.</summary>
    public const int EnableCruiseMotorInRotorHoverModeFieldNumber = 137;
    private readonly static bool EnableCruiseMotorInRotorHoverModeDefaultValue = false;

    private bool enableCruiseMotorInRotorHoverMode_;
    /// <summary>
    /// 旋翼悬停模式下，是否可以使用巡航推进电机。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableCruiseMotorInRotorHoverMode {
      get { if ((_hasBits3 & 536870912) != 0) { return enableCruiseMotorInRotorHoverMode_; } else { return EnableCruiseMotorInRotorHoverModeDefaultValue; } }
      set {
        _hasBits3 |= 536870912;
        enableCruiseMotorInRotorHoverMode_ = value;
      }
    }
    /// <summary>Gets whether the "EnableCruiseMotorInRotorHoverMode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnableCruiseMotorInRotorHoverMode {
      get { return (_hasBits3 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "EnableCruiseMotorInRotorHoverMode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnableCruiseMotorInRotorHoverMode() {
      _hasBits3 &= ~536870912;
    }

    /// <summary>Field number for the "EnforceRTKTakeOffAndLand" field.</summary>
    public const int EnforceRTKTakeOffAndLandFieldNumber = 138;
    private readonly static bool EnforceRTKTakeOffAndLandDefaultValue = false;

    private bool enforceRTKTakeOffAndLand_;
    /// <summary>
    /// 是否强制RTK起飞和降落。不满足要求则无法起飞，或者只能去备降点降落。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnforceRTKTakeOffAndLand {
      get { if ((_hasBits3 & 1073741824) != 0) { return enforceRTKTakeOffAndLand_; } else { return EnforceRTKTakeOffAndLandDefaultValue; } }
      set {
        _hasBits3 |= 1073741824;
        enforceRTKTakeOffAndLand_ = value;
      }
    }
    /// <summary>Gets whether the "EnforceRTKTakeOffAndLand" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnforceRTKTakeOffAndLand {
      get { return (_hasBits3 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "EnforceRTKTakeOffAndLand" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnforceRTKTakeOffAndLand() {
      _hasBits3 &= ~1073741824;
    }

    /// <summary>Field number for the "IsRTKAndIRSPrecisionOKForAutoPortTakeOff" field.</summary>
    public const int IsRTKAndIRSPrecisionOKForAutoPortTakeOffFieldNumber = 139;
    private readonly static bool IsRTKAndIRSPrecisionOKForAutoPortTakeOffDefaultValue = false;

    private bool isRTKAndIRSPrecisionOKForAutoPortTakeOff_;
    /// <summary>
    /// 在RTK起飞模式，当前的定位精度和惯导误差是否满足起飞要求。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRTKAndIRSPrecisionOKForAutoPortTakeOff {
      get { if ((_hasBits3 & -2147483648) != 0) { return isRTKAndIRSPrecisionOKForAutoPortTakeOff_; } else { return IsRTKAndIRSPrecisionOKForAutoPortTakeOffDefaultValue; } }
      set {
        _hasBits3 |= -2147483648;
        isRTKAndIRSPrecisionOKForAutoPortTakeOff_ = value;
      }
    }
    /// <summary>Gets whether the "IsRTKAndIRSPrecisionOKForAutoPortTakeOff" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsRTKAndIRSPrecisionOKForAutoPortTakeOff {
      get { return (_hasBits3 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "IsRTKAndIRSPrecisionOKForAutoPortTakeOff" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsRTKAndIRSPrecisionOKForAutoPortTakeOff() {
      _hasBits3 &= ~-2147483648;
    }

    /// <summary>Field number for the "IsGimbalCamSDCardDestroyPowerOn" field.</summary>
    public const int IsGimbalCamSDCardDestroyPowerOnFieldNumber = 140;
    private readonly static bool IsGimbalCamSDCardDestroyPowerOnDefaultValue = false;

    private bool isGimbalCamSDCardDestroyPowerOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGimbalCamSDCardDestroyPowerOn {
      get { if ((_hasBits4 & 1) != 0) { return isGimbalCamSDCardDestroyPowerOn_; } else { return IsGimbalCamSDCardDestroyPowerOnDefaultValue; } }
      set {
        _hasBits4 |= 1;
        isGimbalCamSDCardDestroyPowerOn_ = value;
      }
    }
    /// <summary>Gets whether the "IsGimbalCamSDCardDestroyPowerOn" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsGimbalCamSDCardDestroyPowerOn {
      get { return (_hasBits4 & 1) != 0; }
    }
    /// <summary>Clears the value of the "IsGimbalCamSDCardDestroyPowerOn" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsGimbalCamSDCardDestroyPowerOn() {
      _hasBits4 &= ~1;
    }

    /// <summary>Field number for the "IsGimbalCameraNotDetected" field.</summary>
    public const int IsGimbalCameraNotDetectedFieldNumber = 141;
    private readonly static bool IsGimbalCameraNotDetectedDefaultValue = false;

    private bool isGimbalCameraNotDetected_;
    /// <summary>
    /// 是否未探测到云台吊舱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGimbalCameraNotDetected {
      get { if ((_hasBits4 & 2) != 0) { return isGimbalCameraNotDetected_; } else { return IsGimbalCameraNotDetectedDefaultValue; } }
      set {
        _hasBits4 |= 2;
        isGimbalCameraNotDetected_ = value;
      }
    }
    /// <summary>Gets whether the "IsGimbalCameraNotDetected" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsGimbalCameraNotDetected {
      get { return (_hasBits4 & 2) != 0; }
    }
    /// <summary>Clears the value of the "IsGimbalCameraNotDetected" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsGimbalCameraNotDetected() {
      _hasBits4 &= ~2;
    }

    /// <summary>Field number for the "TargetAltitudeHMSLOffset" field.</summary>
    public const int TargetAltitudeHMSLOffsetFieldNumber = 142;
    private readonly static float TargetAltitudeHMSLOffsetDefaultValue = 0F;

    private float targetAltitudeHMSLOffset_;
    /// <summary>
    /// 当目标高度为海拔高度的时候，目标高度的偏移量。当目标高度为距地高度时，此设置不起作用。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TargetAltitudeHMSLOffset {
      get { if ((_hasBits4 & 4) != 0) { return targetAltitudeHMSLOffset_; } else { return TargetAltitudeHMSLOffsetDefaultValue; } }
      set {
        _hasBits4 |= 4;
        targetAltitudeHMSLOffset_ = value;
      }
    }
    /// <summary>Gets whether the "TargetAltitudeHMSLOffset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetAltitudeHMSLOffset {
      get { return (_hasBits4 & 4) != 0; }
    }
    /// <summary>Clears the value of the "TargetAltitudeHMSLOffset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetAltitudeHMSLOffset() {
      _hasBits4 &= ~4;
    }

    /// <summary>Field number for the "TargetAltitudeAGLOffset" field.</summary>
    public const int TargetAltitudeAGLOffsetFieldNumber = 143;
    private readonly static float TargetAltitudeAGLOffsetDefaultValue = 0F;

    private float targetAltitudeAGLOffset_;
    /// <summary>
    /// 当目标高度为距地高度的时候，目标高度的偏移量。当目标高度为海拔高度时，此设置不起作用。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TargetAltitudeAGLOffset {
      get { if ((_hasBits4 & 8) != 0) { return targetAltitudeAGLOffset_; } else { return TargetAltitudeAGLOffsetDefaultValue; } }
      set {
        _hasBits4 |= 8;
        targetAltitudeAGLOffset_ = value;
      }
    }
    /// <summary>Gets whether the "TargetAltitudeAGLOffset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetAltitudeAGLOffset {
      get { return (_hasBits4 & 8) != 0; }
    }
    /// <summary>Clears the value of the "TargetAltitudeAGLOffset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetAltitudeAGLOffset() {
      _hasBits4 &= ~8;
    }

    /// <summary>Field number for the "IsWingCruiseAirspeedPriorToHeight" field.</summary>
    public const int IsWingCruiseAirspeedPriorToHeightFieldNumber = 144;
    private readonly static bool IsWingCruiseAirspeedPriorToHeightDefaultValue = false;

    private bool isWingCruiseAirspeedPriorToHeight_;
    /// <summary>
    /// 在固定翼巡航飞行的时候，是否保持空速控制优先级高于高度控制。在这种模式下，保持通过升降舵控制速度，爬升和下降的时候速度将尽可能维持设定速度。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsWingCruiseAirspeedPriorToHeight {
      get { if ((_hasBits4 & 16) != 0) { return isWingCruiseAirspeedPriorToHeight_; } else { return IsWingCruiseAirspeedPriorToHeightDefaultValue; } }
      set {
        _hasBits4 |= 16;
        isWingCruiseAirspeedPriorToHeight_ = value;
      }
    }
    /// <summary>Gets whether the "IsWingCruiseAirspeedPriorToHeight" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsWingCruiseAirspeedPriorToHeight {
      get { return (_hasBits4 & 16) != 0; }
    }
    /// <summary>Clears the value of the "IsWingCruiseAirspeedPriorToHeight" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsWingCruiseAirspeedPriorToHeight() {
      _hasBits4 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Proto_GenerateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Proto_GenerateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsReceivingHot != other.IsReceivingHot) return false;
      if (IsMotorsAndServosEnabled != other.IsMotorsAndServosEnabled) return false;
      if (IsInTestMotorServoMode != other.IsInTestMotorServoMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReceivedBytesPerSecond, other.ReceivedBytesPerSecond)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SentBytesPerSecond, other.SentBytesPerSecond)) return false;
      if (ConnectedDataLinkName != other.ConnectedDataLinkName) return false;
      if (AircraftUseFuelEngineForFixedWingCruise != other.AircraftUseFuelEngineForFixedWingCruise) return false;
      if(!actualThrottleServoPosition_.Equals(other.actualThrottleServoPosition_)) return false;
      if(!cylinderHeadMaxTemperature_.Equals(other.cylinderHeadMaxTemperature_)) return false;
      if(!estimatedPropellerThrustN_.Equals(other.estimatedPropellerThrustN_)) return false;
      if(!cruiseFuelEngineRPMs_.Equals(other.cruiseFuelEngineRPMs_)) return false;
      if (ShouldCruiseEngineAvailable != other.ShouldCruiseEngineAvailable) return false;
      if (IsAllCruiseFuelEnginePowerOn != other.IsAllCruiseFuelEnginePowerOn) return false;
      if (IsAllCruiseFuelEngineRunning != other.IsAllCruiseFuelEngineRunning) return false;
      if (FlightControlUseAirspeedSensor != other.FlightControlUseAirspeedSensor) return false;
      if (IsUsePitotTube != other.IsUsePitotTube) return false;
      if (IsInSafeMode != other.IsInSafeMode) return false;
      if (DoNotUseBaroSensor != other.DoNotUseBaroSensor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TotalRotorAndCruisePower, other.TotalRotorAndCruisePower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinMotorVoltage, other.MinMotorVoltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinBatteryRemainEnergyRatio, other.MinBatteryRemainEnergyRatio)) return false;
      if (ShowFullBatteryEndurance != other.ShowFullBatteryEndurance) return false;
      if (IsOnGround != other.IsOnGround) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AutoLandEnergyRatio, other.AutoLandEnergyRatio)) return false;
      if (EnableBatteryEnergyLowAutoReturn != other.EnableBatteryEnergyLowAutoReturn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AutoReturnBatteryEnergyRatio, other.AutoReturnBatteryEnergyRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RemainCruiseEnergyWh, other.RemainCruiseEnergyWh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RemainRotorEnergyWh, other.RemainRotorEnergyWh)) return false;
      if (LonInnerMode != other.LonInnerMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AircraftMass, other.AircraftMass)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetFlySpeed, other.TargetFlySpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CruisePowerEstimation, other.CruisePowerEstimation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CruiseEnergyPerMeter, other.CruiseEnergyPerMeter)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RemainCruiseTime, other.RemainCruiseTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RemainCruiseDist, other.RemainCruiseDist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VTOLPowerEstimation, other.VTOLPowerEstimation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AirDensity, other.AirDensity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RemainVTOLTime, other.RemainVTOLTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AircraftHorizDistToLandAlongFlightPlan, other.AircraftHorizDistToLandAlongFlightPlan)) return false;
      if (HasFixedWingModes != other.HasFixedWingModes) return false;
      if (RotorExpandState != other.RotorExpandState) return false;
      if (HasRetractableRotors != other.HasRetractableRotors) return false;
      if (IsAutoRetractLandingGear != other.IsAutoRetractLandingGear) return false;
      if (IsLandingGearRetracted != other.IsLandingGearRetracted) return false;
      if (RTKSolutionState != other.RTKSolutionState) return false;
      if (!object.Equals(LLA, other.LLA)) return false;
      if (!object.Equals(EulerAnglesF, other.EulerAnglesF)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TargetAltitude, other.TargetAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ReferenceAltitude, other.ReferenceAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TrueAirSpeed, other.TrueAirSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ground2DSpeed, other.Ground2DSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StraightDistToTakeOff, other.StraightDistToTakeOff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FlyDistance, other.FlyDistance)) return false;
      if (FlySeconds != other.FlySeconds) return false;
      if (HasEstimatedWind != other.HasEstimatedWind) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EstimatedWindAngle, other.EstimatedWindAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EstimatedWindSpeed, other.EstimatedWindSpeed)) return false;
      if (WriteCameraPosDataToFile != other.WriteCameraPosDataToFile) return false;
      if (UndownloadedPosDataCount != other.UndownloadedPosDataCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AverageRotorThrustRatioFor1G, other.AverageRotorThrustRatioFor1G)) return false;
      if (!object.Equals(PlaneENUSpeed, other.PlaneENUSpeed)) return false;
      if (IsGNSS2DAvailable != other.IsGNSS2DAvailable) return false;
      if (IsGNSSAltAvailable != other.IsGNSSAltAvailable) return false;
      if (UsingGnssSateNum != other.UsingGnssSateNum) return false;
      if (IsGNSSDataQualityGood != other.IsGNSSDataQualityGood) return false;
      if (GNSSsomeNotUsable != other.GNSSsomeNotUsable) return false;
      if (IsIRSReadyForTakeoff != other.IsIRSReadyForTakeoff) return false;
      if (IsInSensorCalibrationMode != other.IsInSensorCalibrationMode) return false;
      if (IsInNoMagMode != other.IsInNoMagMode) return false;
      if (IsUsingVisualPositionSystemForIRS != other.IsUsingVisualPositionSystemForIRS) return false;
      if (IsFlyTestParamsModified != other.IsFlyTestParamsModified) return false;
      if (IsInAutoVertPortOperationMode != other.IsInAutoVertPortOperationMode) return false;
      if (IsAutoPortLandElseAlterLand != other.IsAutoPortLandElseAlterLand) return false;
      if (IsVerticalLanding != other.IsVerticalLanding) return false;
      if (IsInLandingConstDescentAndAlignPhase != other.IsInLandingConstDescentAndAlignPhase) return false;
      if (IsVertLandPauseTouchDownForAlignment != other.IsVertLandPauseTouchDownForAlignment) return false;
      if (!object.Equals(PrecisionLandMaxAllowableErrors, other.PrecisionLandMaxAllowableErrors)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LandingGlobal2DPosError, other.LandingGlobal2DPosError)) return false;
      if (LandActiveYawAlign != other.LandActiveYawAlign) return false;
      if (LandPassiveYawAlign != other.LandPassiveYawAlign) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PortTableHeadingAngle, other.PortTableHeadingAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YawAngleAlignError, other.YawAngleAlignError)) return false;
      if (IsProtocolVersionConflict != other.IsProtocolVersionConflict) return false;
      if (CanEnterHighPosAccuRotorMode != other.CanEnterHighPosAccuRotorMode) return false;
      if (ServerErrorsHasMessage != other.ServerErrorsHasMessage) return false;
      if (ReceivedAircraftMessagesErrorCount != other.ReceivedAircraftMessagesErrorCount) return false;
      if (ReceivedAircraftMessagesWarningCount != other.ReceivedAircraftMessagesWarningCount) return false;
      if (IsInEngineerMode != other.IsInEngineerMode) return false;
      if (IsLowNzProtectionActivated != other.IsLowNzProtectionActivated) return false;
      if (IsHighAoAProtectionActivated != other.IsHighAoAProtectionActivated) return false;
      if (IsHighStructNzProtectionActivated != other.IsHighStructNzProtectionActivated) return false;
      if (IsLowSpeedPSPActivated != other.IsLowSpeedPSPActivated) return false;
      if (IsHighSpeedPSPActivated != other.IsHighSpeedPSPActivated) return false;
      if (IsAltitudeDropFloorActivated != other.IsAltitudeDropFloorActivated) return false;
      if (IsAltitudeRiseCeilingActivated != other.IsAltitudeRiseCeilingActivated) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AltitudeDeviation, other.AltitudeDeviation)) return false;
      if (IsAltitudeDeviationHigh != other.IsAltitudeDeviationHigh) return false;
      if (IsAltitudeDeviationLow != other.IsAltitudeDeviationLow) return false;
      if (IsRollLostControl != other.IsRollLostControl) return false;
      if (IsPitchLostControl != other.IsPitchLostControl) return false;
      if (EmergencyLandBecauseBatteryLow != other.EmergencyLandBecauseBatteryLow) return false;
      if (EmergencyLandBecauseFlyTimeHigh != other.EmergencyLandBecauseFlyTimeHigh) return false;
      if (IsRejectingTakeOff != other.IsRejectingTakeOff) return false;
      if (!object.Equals(GyroHFRMSDPS, other.GyroHFRMSDPS)) return false;
      if (IsLogFileAlmostFull != other.IsLogFileAlmostFull) return false;
      if (EnableOnGndFastFileTransmit != other.EnableOnGndFastFileTransmit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinimumRemainRatio, other.MinimumRemainRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WarningRemainRatio, other.WarningRemainRatio)) return false;
      if (DateTimeNow != other.DateTimeNow) return false;
      if (DebugCurveLastReceiveTime != other.DebugCurveLastReceiveTime) return false;
      if (LastReceivingGNSSRawDataTime != other.LastReceivingGNSSRawDataTime) return false;
      if (AllGNSSRawDataCounter != other.AllGNSSRawDataCounter) return false;
      if (IsRequestOpenOnboardLog != other.IsRequestOpenOnboardLog) return false;
      if (IsOnboardLogOpen != other.IsOnboardLogOpen) return false;
      if (IsWingCruiseHasFailed != other.IsWingCruiseHasFailed) return false;
      if (IsEmergencyLand != other.IsEmergencyLand) return false;
      if (IsEmergencyLandRequested != other.IsEmergencyLandRequested) return false;
      if (DisableEmergencyAutoLand != other.DisableEmergencyAutoLand) return false;
      if (EnableGroundDistLowWarning != other.EnableGroundDistLowWarning) return false;
      if (IsLowGndDistWarning != other.IsLowGndDistWarning) return false;
      if (IsAGLBySonarAvailable != other.IsAGLBySonarAvailable) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LandingGearAltAGLByRadar, other.LandingGearAltAGLByRadar)) return false;
      if (IsLowAltProtectionActive != other.IsLowAltProtectionActive) return false;
      if (IsControllerHearingFromAircraft != other.IsControllerHearingFromAircraft) return false;
      if (IsAircraftHearingFromController != other.IsAircraftHearingFromController) return false;
      if (IsInOnGroundActionLayerCommandMode != other.IsInOnGroundActionLayerCommandMode) return false;
      if (HasManualRCReceiver != other.HasManualRCReceiver) return false;
      if (HasManualControlInputs != other.HasManualControlInputs) return false;
      if (EnableExceptionWhenRCReceiverNoSignal != other.EnableExceptionWhenRCReceiverNoSignal) return false;
      if (SensorInvalidMessage != other.SensorInvalidMessage) return false;
      if (TaskMode != other.TaskMode) return false;
      if (IsPilotControlActive != other.IsPilotControlActive) return false;
      if (ManualControlInDisableMotorServoState != other.ManualControlInDisableMotorServoState) return false;
      if (CanEnterWingFlyWithRotorMode != other.CanEnterWingFlyWithRotorMode) return false;
      if (CanEnterWingCruiseMode != other.CanEnterWingCruiseMode) return false;
      if (CruiseMotorCount != other.CruiseMotorCount) return false;
      if (EnableCruiseMotorInRotorHoverMode != other.EnableCruiseMotorInRotorHoverMode) return false;
      if (EnforceRTKTakeOffAndLand != other.EnforceRTKTakeOffAndLand) return false;
      if (IsRTKAndIRSPrecisionOKForAutoPortTakeOff != other.IsRTKAndIRSPrecisionOKForAutoPortTakeOff) return false;
      if (IsGimbalCamSDCardDestroyPowerOn != other.IsGimbalCamSDCardDestroyPowerOn) return false;
      if (IsGimbalCameraNotDetected != other.IsGimbalCameraNotDetected) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetAltitudeHMSLOffset, other.TargetAltitudeHMSLOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetAltitudeAGLOffset, other.TargetAltitudeAGLOffset)) return false;
      if (IsWingCruiseAirspeedPriorToHeight != other.IsWingCruiseAirspeedPriorToHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIsReceivingHot) hash ^= IsReceivingHot.GetHashCode();
      if (HasIsMotorsAndServosEnabled) hash ^= IsMotorsAndServosEnabled.GetHashCode();
      if (HasIsInTestMotorServoMode) hash ^= IsInTestMotorServoMode.GetHashCode();
      if (HasReceivedBytesPerSecond) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReceivedBytesPerSecond);
      if (HasSentBytesPerSecond) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SentBytesPerSecond);
      if (HasConnectedDataLinkName) hash ^= ConnectedDataLinkName.GetHashCode();
      if (HasAircraftUseFuelEngineForFixedWingCruise) hash ^= AircraftUseFuelEngineForFixedWingCruise.GetHashCode();
      hash ^= actualThrottleServoPosition_.GetHashCode();
      hash ^= cylinderHeadMaxTemperature_.GetHashCode();
      hash ^= estimatedPropellerThrustN_.GetHashCode();
      hash ^= cruiseFuelEngineRPMs_.GetHashCode();
      if (HasShouldCruiseEngineAvailable) hash ^= ShouldCruiseEngineAvailable.GetHashCode();
      if (HasIsAllCruiseFuelEnginePowerOn) hash ^= IsAllCruiseFuelEnginePowerOn.GetHashCode();
      if (HasIsAllCruiseFuelEngineRunning) hash ^= IsAllCruiseFuelEngineRunning.GetHashCode();
      if (HasFlightControlUseAirspeedSensor) hash ^= FlightControlUseAirspeedSensor.GetHashCode();
      if (HasIsUsePitotTube) hash ^= IsUsePitotTube.GetHashCode();
      if (HasIsInSafeMode) hash ^= IsInSafeMode.GetHashCode();
      if (HasDoNotUseBaroSensor) hash ^= DoNotUseBaroSensor.GetHashCode();
      if (HasTotalRotorAndCruisePower) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TotalRotorAndCruisePower);
      if (HasMinMotorVoltage) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinMotorVoltage);
      if (HasMinBatteryRemainEnergyRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinBatteryRemainEnergyRatio);
      if (HasShowFullBatteryEndurance) hash ^= ShowFullBatteryEndurance.GetHashCode();
      if (HasIsOnGround) hash ^= IsOnGround.GetHashCode();
      if (HasAutoLandEnergyRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AutoLandEnergyRatio);
      if (HasEnableBatteryEnergyLowAutoReturn) hash ^= EnableBatteryEnergyLowAutoReturn.GetHashCode();
      if (HasAutoReturnBatteryEnergyRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AutoReturnBatteryEnergyRatio);
      if (HasRemainCruiseEnergyWh) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RemainCruiseEnergyWh);
      if (HasRemainRotorEnergyWh) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RemainRotorEnergyWh);
      if (HasLonInnerMode) hash ^= LonInnerMode.GetHashCode();
      if (HasAircraftMass) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AircraftMass);
      if (HasTargetFlySpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetFlySpeed);
      if (HasCruisePowerEstimation) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CruisePowerEstimation);
      if (HasCruiseEnergyPerMeter) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CruiseEnergyPerMeter);
      if (HasRemainCruiseTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RemainCruiseTime);
      if (HasRemainCruiseDist) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RemainCruiseDist);
      if (HasVTOLPowerEstimation) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VTOLPowerEstimation);
      if (HasAirDensity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AirDensity);
      if (HasRemainVTOLTime) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RemainVTOLTime);
      if (HasAircraftHorizDistToLandAlongFlightPlan) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AircraftHorizDistToLandAlongFlightPlan);
      if (HasHasFixedWingModes) hash ^= HasFixedWingModes.GetHashCode();
      if (HasRotorExpandState) hash ^= RotorExpandState.GetHashCode();
      if (HasHasRetractableRotors) hash ^= HasRetractableRotors.GetHashCode();
      if (HasIsAutoRetractLandingGear) hash ^= IsAutoRetractLandingGear.GetHashCode();
      if (HasIsLandingGearRetracted) hash ^= IsLandingGearRetracted.GetHashCode();
      if (HasRTKSolutionState) hash ^= RTKSolutionState.GetHashCode();
      if (lLA_ != null) hash ^= LLA.GetHashCode();
      if (eulerAnglesF_ != null) hash ^= EulerAnglesF.GetHashCode();
      if (HasTargetAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TargetAltitude);
      if (HasReferenceAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ReferenceAltitude);
      if (HasTrueAirSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TrueAirSpeed);
      if (HasGround2DSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ground2DSpeed);
      if (HasStraightDistToTakeOff) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StraightDistToTakeOff);
      if (HasFlyDistance) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FlyDistance);
      if (HasFlySeconds) hash ^= FlySeconds.GetHashCode();
      if (HasHasEstimatedWind) hash ^= HasEstimatedWind.GetHashCode();
      if (HasEstimatedWindAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EstimatedWindAngle);
      if (HasEstimatedWindSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EstimatedWindSpeed);
      if (HasWriteCameraPosDataToFile) hash ^= WriteCameraPosDataToFile.GetHashCode();
      if (HasUndownloadedPosDataCount) hash ^= UndownloadedPosDataCount.GetHashCode();
      if (HasAverageRotorThrustRatioFor1G) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AverageRotorThrustRatioFor1G);
      if (planeENUSpeed_ != null) hash ^= PlaneENUSpeed.GetHashCode();
      if (HasIsGNSS2DAvailable) hash ^= IsGNSS2DAvailable.GetHashCode();
      if (HasIsGNSSAltAvailable) hash ^= IsGNSSAltAvailable.GetHashCode();
      if (HasUsingGnssSateNum) hash ^= UsingGnssSateNum.GetHashCode();
      if (HasIsGNSSDataQualityGood) hash ^= IsGNSSDataQualityGood.GetHashCode();
      if (HasGNSSsomeNotUsable) hash ^= GNSSsomeNotUsable.GetHashCode();
      if (HasIsIRSReadyForTakeoff) hash ^= IsIRSReadyForTakeoff.GetHashCode();
      if (HasIsInSensorCalibrationMode) hash ^= IsInSensorCalibrationMode.GetHashCode();
      if (HasIsInNoMagMode) hash ^= IsInNoMagMode.GetHashCode();
      if (HasIsUsingVisualPositionSystemForIRS) hash ^= IsUsingVisualPositionSystemForIRS.GetHashCode();
      if (HasIsFlyTestParamsModified) hash ^= IsFlyTestParamsModified.GetHashCode();
      if (HasIsInAutoVertPortOperationMode) hash ^= IsInAutoVertPortOperationMode.GetHashCode();
      if (HasIsAutoPortLandElseAlterLand) hash ^= IsAutoPortLandElseAlterLand.GetHashCode();
      if (HasIsVerticalLanding) hash ^= IsVerticalLanding.GetHashCode();
      if (HasIsInLandingConstDescentAndAlignPhase) hash ^= IsInLandingConstDescentAndAlignPhase.GetHashCode();
      if (HasIsVertLandPauseTouchDownForAlignment) hash ^= IsVertLandPauseTouchDownForAlignment.GetHashCode();
      if (precisionLandMaxAllowableErrors_ != null) hash ^= PrecisionLandMaxAllowableErrors.GetHashCode();
      if (HasLandingGlobal2DPosError) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LandingGlobal2DPosError);
      if (HasLandActiveYawAlign) hash ^= LandActiveYawAlign.GetHashCode();
      if (HasLandPassiveYawAlign) hash ^= LandPassiveYawAlign.GetHashCode();
      if (HasPortTableHeadingAngle) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PortTableHeadingAngle);
      if (HasYawAngleAlignError) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YawAngleAlignError);
      if (HasIsProtocolVersionConflict) hash ^= IsProtocolVersionConflict.GetHashCode();
      if (HasCanEnterHighPosAccuRotorMode) hash ^= CanEnterHighPosAccuRotorMode.GetHashCode();
      if (HasServerErrorsHasMessage) hash ^= ServerErrorsHasMessage.GetHashCode();
      if (HasReceivedAircraftMessagesErrorCount) hash ^= ReceivedAircraftMessagesErrorCount.GetHashCode();
      if (HasReceivedAircraftMessagesWarningCount) hash ^= ReceivedAircraftMessagesWarningCount.GetHashCode();
      if (HasIsInEngineerMode) hash ^= IsInEngineerMode.GetHashCode();
      if (HasIsLowNzProtectionActivated) hash ^= IsLowNzProtectionActivated.GetHashCode();
      if (HasIsHighAoAProtectionActivated) hash ^= IsHighAoAProtectionActivated.GetHashCode();
      if (HasIsHighStructNzProtectionActivated) hash ^= IsHighStructNzProtectionActivated.GetHashCode();
      if (HasIsLowSpeedPSPActivated) hash ^= IsLowSpeedPSPActivated.GetHashCode();
      if (HasIsHighSpeedPSPActivated) hash ^= IsHighSpeedPSPActivated.GetHashCode();
      if (HasIsAltitudeDropFloorActivated) hash ^= IsAltitudeDropFloorActivated.GetHashCode();
      if (HasIsAltitudeRiseCeilingActivated) hash ^= IsAltitudeRiseCeilingActivated.GetHashCode();
      if (HasAltitudeDeviation) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AltitudeDeviation);
      if (HasIsAltitudeDeviationHigh) hash ^= IsAltitudeDeviationHigh.GetHashCode();
      if (HasIsAltitudeDeviationLow) hash ^= IsAltitudeDeviationLow.GetHashCode();
      if (HasIsRollLostControl) hash ^= IsRollLostControl.GetHashCode();
      if (HasIsPitchLostControl) hash ^= IsPitchLostControl.GetHashCode();
      if (HasEmergencyLandBecauseBatteryLow) hash ^= EmergencyLandBecauseBatteryLow.GetHashCode();
      if (HasEmergencyLandBecauseFlyTimeHigh) hash ^= EmergencyLandBecauseFlyTimeHigh.GetHashCode();
      if (HasIsRejectingTakeOff) hash ^= IsRejectingTakeOff.GetHashCode();
      if (gyroHFRMSDPS_ != null) hash ^= GyroHFRMSDPS.GetHashCode();
      if (HasIsLogFileAlmostFull) hash ^= IsLogFileAlmostFull.GetHashCode();
      if (HasEnableOnGndFastFileTransmit) hash ^= EnableOnGndFastFileTransmit.GetHashCode();
      if (HasMinimumRemainRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinimumRemainRatio);
      if (HasWarningRemainRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WarningRemainRatio);
      if (HasDateTimeNow) hash ^= DateTimeNow.GetHashCode();
      if (HasDebugCurveLastReceiveTime) hash ^= DebugCurveLastReceiveTime.GetHashCode();
      if (HasLastReceivingGNSSRawDataTime) hash ^= LastReceivingGNSSRawDataTime.GetHashCode();
      if (HasAllGNSSRawDataCounter) hash ^= AllGNSSRawDataCounter.GetHashCode();
      if (HasIsRequestOpenOnboardLog) hash ^= IsRequestOpenOnboardLog.GetHashCode();
      if (HasIsOnboardLogOpen) hash ^= IsOnboardLogOpen.GetHashCode();
      if (HasIsWingCruiseHasFailed) hash ^= IsWingCruiseHasFailed.GetHashCode();
      if (HasIsEmergencyLand) hash ^= IsEmergencyLand.GetHashCode();
      if (HasIsEmergencyLandRequested) hash ^= IsEmergencyLandRequested.GetHashCode();
      if (HasDisableEmergencyAutoLand) hash ^= DisableEmergencyAutoLand.GetHashCode();
      if (HasEnableGroundDistLowWarning) hash ^= EnableGroundDistLowWarning.GetHashCode();
      if (HasIsLowGndDistWarning) hash ^= IsLowGndDistWarning.GetHashCode();
      if (HasIsAGLBySonarAvailable) hash ^= IsAGLBySonarAvailable.GetHashCode();
      if (HasLandingGearAltAGLByRadar) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LandingGearAltAGLByRadar);
      if (HasIsLowAltProtectionActive) hash ^= IsLowAltProtectionActive.GetHashCode();
      if (HasIsControllerHearingFromAircraft) hash ^= IsControllerHearingFromAircraft.GetHashCode();
      if (HasIsAircraftHearingFromController) hash ^= IsAircraftHearingFromController.GetHashCode();
      if (HasIsInOnGroundActionLayerCommandMode) hash ^= IsInOnGroundActionLayerCommandMode.GetHashCode();
      if (HasHasManualRCReceiver) hash ^= HasManualRCReceiver.GetHashCode();
      if (HasHasManualControlInputs) hash ^= HasManualControlInputs.GetHashCode();
      if (HasEnableExceptionWhenRCReceiverNoSignal) hash ^= EnableExceptionWhenRCReceiverNoSignal.GetHashCode();
      if (HasSensorInvalidMessage) hash ^= SensorInvalidMessage.GetHashCode();
      if (HasTaskMode) hash ^= TaskMode.GetHashCode();
      if (HasIsPilotControlActive) hash ^= IsPilotControlActive.GetHashCode();
      if (HasManualControlInDisableMotorServoState) hash ^= ManualControlInDisableMotorServoState.GetHashCode();
      if (HasCanEnterWingFlyWithRotorMode) hash ^= CanEnterWingFlyWithRotorMode.GetHashCode();
      if (HasCanEnterWingCruiseMode) hash ^= CanEnterWingCruiseMode.GetHashCode();
      if (HasCruiseMotorCount) hash ^= CruiseMotorCount.GetHashCode();
      if (HasEnableCruiseMotorInRotorHoverMode) hash ^= EnableCruiseMotorInRotorHoverMode.GetHashCode();
      if (HasEnforceRTKTakeOffAndLand) hash ^= EnforceRTKTakeOffAndLand.GetHashCode();
      if (HasIsRTKAndIRSPrecisionOKForAutoPortTakeOff) hash ^= IsRTKAndIRSPrecisionOKForAutoPortTakeOff.GetHashCode();
      if (HasIsGimbalCamSDCardDestroyPowerOn) hash ^= IsGimbalCamSDCardDestroyPowerOn.GetHashCode();
      if (HasIsGimbalCameraNotDetected) hash ^= IsGimbalCameraNotDetected.GetHashCode();
      if (HasTargetAltitudeHMSLOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetAltitudeHMSLOffset);
      if (HasTargetAltitudeAGLOffset) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetAltitudeAGLOffset);
      if (HasIsWingCruiseAirspeedPriorToHeight) hash ^= IsWingCruiseAirspeedPriorToHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIsReceivingHot) {
        output.WriteRawTag(8);
        output.WriteBool(IsReceivingHot);
      }
      if (HasIsMotorsAndServosEnabled) {
        output.WriteRawTag(16);
        output.WriteBool(IsMotorsAndServosEnabled);
      }
      if (HasIsInTestMotorServoMode) {
        output.WriteRawTag(24);
        output.WriteBool(IsInTestMotorServoMode);
      }
      if (HasReceivedBytesPerSecond) {
        output.WriteRawTag(33);
        output.WriteDouble(ReceivedBytesPerSecond);
      }
      if (HasSentBytesPerSecond) {
        output.WriteRawTag(41);
        output.WriteDouble(SentBytesPerSecond);
      }
      if (HasConnectedDataLinkName) {
        output.WriteRawTag(50);
        output.WriteString(ConnectedDataLinkName);
      }
      if (HasAircraftUseFuelEngineForFixedWingCruise) {
        output.WriteRawTag(56);
        output.WriteBool(AircraftUseFuelEngineForFixedWingCruise);
      }
      actualThrottleServoPosition_.WriteTo(output, _repeated_actualThrottleServoPosition_codec);
      cylinderHeadMaxTemperature_.WriteTo(output, _repeated_cylinderHeadMaxTemperature_codec);
      estimatedPropellerThrustN_.WriteTo(output, _repeated_estimatedPropellerThrustN_codec);
      cruiseFuelEngineRPMs_.WriteTo(output, _repeated_cruiseFuelEngineRPMs_codec);
      if (HasShouldCruiseEngineAvailable) {
        output.WriteRawTag(96);
        output.WriteBool(ShouldCruiseEngineAvailable);
      }
      if (HasIsAllCruiseFuelEnginePowerOn) {
        output.WriteRawTag(104);
        output.WriteBool(IsAllCruiseFuelEnginePowerOn);
      }
      if (HasIsAllCruiseFuelEngineRunning) {
        output.WriteRawTag(112);
        output.WriteBool(IsAllCruiseFuelEngineRunning);
      }
      if (HasFlightControlUseAirspeedSensor) {
        output.WriteRawTag(120);
        output.WriteBool(FlightControlUseAirspeedSensor);
      }
      if (HasIsUsePitotTube) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsUsePitotTube);
      }
      if (HasIsInSafeMode) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsInSafeMode);
      }
      if (HasDoNotUseBaroSensor) {
        output.WriteRawTag(144, 1);
        output.WriteBool(DoNotUseBaroSensor);
      }
      if (HasTotalRotorAndCruisePower) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(TotalRotorAndCruisePower);
      }
      if (HasMinMotorVoltage) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(MinMotorVoltage);
      }
      if (HasMinBatteryRemainEnergyRatio) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(MinBatteryRemainEnergyRatio);
      }
      if (HasShowFullBatteryEndurance) {
        output.WriteRawTag(176, 1);
        output.WriteBool(ShowFullBatteryEndurance);
      }
      if (HasIsOnGround) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsOnGround);
      }
      if (HasAutoLandEnergyRatio) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(AutoLandEnergyRatio);
      }
      if (HasEnableBatteryEnergyLowAutoReturn) {
        output.WriteRawTag(200, 1);
        output.WriteBool(EnableBatteryEnergyLowAutoReturn);
      }
      if (HasAutoReturnBatteryEnergyRatio) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(AutoReturnBatteryEnergyRatio);
      }
      if (HasRemainCruiseEnergyWh) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(RemainCruiseEnergyWh);
      }
      if (HasRemainRotorEnergyWh) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(RemainRotorEnergyWh);
      }
      if (HasLonInnerMode) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) LonInnerMode);
      }
      if (HasAircraftMass) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(AircraftMass);
      }
      if (HasTargetFlySpeed) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(TargetFlySpeed);
      }
      if (HasCruisePowerEstimation) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(CruisePowerEstimation);
      }
      if (HasCruiseEnergyPerMeter) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(CruiseEnergyPerMeter);
      }
      if (HasRemainCruiseTime) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(RemainCruiseTime);
      }
      if (HasRemainCruiseDist) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(RemainCruiseDist);
      }
      if (HasVTOLPowerEstimation) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(VTOLPowerEstimation);
      }
      if (HasAirDensity) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(AirDensity);
      }
      if (HasRemainVTOLTime) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(RemainVTOLTime);
      }
      if (HasAircraftHorizDistToLandAlongFlightPlan) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(AircraftHorizDistToLandAlongFlightPlan);
      }
      if (HasHasFixedWingModes) {
        output.WriteRawTag(192, 2);
        output.WriteBool(HasFixedWingModes);
      }
      if (HasRotorExpandState) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) RotorExpandState);
      }
      if (HasHasRetractableRotors) {
        output.WriteRawTag(208, 2);
        output.WriteBool(HasRetractableRotors);
      }
      if (HasIsAutoRetractLandingGear) {
        output.WriteRawTag(216, 2);
        output.WriteBool(IsAutoRetractLandingGear);
      }
      if (HasIsLandingGearRetracted) {
        output.WriteRawTag(224, 2);
        output.WriteBool(IsLandingGearRetracted);
      }
      if (HasRTKSolutionState) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) RTKSolutionState);
      }
      if (lLA_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(LLA);
      }
      if (eulerAnglesF_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(EulerAnglesF);
      }
      if (HasTargetAltitude) {
        output.WriteRawTag(129, 3);
        output.WriteDouble(TargetAltitude);
      }
      if (HasReferenceAltitude) {
        output.WriteRawTag(137, 3);
        output.WriteDouble(ReferenceAltitude);
      }
      if (HasTrueAirSpeed) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(TrueAirSpeed);
      }
      if (HasGround2DSpeed) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(Ground2DSpeed);
      }
      if (HasStraightDistToTakeOff) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(StraightDistToTakeOff);
      }
      if (HasFlyDistance) {
        output.WriteRawTag(169, 3);
        output.WriteDouble(FlyDistance);
      }
      if (HasFlySeconds) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(FlySeconds);
      }
      if (HasHasEstimatedWind) {
        output.WriteRawTag(184, 3);
        output.WriteBool(HasEstimatedWind);
      }
      if (HasEstimatedWindAngle) {
        output.WriteRawTag(193, 3);
        output.WriteDouble(EstimatedWindAngle);
      }
      if (HasEstimatedWindSpeed) {
        output.WriteRawTag(201, 3);
        output.WriteDouble(EstimatedWindSpeed);
      }
      if (HasWriteCameraPosDataToFile) {
        output.WriteRawTag(208, 3);
        output.WriteBool(WriteCameraPosDataToFile);
      }
      if (HasUndownloadedPosDataCount) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(UndownloadedPosDataCount);
      }
      if (HasAverageRotorThrustRatioFor1G) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(AverageRotorThrustRatioFor1G);
      }
      if (planeENUSpeed_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(PlaneENUSpeed);
      }
      if (HasIsGNSS2DAvailable) {
        output.WriteRawTag(240, 3);
        output.WriteBool(IsGNSS2DAvailable);
      }
      if (HasIsGNSSAltAvailable) {
        output.WriteRawTag(248, 3);
        output.WriteBool(IsGNSSAltAvailable);
      }
      if (HasUsingGnssSateNum) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(UsingGnssSateNum);
      }
      if (HasIsGNSSDataQualityGood) {
        output.WriteRawTag(136, 4);
        output.WriteBool(IsGNSSDataQualityGood);
      }
      if (HasGNSSsomeNotUsable) {
        output.WriteRawTag(144, 4);
        output.WriteBool(GNSSsomeNotUsable);
      }
      if (HasIsIRSReadyForTakeoff) {
        output.WriteRawTag(152, 4);
        output.WriteBool(IsIRSReadyForTakeoff);
      }
      if (HasIsInSensorCalibrationMode) {
        output.WriteRawTag(160, 4);
        output.WriteBool(IsInSensorCalibrationMode);
      }
      if (HasIsInNoMagMode) {
        output.WriteRawTag(168, 4);
        output.WriteBool(IsInNoMagMode);
      }
      if (HasIsUsingVisualPositionSystemForIRS) {
        output.WriteRawTag(176, 4);
        output.WriteBool(IsUsingVisualPositionSystemForIRS);
      }
      if (HasIsFlyTestParamsModified) {
        output.WriteRawTag(184, 4);
        output.WriteBool(IsFlyTestParamsModified);
      }
      if (HasIsInAutoVertPortOperationMode) {
        output.WriteRawTag(192, 4);
        output.WriteBool(IsInAutoVertPortOperationMode);
      }
      if (HasIsAutoPortLandElseAlterLand) {
        output.WriteRawTag(200, 4);
        output.WriteBool(IsAutoPortLandElseAlterLand);
      }
      if (HasIsVerticalLanding) {
        output.WriteRawTag(208, 4);
        output.WriteBool(IsVerticalLanding);
      }
      if (HasIsInLandingConstDescentAndAlignPhase) {
        output.WriteRawTag(216, 4);
        output.WriteBool(IsInLandingConstDescentAndAlignPhase);
      }
      if (HasIsVertLandPauseTouchDownForAlignment) {
        output.WriteRawTag(224, 4);
        output.WriteBool(IsVertLandPauseTouchDownForAlignment);
      }
      if (precisionLandMaxAllowableErrors_ != null) {
        output.WriteRawTag(234, 4);
        output.WriteMessage(PrecisionLandMaxAllowableErrors);
      }
      if (HasLandingGlobal2DPosError) {
        output.WriteRawTag(241, 4);
        output.WriteDouble(LandingGlobal2DPosError);
      }
      if (HasLandActiveYawAlign) {
        output.WriteRawTag(248, 4);
        output.WriteBool(LandActiveYawAlign);
      }
      if (HasLandPassiveYawAlign) {
        output.WriteRawTag(128, 5);
        output.WriteBool(LandPassiveYawAlign);
      }
      if (HasPortTableHeadingAngle) {
        output.WriteRawTag(137, 5);
        output.WriteDouble(PortTableHeadingAngle);
      }
      if (HasYawAngleAlignError) {
        output.WriteRawTag(145, 5);
        output.WriteDouble(YawAngleAlignError);
      }
      if (HasIsProtocolVersionConflict) {
        output.WriteRawTag(152, 5);
        output.WriteBool(IsProtocolVersionConflict);
      }
      if (HasCanEnterHighPosAccuRotorMode) {
        output.WriteRawTag(160, 5);
        output.WriteBool(CanEnterHighPosAccuRotorMode);
      }
      if (HasServerErrorsHasMessage) {
        output.WriteRawTag(168, 5);
        output.WriteBool(ServerErrorsHasMessage);
      }
      if (HasReceivedAircraftMessagesErrorCount) {
        output.WriteRawTag(176, 5);
        output.WriteInt32(ReceivedAircraftMessagesErrorCount);
      }
      if (HasReceivedAircraftMessagesWarningCount) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(ReceivedAircraftMessagesWarningCount);
      }
      if (HasIsInEngineerMode) {
        output.WriteRawTag(192, 5);
        output.WriteBool(IsInEngineerMode);
      }
      if (HasIsLowNzProtectionActivated) {
        output.WriteRawTag(200, 5);
        output.WriteBool(IsLowNzProtectionActivated);
      }
      if (HasIsHighAoAProtectionActivated) {
        output.WriteRawTag(208, 5);
        output.WriteBool(IsHighAoAProtectionActivated);
      }
      if (HasIsHighStructNzProtectionActivated) {
        output.WriteRawTag(216, 5);
        output.WriteBool(IsHighStructNzProtectionActivated);
      }
      if (HasIsLowSpeedPSPActivated) {
        output.WriteRawTag(224, 5);
        output.WriteBool(IsLowSpeedPSPActivated);
      }
      if (HasIsHighSpeedPSPActivated) {
        output.WriteRawTag(232, 5);
        output.WriteBool(IsHighSpeedPSPActivated);
      }
      if (HasIsAltitudeDropFloorActivated) {
        output.WriteRawTag(240, 5);
        output.WriteBool(IsAltitudeDropFloorActivated);
      }
      if (HasIsAltitudeRiseCeilingActivated) {
        output.WriteRawTag(248, 5);
        output.WriteBool(IsAltitudeRiseCeilingActivated);
      }
      if (HasAltitudeDeviation) {
        output.WriteRawTag(133, 6);
        output.WriteFloat(AltitudeDeviation);
      }
      if (HasIsAltitudeDeviationHigh) {
        output.WriteRawTag(136, 6);
        output.WriteBool(IsAltitudeDeviationHigh);
      }
      if (HasIsAltitudeDeviationLow) {
        output.WriteRawTag(144, 6);
        output.WriteBool(IsAltitudeDeviationLow);
      }
      if (HasIsRollLostControl) {
        output.WriteRawTag(152, 6);
        output.WriteBool(IsRollLostControl);
      }
      if (HasIsPitchLostControl) {
        output.WriteRawTag(160, 6);
        output.WriteBool(IsPitchLostControl);
      }
      if (HasEmergencyLandBecauseBatteryLow) {
        output.WriteRawTag(168, 6);
        output.WriteBool(EmergencyLandBecauseBatteryLow);
      }
      if (HasEmergencyLandBecauseFlyTimeHigh) {
        output.WriteRawTag(176, 6);
        output.WriteBool(EmergencyLandBecauseFlyTimeHigh);
      }
      if (HasIsRejectingTakeOff) {
        output.WriteRawTag(184, 6);
        output.WriteBool(IsRejectingTakeOff);
      }
      if (gyroHFRMSDPS_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(GyroHFRMSDPS);
      }
      if (HasIsLogFileAlmostFull) {
        output.WriteRawTag(200, 6);
        output.WriteBool(IsLogFileAlmostFull);
      }
      if (HasEnableOnGndFastFileTransmit) {
        output.WriteRawTag(208, 6);
        output.WriteBool(EnableOnGndFastFileTransmit);
      }
      if (HasMinimumRemainRatio) {
        output.WriteRawTag(217, 6);
        output.WriteDouble(MinimumRemainRatio);
      }
      if (HasWarningRemainRatio) {
        output.WriteRawTag(225, 6);
        output.WriteDouble(WarningRemainRatio);
      }
      if (HasDateTimeNow) {
        output.WriteRawTag(232, 6);
        output.WriteInt64(DateTimeNow);
      }
      if (HasDebugCurveLastReceiveTime) {
        output.WriteRawTag(240, 6);
        output.WriteInt64(DebugCurveLastReceiveTime);
      }
      if (HasLastReceivingGNSSRawDataTime) {
        output.WriteRawTag(248, 6);
        output.WriteInt64(LastReceivingGNSSRawDataTime);
      }
      if (HasAllGNSSRawDataCounter) {
        output.WriteRawTag(128, 7);
        output.WriteUInt64(AllGNSSRawDataCounter);
      }
      if (HasIsRequestOpenOnboardLog) {
        output.WriteRawTag(136, 7);
        output.WriteBool(IsRequestOpenOnboardLog);
      }
      if (HasIsOnboardLogOpen) {
        output.WriteRawTag(144, 7);
        output.WriteBool(IsOnboardLogOpen);
      }
      if (HasIsWingCruiseHasFailed) {
        output.WriteRawTag(152, 7);
        output.WriteBool(IsWingCruiseHasFailed);
      }
      if (HasIsEmergencyLand) {
        output.WriteRawTag(160, 7);
        output.WriteBool(IsEmergencyLand);
      }
      if (HasIsEmergencyLandRequested) {
        output.WriteRawTag(168, 7);
        output.WriteBool(IsEmergencyLandRequested);
      }
      if (HasDisableEmergencyAutoLand) {
        output.WriteRawTag(176, 7);
        output.WriteBool(DisableEmergencyAutoLand);
      }
      if (HasEnableGroundDistLowWarning) {
        output.WriteRawTag(184, 7);
        output.WriteBool(EnableGroundDistLowWarning);
      }
      if (HasIsLowGndDistWarning) {
        output.WriteRawTag(192, 7);
        output.WriteBool(IsLowGndDistWarning);
      }
      if (HasIsAGLBySonarAvailable) {
        output.WriteRawTag(200, 7);
        output.WriteBool(IsAGLBySonarAvailable);
      }
      if (HasLandingGearAltAGLByRadar) {
        output.WriteRawTag(213, 7);
        output.WriteFloat(LandingGearAltAGLByRadar);
      }
      if (HasIsLowAltProtectionActive) {
        output.WriteRawTag(216, 7);
        output.WriteBool(IsLowAltProtectionActive);
      }
      if (HasIsControllerHearingFromAircraft) {
        output.WriteRawTag(224, 7);
        output.WriteBool(IsControllerHearingFromAircraft);
      }
      if (HasIsAircraftHearingFromController) {
        output.WriteRawTag(232, 7);
        output.WriteBool(IsAircraftHearingFromController);
      }
      if (HasIsInOnGroundActionLayerCommandMode) {
        output.WriteRawTag(240, 7);
        output.WriteBool(IsInOnGroundActionLayerCommandMode);
      }
      if (HasHasManualRCReceiver) {
        output.WriteRawTag(248, 7);
        output.WriteBool(HasManualRCReceiver);
      }
      if (HasHasManualControlInputs) {
        output.WriteRawTag(128, 8);
        output.WriteBool(HasManualControlInputs);
      }
      if (HasEnableExceptionWhenRCReceiverNoSignal) {
        output.WriteRawTag(136, 8);
        output.WriteBool(EnableExceptionWhenRCReceiverNoSignal);
      }
      if (HasSensorInvalidMessage) {
        output.WriteRawTag(146, 8);
        output.WriteString(SensorInvalidMessage);
      }
      if (HasTaskMode) {
        output.WriteRawTag(152, 8);
        output.WriteEnum((int) TaskMode);
      }
      if (HasIsPilotControlActive) {
        output.WriteRawTag(160, 8);
        output.WriteBool(IsPilotControlActive);
      }
      if (HasManualControlInDisableMotorServoState) {
        output.WriteRawTag(168, 8);
        output.WriteBool(ManualControlInDisableMotorServoState);
      }
      if (HasCanEnterWingFlyWithRotorMode) {
        output.WriteRawTag(176, 8);
        output.WriteBool(CanEnterWingFlyWithRotorMode);
      }
      if (HasCanEnterWingCruiseMode) {
        output.WriteRawTag(184, 8);
        output.WriteBool(CanEnterWingCruiseMode);
      }
      if (HasCruiseMotorCount) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(CruiseMotorCount);
      }
      if (HasEnableCruiseMotorInRotorHoverMode) {
        output.WriteRawTag(200, 8);
        output.WriteBool(EnableCruiseMotorInRotorHoverMode);
      }
      if (HasEnforceRTKTakeOffAndLand) {
        output.WriteRawTag(208, 8);
        output.WriteBool(EnforceRTKTakeOffAndLand);
      }
      if (HasIsRTKAndIRSPrecisionOKForAutoPortTakeOff) {
        output.WriteRawTag(216, 8);
        output.WriteBool(IsRTKAndIRSPrecisionOKForAutoPortTakeOff);
      }
      if (HasIsGimbalCamSDCardDestroyPowerOn) {
        output.WriteRawTag(224, 8);
        output.WriteBool(IsGimbalCamSDCardDestroyPowerOn);
      }
      if (HasIsGimbalCameraNotDetected) {
        output.WriteRawTag(232, 8);
        output.WriteBool(IsGimbalCameraNotDetected);
      }
      if (HasTargetAltitudeHMSLOffset) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(TargetAltitudeHMSLOffset);
      }
      if (HasTargetAltitudeAGLOffset) {
        output.WriteRawTag(253, 8);
        output.WriteFloat(TargetAltitudeAGLOffset);
      }
      if (HasIsWingCruiseAirspeedPriorToHeight) {
        output.WriteRawTag(128, 9);
        output.WriteBool(IsWingCruiseAirspeedPriorToHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIsReceivingHot) {
        output.WriteRawTag(8);
        output.WriteBool(IsReceivingHot);
      }
      if (HasIsMotorsAndServosEnabled) {
        output.WriteRawTag(16);
        output.WriteBool(IsMotorsAndServosEnabled);
      }
      if (HasIsInTestMotorServoMode) {
        output.WriteRawTag(24);
        output.WriteBool(IsInTestMotorServoMode);
      }
      if (HasReceivedBytesPerSecond) {
        output.WriteRawTag(33);
        output.WriteDouble(ReceivedBytesPerSecond);
      }
      if (HasSentBytesPerSecond) {
        output.WriteRawTag(41);
        output.WriteDouble(SentBytesPerSecond);
      }
      if (HasConnectedDataLinkName) {
        output.WriteRawTag(50);
        output.WriteString(ConnectedDataLinkName);
      }
      if (HasAircraftUseFuelEngineForFixedWingCruise) {
        output.WriteRawTag(56);
        output.WriteBool(AircraftUseFuelEngineForFixedWingCruise);
      }
      actualThrottleServoPosition_.WriteTo(ref output, _repeated_actualThrottleServoPosition_codec);
      cylinderHeadMaxTemperature_.WriteTo(ref output, _repeated_cylinderHeadMaxTemperature_codec);
      estimatedPropellerThrustN_.WriteTo(ref output, _repeated_estimatedPropellerThrustN_codec);
      cruiseFuelEngineRPMs_.WriteTo(ref output, _repeated_cruiseFuelEngineRPMs_codec);
      if (HasShouldCruiseEngineAvailable) {
        output.WriteRawTag(96);
        output.WriteBool(ShouldCruiseEngineAvailable);
      }
      if (HasIsAllCruiseFuelEnginePowerOn) {
        output.WriteRawTag(104);
        output.WriteBool(IsAllCruiseFuelEnginePowerOn);
      }
      if (HasIsAllCruiseFuelEngineRunning) {
        output.WriteRawTag(112);
        output.WriteBool(IsAllCruiseFuelEngineRunning);
      }
      if (HasFlightControlUseAirspeedSensor) {
        output.WriteRawTag(120);
        output.WriteBool(FlightControlUseAirspeedSensor);
      }
      if (HasIsUsePitotTube) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsUsePitotTube);
      }
      if (HasIsInSafeMode) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsInSafeMode);
      }
      if (HasDoNotUseBaroSensor) {
        output.WriteRawTag(144, 1);
        output.WriteBool(DoNotUseBaroSensor);
      }
      if (HasTotalRotorAndCruisePower) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(TotalRotorAndCruisePower);
      }
      if (HasMinMotorVoltage) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(MinMotorVoltage);
      }
      if (HasMinBatteryRemainEnergyRatio) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(MinBatteryRemainEnergyRatio);
      }
      if (HasShowFullBatteryEndurance) {
        output.WriteRawTag(176, 1);
        output.WriteBool(ShowFullBatteryEndurance);
      }
      if (HasIsOnGround) {
        output.WriteRawTag(184, 1);
        output.WriteBool(IsOnGround);
      }
      if (HasAutoLandEnergyRatio) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(AutoLandEnergyRatio);
      }
      if (HasEnableBatteryEnergyLowAutoReturn) {
        output.WriteRawTag(200, 1);
        output.WriteBool(EnableBatteryEnergyLowAutoReturn);
      }
      if (HasAutoReturnBatteryEnergyRatio) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(AutoReturnBatteryEnergyRatio);
      }
      if (HasRemainCruiseEnergyWh) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(RemainCruiseEnergyWh);
      }
      if (HasRemainRotorEnergyWh) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(RemainRotorEnergyWh);
      }
      if (HasLonInnerMode) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) LonInnerMode);
      }
      if (HasAircraftMass) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(AircraftMass);
      }
      if (HasTargetFlySpeed) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(TargetFlySpeed);
      }
      if (HasCruisePowerEstimation) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(CruisePowerEstimation);
      }
      if (HasCruiseEnergyPerMeter) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(CruiseEnergyPerMeter);
      }
      if (HasRemainCruiseTime) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(RemainCruiseTime);
      }
      if (HasRemainCruiseDist) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(RemainCruiseDist);
      }
      if (HasVTOLPowerEstimation) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(VTOLPowerEstimation);
      }
      if (HasAirDensity) {
        output.WriteRawTag(173, 2);
        output.WriteFloat(AirDensity);
      }
      if (HasRemainVTOLTime) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(RemainVTOLTime);
      }
      if (HasAircraftHorizDistToLandAlongFlightPlan) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(AircraftHorizDistToLandAlongFlightPlan);
      }
      if (HasHasFixedWingModes) {
        output.WriteRawTag(192, 2);
        output.WriteBool(HasFixedWingModes);
      }
      if (HasRotorExpandState) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) RotorExpandState);
      }
      if (HasHasRetractableRotors) {
        output.WriteRawTag(208, 2);
        output.WriteBool(HasRetractableRotors);
      }
      if (HasIsAutoRetractLandingGear) {
        output.WriteRawTag(216, 2);
        output.WriteBool(IsAutoRetractLandingGear);
      }
      if (HasIsLandingGearRetracted) {
        output.WriteRawTag(224, 2);
        output.WriteBool(IsLandingGearRetracted);
      }
      if (HasRTKSolutionState) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) RTKSolutionState);
      }
      if (lLA_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(LLA);
      }
      if (eulerAnglesF_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(EulerAnglesF);
      }
      if (HasTargetAltitude) {
        output.WriteRawTag(129, 3);
        output.WriteDouble(TargetAltitude);
      }
      if (HasReferenceAltitude) {
        output.WriteRawTag(137, 3);
        output.WriteDouble(ReferenceAltitude);
      }
      if (HasTrueAirSpeed) {
        output.WriteRawTag(149, 3);
        output.WriteFloat(TrueAirSpeed);
      }
      if (HasGround2DSpeed) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(Ground2DSpeed);
      }
      if (HasStraightDistToTakeOff) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(StraightDistToTakeOff);
      }
      if (HasFlyDistance) {
        output.WriteRawTag(169, 3);
        output.WriteDouble(FlyDistance);
      }
      if (HasFlySeconds) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(FlySeconds);
      }
      if (HasHasEstimatedWind) {
        output.WriteRawTag(184, 3);
        output.WriteBool(HasEstimatedWind);
      }
      if (HasEstimatedWindAngle) {
        output.WriteRawTag(193, 3);
        output.WriteDouble(EstimatedWindAngle);
      }
      if (HasEstimatedWindSpeed) {
        output.WriteRawTag(201, 3);
        output.WriteDouble(EstimatedWindSpeed);
      }
      if (HasWriteCameraPosDataToFile) {
        output.WriteRawTag(208, 3);
        output.WriteBool(WriteCameraPosDataToFile);
      }
      if (HasUndownloadedPosDataCount) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(UndownloadedPosDataCount);
      }
      if (HasAverageRotorThrustRatioFor1G) {
        output.WriteRawTag(229, 3);
        output.WriteFloat(AverageRotorThrustRatioFor1G);
      }
      if (planeENUSpeed_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(PlaneENUSpeed);
      }
      if (HasIsGNSS2DAvailable) {
        output.WriteRawTag(240, 3);
        output.WriteBool(IsGNSS2DAvailable);
      }
      if (HasIsGNSSAltAvailable) {
        output.WriteRawTag(248, 3);
        output.WriteBool(IsGNSSAltAvailable);
      }
      if (HasUsingGnssSateNum) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(UsingGnssSateNum);
      }
      if (HasIsGNSSDataQualityGood) {
        output.WriteRawTag(136, 4);
        output.WriteBool(IsGNSSDataQualityGood);
      }
      if (HasGNSSsomeNotUsable) {
        output.WriteRawTag(144, 4);
        output.WriteBool(GNSSsomeNotUsable);
      }
      if (HasIsIRSReadyForTakeoff) {
        output.WriteRawTag(152, 4);
        output.WriteBool(IsIRSReadyForTakeoff);
      }
      if (HasIsInSensorCalibrationMode) {
        output.WriteRawTag(160, 4);
        output.WriteBool(IsInSensorCalibrationMode);
      }
      if (HasIsInNoMagMode) {
        output.WriteRawTag(168, 4);
        output.WriteBool(IsInNoMagMode);
      }
      if (HasIsUsingVisualPositionSystemForIRS) {
        output.WriteRawTag(176, 4);
        output.WriteBool(IsUsingVisualPositionSystemForIRS);
      }
      if (HasIsFlyTestParamsModified) {
        output.WriteRawTag(184, 4);
        output.WriteBool(IsFlyTestParamsModified);
      }
      if (HasIsInAutoVertPortOperationMode) {
        output.WriteRawTag(192, 4);
        output.WriteBool(IsInAutoVertPortOperationMode);
      }
      if (HasIsAutoPortLandElseAlterLand) {
        output.WriteRawTag(200, 4);
        output.WriteBool(IsAutoPortLandElseAlterLand);
      }
      if (HasIsVerticalLanding) {
        output.WriteRawTag(208, 4);
        output.WriteBool(IsVerticalLanding);
      }
      if (HasIsInLandingConstDescentAndAlignPhase) {
        output.WriteRawTag(216, 4);
        output.WriteBool(IsInLandingConstDescentAndAlignPhase);
      }
      if (HasIsVertLandPauseTouchDownForAlignment) {
        output.WriteRawTag(224, 4);
        output.WriteBool(IsVertLandPauseTouchDownForAlignment);
      }
      if (precisionLandMaxAllowableErrors_ != null) {
        output.WriteRawTag(234, 4);
        output.WriteMessage(PrecisionLandMaxAllowableErrors);
      }
      if (HasLandingGlobal2DPosError) {
        output.WriteRawTag(241, 4);
        output.WriteDouble(LandingGlobal2DPosError);
      }
      if (HasLandActiveYawAlign) {
        output.WriteRawTag(248, 4);
        output.WriteBool(LandActiveYawAlign);
      }
      if (HasLandPassiveYawAlign) {
        output.WriteRawTag(128, 5);
        output.WriteBool(LandPassiveYawAlign);
      }
      if (HasPortTableHeadingAngle) {
        output.WriteRawTag(137, 5);
        output.WriteDouble(PortTableHeadingAngle);
      }
      if (HasYawAngleAlignError) {
        output.WriteRawTag(145, 5);
        output.WriteDouble(YawAngleAlignError);
      }
      if (HasIsProtocolVersionConflict) {
        output.WriteRawTag(152, 5);
        output.WriteBool(IsProtocolVersionConflict);
      }
      if (HasCanEnterHighPosAccuRotorMode) {
        output.WriteRawTag(160, 5);
        output.WriteBool(CanEnterHighPosAccuRotorMode);
      }
      if (HasServerErrorsHasMessage) {
        output.WriteRawTag(168, 5);
        output.WriteBool(ServerErrorsHasMessage);
      }
      if (HasReceivedAircraftMessagesErrorCount) {
        output.WriteRawTag(176, 5);
        output.WriteInt32(ReceivedAircraftMessagesErrorCount);
      }
      if (HasReceivedAircraftMessagesWarningCount) {
        output.WriteRawTag(184, 5);
        output.WriteInt32(ReceivedAircraftMessagesWarningCount);
      }
      if (HasIsInEngineerMode) {
        output.WriteRawTag(192, 5);
        output.WriteBool(IsInEngineerMode);
      }
      if (HasIsLowNzProtectionActivated) {
        output.WriteRawTag(200, 5);
        output.WriteBool(IsLowNzProtectionActivated);
      }
      if (HasIsHighAoAProtectionActivated) {
        output.WriteRawTag(208, 5);
        output.WriteBool(IsHighAoAProtectionActivated);
      }
      if (HasIsHighStructNzProtectionActivated) {
        output.WriteRawTag(216, 5);
        output.WriteBool(IsHighStructNzProtectionActivated);
      }
      if (HasIsLowSpeedPSPActivated) {
        output.WriteRawTag(224, 5);
        output.WriteBool(IsLowSpeedPSPActivated);
      }
      if (HasIsHighSpeedPSPActivated) {
        output.WriteRawTag(232, 5);
        output.WriteBool(IsHighSpeedPSPActivated);
      }
      if (HasIsAltitudeDropFloorActivated) {
        output.WriteRawTag(240, 5);
        output.WriteBool(IsAltitudeDropFloorActivated);
      }
      if (HasIsAltitudeRiseCeilingActivated) {
        output.WriteRawTag(248, 5);
        output.WriteBool(IsAltitudeRiseCeilingActivated);
      }
      if (HasAltitudeDeviation) {
        output.WriteRawTag(133, 6);
        output.WriteFloat(AltitudeDeviation);
      }
      if (HasIsAltitudeDeviationHigh) {
        output.WriteRawTag(136, 6);
        output.WriteBool(IsAltitudeDeviationHigh);
      }
      if (HasIsAltitudeDeviationLow) {
        output.WriteRawTag(144, 6);
        output.WriteBool(IsAltitudeDeviationLow);
      }
      if (HasIsRollLostControl) {
        output.WriteRawTag(152, 6);
        output.WriteBool(IsRollLostControl);
      }
      if (HasIsPitchLostControl) {
        output.WriteRawTag(160, 6);
        output.WriteBool(IsPitchLostControl);
      }
      if (HasEmergencyLandBecauseBatteryLow) {
        output.WriteRawTag(168, 6);
        output.WriteBool(EmergencyLandBecauseBatteryLow);
      }
      if (HasEmergencyLandBecauseFlyTimeHigh) {
        output.WriteRawTag(176, 6);
        output.WriteBool(EmergencyLandBecauseFlyTimeHigh);
      }
      if (HasIsRejectingTakeOff) {
        output.WriteRawTag(184, 6);
        output.WriteBool(IsRejectingTakeOff);
      }
      if (gyroHFRMSDPS_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(GyroHFRMSDPS);
      }
      if (HasIsLogFileAlmostFull) {
        output.WriteRawTag(200, 6);
        output.WriteBool(IsLogFileAlmostFull);
      }
      if (HasEnableOnGndFastFileTransmit) {
        output.WriteRawTag(208, 6);
        output.WriteBool(EnableOnGndFastFileTransmit);
      }
      if (HasMinimumRemainRatio) {
        output.WriteRawTag(217, 6);
        output.WriteDouble(MinimumRemainRatio);
      }
      if (HasWarningRemainRatio) {
        output.WriteRawTag(225, 6);
        output.WriteDouble(WarningRemainRatio);
      }
      if (HasDateTimeNow) {
        output.WriteRawTag(232, 6);
        output.WriteInt64(DateTimeNow);
      }
      if (HasDebugCurveLastReceiveTime) {
        output.WriteRawTag(240, 6);
        output.WriteInt64(DebugCurveLastReceiveTime);
      }
      if (HasLastReceivingGNSSRawDataTime) {
        output.WriteRawTag(248, 6);
        output.WriteInt64(LastReceivingGNSSRawDataTime);
      }
      if (HasAllGNSSRawDataCounter) {
        output.WriteRawTag(128, 7);
        output.WriteUInt64(AllGNSSRawDataCounter);
      }
      if (HasIsRequestOpenOnboardLog) {
        output.WriteRawTag(136, 7);
        output.WriteBool(IsRequestOpenOnboardLog);
      }
      if (HasIsOnboardLogOpen) {
        output.WriteRawTag(144, 7);
        output.WriteBool(IsOnboardLogOpen);
      }
      if (HasIsWingCruiseHasFailed) {
        output.WriteRawTag(152, 7);
        output.WriteBool(IsWingCruiseHasFailed);
      }
      if (HasIsEmergencyLand) {
        output.WriteRawTag(160, 7);
        output.WriteBool(IsEmergencyLand);
      }
      if (HasIsEmergencyLandRequested) {
        output.WriteRawTag(168, 7);
        output.WriteBool(IsEmergencyLandRequested);
      }
      if (HasDisableEmergencyAutoLand) {
        output.WriteRawTag(176, 7);
        output.WriteBool(DisableEmergencyAutoLand);
      }
      if (HasEnableGroundDistLowWarning) {
        output.WriteRawTag(184, 7);
        output.WriteBool(EnableGroundDistLowWarning);
      }
      if (HasIsLowGndDistWarning) {
        output.WriteRawTag(192, 7);
        output.WriteBool(IsLowGndDistWarning);
      }
      if (HasIsAGLBySonarAvailable) {
        output.WriteRawTag(200, 7);
        output.WriteBool(IsAGLBySonarAvailable);
      }
      if (HasLandingGearAltAGLByRadar) {
        output.WriteRawTag(213, 7);
        output.WriteFloat(LandingGearAltAGLByRadar);
      }
      if (HasIsLowAltProtectionActive) {
        output.WriteRawTag(216, 7);
        output.WriteBool(IsLowAltProtectionActive);
      }
      if (HasIsControllerHearingFromAircraft) {
        output.WriteRawTag(224, 7);
        output.WriteBool(IsControllerHearingFromAircraft);
      }
      if (HasIsAircraftHearingFromController) {
        output.WriteRawTag(232, 7);
        output.WriteBool(IsAircraftHearingFromController);
      }
      if (HasIsInOnGroundActionLayerCommandMode) {
        output.WriteRawTag(240, 7);
        output.WriteBool(IsInOnGroundActionLayerCommandMode);
      }
      if (HasHasManualRCReceiver) {
        output.WriteRawTag(248, 7);
        output.WriteBool(HasManualRCReceiver);
      }
      if (HasHasManualControlInputs) {
        output.WriteRawTag(128, 8);
        output.WriteBool(HasManualControlInputs);
      }
      if (HasEnableExceptionWhenRCReceiverNoSignal) {
        output.WriteRawTag(136, 8);
        output.WriteBool(EnableExceptionWhenRCReceiverNoSignal);
      }
      if (HasSensorInvalidMessage) {
        output.WriteRawTag(146, 8);
        output.WriteString(SensorInvalidMessage);
      }
      if (HasTaskMode) {
        output.WriteRawTag(152, 8);
        output.WriteEnum((int) TaskMode);
      }
      if (HasIsPilotControlActive) {
        output.WriteRawTag(160, 8);
        output.WriteBool(IsPilotControlActive);
      }
      if (HasManualControlInDisableMotorServoState) {
        output.WriteRawTag(168, 8);
        output.WriteBool(ManualControlInDisableMotorServoState);
      }
      if (HasCanEnterWingFlyWithRotorMode) {
        output.WriteRawTag(176, 8);
        output.WriteBool(CanEnterWingFlyWithRotorMode);
      }
      if (HasCanEnterWingCruiseMode) {
        output.WriteRawTag(184, 8);
        output.WriteBool(CanEnterWingCruiseMode);
      }
      if (HasCruiseMotorCount) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(CruiseMotorCount);
      }
      if (HasEnableCruiseMotorInRotorHoverMode) {
        output.WriteRawTag(200, 8);
        output.WriteBool(EnableCruiseMotorInRotorHoverMode);
      }
      if (HasEnforceRTKTakeOffAndLand) {
        output.WriteRawTag(208, 8);
        output.WriteBool(EnforceRTKTakeOffAndLand);
      }
      if (HasIsRTKAndIRSPrecisionOKForAutoPortTakeOff) {
        output.WriteRawTag(216, 8);
        output.WriteBool(IsRTKAndIRSPrecisionOKForAutoPortTakeOff);
      }
      if (HasIsGimbalCamSDCardDestroyPowerOn) {
        output.WriteRawTag(224, 8);
        output.WriteBool(IsGimbalCamSDCardDestroyPowerOn);
      }
      if (HasIsGimbalCameraNotDetected) {
        output.WriteRawTag(232, 8);
        output.WriteBool(IsGimbalCameraNotDetected);
      }
      if (HasTargetAltitudeHMSLOffset) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(TargetAltitudeHMSLOffset);
      }
      if (HasTargetAltitudeAGLOffset) {
        output.WriteRawTag(253, 8);
        output.WriteFloat(TargetAltitudeAGLOffset);
      }
      if (HasIsWingCruiseAirspeedPriorToHeight) {
        output.WriteRawTag(128, 9);
        output.WriteBool(IsWingCruiseAirspeedPriorToHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIsReceivingHot) {
        size += 1 + 1;
      }
      if (HasIsMotorsAndServosEnabled) {
        size += 1 + 1;
      }
      if (HasIsInTestMotorServoMode) {
        size += 1 + 1;
      }
      if (HasReceivedBytesPerSecond) {
        size += 1 + 8;
      }
      if (HasSentBytesPerSecond) {
        size += 1 + 8;
      }
      if (HasConnectedDataLinkName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectedDataLinkName);
      }
      if (HasAircraftUseFuelEngineForFixedWingCruise) {
        size += 1 + 1;
      }
      size += actualThrottleServoPosition_.CalculateSize(_repeated_actualThrottleServoPosition_codec);
      size += cylinderHeadMaxTemperature_.CalculateSize(_repeated_cylinderHeadMaxTemperature_codec);
      size += estimatedPropellerThrustN_.CalculateSize(_repeated_estimatedPropellerThrustN_codec);
      size += cruiseFuelEngineRPMs_.CalculateSize(_repeated_cruiseFuelEngineRPMs_codec);
      if (HasShouldCruiseEngineAvailable) {
        size += 1 + 1;
      }
      if (HasIsAllCruiseFuelEnginePowerOn) {
        size += 1 + 1;
      }
      if (HasIsAllCruiseFuelEngineRunning) {
        size += 1 + 1;
      }
      if (HasFlightControlUseAirspeedSensor) {
        size += 1 + 1;
      }
      if (HasIsUsePitotTube) {
        size += 2 + 1;
      }
      if (HasIsInSafeMode) {
        size += 2 + 1;
      }
      if (HasDoNotUseBaroSensor) {
        size += 2 + 1;
      }
      if (HasTotalRotorAndCruisePower) {
        size += 2 + 4;
      }
      if (HasMinMotorVoltage) {
        size += 2 + 4;
      }
      if (HasMinBatteryRemainEnergyRatio) {
        size += 2 + 4;
      }
      if (HasShowFullBatteryEndurance) {
        size += 2 + 1;
      }
      if (HasIsOnGround) {
        size += 2 + 1;
      }
      if (HasAutoLandEnergyRatio) {
        size += 2 + 4;
      }
      if (HasEnableBatteryEnergyLowAutoReturn) {
        size += 2 + 1;
      }
      if (HasAutoReturnBatteryEnergyRatio) {
        size += 2 + 4;
      }
      if (HasRemainCruiseEnergyWh) {
        size += 2 + 4;
      }
      if (HasRemainRotorEnergyWh) {
        size += 2 + 4;
      }
      if (HasLonInnerMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LonInnerMode);
      }
      if (HasAircraftMass) {
        size += 2 + 4;
      }
      if (HasTargetFlySpeed) {
        size += 2 + 4;
      }
      if (HasCruisePowerEstimation) {
        size += 2 + 8;
      }
      if (HasCruiseEnergyPerMeter) {
        size += 2 + 8;
      }
      if (HasRemainCruiseTime) {
        size += 2 + 8;
      }
      if (HasRemainCruiseDist) {
        size += 2 + 8;
      }
      if (HasVTOLPowerEstimation) {
        size += 2 + 8;
      }
      if (HasAirDensity) {
        size += 2 + 4;
      }
      if (HasRemainVTOLTime) {
        size += 2 + 8;
      }
      if (HasAircraftHorizDistToLandAlongFlightPlan) {
        size += 2 + 4;
      }
      if (HasHasFixedWingModes) {
        size += 2 + 1;
      }
      if (HasRotorExpandState) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RotorExpandState);
      }
      if (HasHasRetractableRotors) {
        size += 2 + 1;
      }
      if (HasIsAutoRetractLandingGear) {
        size += 2 + 1;
      }
      if (HasIsLandingGearRetracted) {
        size += 2 + 1;
      }
      if (HasRTKSolutionState) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RTKSolutionState);
      }
      if (lLA_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LLA);
      }
      if (eulerAnglesF_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EulerAnglesF);
      }
      if (HasTargetAltitude) {
        size += 2 + 8;
      }
      if (HasReferenceAltitude) {
        size += 2 + 8;
      }
      if (HasTrueAirSpeed) {
        size += 2 + 4;
      }
      if (HasGround2DSpeed) {
        size += 2 + 4;
      }
      if (HasStraightDistToTakeOff) {
        size += 2 + 4;
      }
      if (HasFlyDistance) {
        size += 2 + 8;
      }
      if (HasFlySeconds) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FlySeconds);
      }
      if (HasHasEstimatedWind) {
        size += 2 + 1;
      }
      if (HasEstimatedWindAngle) {
        size += 2 + 8;
      }
      if (HasEstimatedWindSpeed) {
        size += 2 + 8;
      }
      if (HasWriteCameraPosDataToFile) {
        size += 2 + 1;
      }
      if (HasUndownloadedPosDataCount) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UndownloadedPosDataCount);
      }
      if (HasAverageRotorThrustRatioFor1G) {
        size += 2 + 4;
      }
      if (planeENUSpeed_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlaneENUSpeed);
      }
      if (HasIsGNSS2DAvailable) {
        size += 2 + 1;
      }
      if (HasIsGNSSAltAvailable) {
        size += 2 + 1;
      }
      if (HasUsingGnssSateNum) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UsingGnssSateNum);
      }
      if (HasIsGNSSDataQualityGood) {
        size += 2 + 1;
      }
      if (HasGNSSsomeNotUsable) {
        size += 2 + 1;
      }
      if (HasIsIRSReadyForTakeoff) {
        size += 2 + 1;
      }
      if (HasIsInSensorCalibrationMode) {
        size += 2 + 1;
      }
      if (HasIsInNoMagMode) {
        size += 2 + 1;
      }
      if (HasIsUsingVisualPositionSystemForIRS) {
        size += 2 + 1;
      }
      if (HasIsFlyTestParamsModified) {
        size += 2 + 1;
      }
      if (HasIsInAutoVertPortOperationMode) {
        size += 2 + 1;
      }
      if (HasIsAutoPortLandElseAlterLand) {
        size += 2 + 1;
      }
      if (HasIsVerticalLanding) {
        size += 2 + 1;
      }
      if (HasIsInLandingConstDescentAndAlignPhase) {
        size += 2 + 1;
      }
      if (HasIsVertLandPauseTouchDownForAlignment) {
        size += 2 + 1;
      }
      if (precisionLandMaxAllowableErrors_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrecisionLandMaxAllowableErrors);
      }
      if (HasLandingGlobal2DPosError) {
        size += 2 + 8;
      }
      if (HasLandActiveYawAlign) {
        size += 2 + 1;
      }
      if (HasLandPassiveYawAlign) {
        size += 2 + 1;
      }
      if (HasPortTableHeadingAngle) {
        size += 2 + 8;
      }
      if (HasYawAngleAlignError) {
        size += 2 + 8;
      }
      if (HasIsProtocolVersionConflict) {
        size += 2 + 1;
      }
      if (HasCanEnterHighPosAccuRotorMode) {
        size += 2 + 1;
      }
      if (HasServerErrorsHasMessage) {
        size += 2 + 1;
      }
      if (HasReceivedAircraftMessagesErrorCount) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReceivedAircraftMessagesErrorCount);
      }
      if (HasReceivedAircraftMessagesWarningCount) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReceivedAircraftMessagesWarningCount);
      }
      if (HasIsInEngineerMode) {
        size += 2 + 1;
      }
      if (HasIsLowNzProtectionActivated) {
        size += 2 + 1;
      }
      if (HasIsHighAoAProtectionActivated) {
        size += 2 + 1;
      }
      if (HasIsHighStructNzProtectionActivated) {
        size += 2 + 1;
      }
      if (HasIsLowSpeedPSPActivated) {
        size += 2 + 1;
      }
      if (HasIsHighSpeedPSPActivated) {
        size += 2 + 1;
      }
      if (HasIsAltitudeDropFloorActivated) {
        size += 2 + 1;
      }
      if (HasIsAltitudeRiseCeilingActivated) {
        size += 2 + 1;
      }
      if (HasAltitudeDeviation) {
        size += 2 + 4;
      }
      if (HasIsAltitudeDeviationHigh) {
        size += 2 + 1;
      }
      if (HasIsAltitudeDeviationLow) {
        size += 2 + 1;
      }
      if (HasIsRollLostControl) {
        size += 2 + 1;
      }
      if (HasIsPitchLostControl) {
        size += 2 + 1;
      }
      if (HasEmergencyLandBecauseBatteryLow) {
        size += 2 + 1;
      }
      if (HasEmergencyLandBecauseFlyTimeHigh) {
        size += 2 + 1;
      }
      if (HasIsRejectingTakeOff) {
        size += 2 + 1;
      }
      if (gyroHFRMSDPS_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GyroHFRMSDPS);
      }
      if (HasIsLogFileAlmostFull) {
        size += 2 + 1;
      }
      if (HasEnableOnGndFastFileTransmit) {
        size += 2 + 1;
      }
      if (HasMinimumRemainRatio) {
        size += 2 + 8;
      }
      if (HasWarningRemainRatio) {
        size += 2 + 8;
      }
      if (HasDateTimeNow) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DateTimeNow);
      }
      if (HasDebugCurveLastReceiveTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DebugCurveLastReceiveTime);
      }
      if (HasLastReceivingGNSSRawDataTime) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastReceivingGNSSRawDataTime);
      }
      if (HasAllGNSSRawDataCounter) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AllGNSSRawDataCounter);
      }
      if (HasIsRequestOpenOnboardLog) {
        size += 2 + 1;
      }
      if (HasIsOnboardLogOpen) {
        size += 2 + 1;
      }
      if (HasIsWingCruiseHasFailed) {
        size += 2 + 1;
      }
      if (HasIsEmergencyLand) {
        size += 2 + 1;
      }
      if (HasIsEmergencyLandRequested) {
        size += 2 + 1;
      }
      if (HasDisableEmergencyAutoLand) {
        size += 2 + 1;
      }
      if (HasEnableGroundDistLowWarning) {
        size += 2 + 1;
      }
      if (HasIsLowGndDistWarning) {
        size += 2 + 1;
      }
      if (HasIsAGLBySonarAvailable) {
        size += 2 + 1;
      }
      if (HasLandingGearAltAGLByRadar) {
        size += 2 + 4;
      }
      if (HasIsLowAltProtectionActive) {
        size += 2 + 1;
      }
      if (HasIsControllerHearingFromAircraft) {
        size += 2 + 1;
      }
      if (HasIsAircraftHearingFromController) {
        size += 2 + 1;
      }
      if (HasIsInOnGroundActionLayerCommandMode) {
        size += 2 + 1;
      }
      if (HasHasManualRCReceiver) {
        size += 2 + 1;
      }
      if (HasHasManualControlInputs) {
        size += 2 + 1;
      }
      if (HasEnableExceptionWhenRCReceiverNoSignal) {
        size += 2 + 1;
      }
      if (HasSensorInvalidMessage) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SensorInvalidMessage);
      }
      if (HasTaskMode) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TaskMode);
      }
      if (HasIsPilotControlActive) {
        size += 2 + 1;
      }
      if (HasManualControlInDisableMotorServoState) {
        size += 2 + 1;
      }
      if (HasCanEnterWingFlyWithRotorMode) {
        size += 2 + 1;
      }
      if (HasCanEnterWingCruiseMode) {
        size += 2 + 1;
      }
      if (HasCruiseMotorCount) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CruiseMotorCount);
      }
      if (HasEnableCruiseMotorInRotorHoverMode) {
        size += 2 + 1;
      }
      if (HasEnforceRTKTakeOffAndLand) {
        size += 2 + 1;
      }
      if (HasIsRTKAndIRSPrecisionOKForAutoPortTakeOff) {
        size += 2 + 1;
      }
      if (HasIsGimbalCamSDCardDestroyPowerOn) {
        size += 2 + 1;
      }
      if (HasIsGimbalCameraNotDetected) {
        size += 2 + 1;
      }
      if (HasTargetAltitudeHMSLOffset) {
        size += 2 + 4;
      }
      if (HasTargetAltitudeAGLOffset) {
        size += 2 + 4;
      }
      if (HasIsWingCruiseAirspeedPriorToHeight) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Proto_GenerateInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasIsReceivingHot) {
        IsReceivingHot = other.IsReceivingHot;
      }
      if (other.HasIsMotorsAndServosEnabled) {
        IsMotorsAndServosEnabled = other.IsMotorsAndServosEnabled;
      }
      if (other.HasIsInTestMotorServoMode) {
        IsInTestMotorServoMode = other.IsInTestMotorServoMode;
      }
      if (other.HasReceivedBytesPerSecond) {
        ReceivedBytesPerSecond = other.ReceivedBytesPerSecond;
      }
      if (other.HasSentBytesPerSecond) {
        SentBytesPerSecond = other.SentBytesPerSecond;
      }
      if (other.HasConnectedDataLinkName) {
        ConnectedDataLinkName = other.ConnectedDataLinkName;
      }
      if (other.HasAircraftUseFuelEngineForFixedWingCruise) {
        AircraftUseFuelEngineForFixedWingCruise = other.AircraftUseFuelEngineForFixedWingCruise;
      }
      actualThrottleServoPosition_.Add(other.actualThrottleServoPosition_);
      cylinderHeadMaxTemperature_.Add(other.cylinderHeadMaxTemperature_);
      estimatedPropellerThrustN_.Add(other.estimatedPropellerThrustN_);
      cruiseFuelEngineRPMs_.Add(other.cruiseFuelEngineRPMs_);
      if (other.HasShouldCruiseEngineAvailable) {
        ShouldCruiseEngineAvailable = other.ShouldCruiseEngineAvailable;
      }
      if (other.HasIsAllCruiseFuelEnginePowerOn) {
        IsAllCruiseFuelEnginePowerOn = other.IsAllCruiseFuelEnginePowerOn;
      }
      if (other.HasIsAllCruiseFuelEngineRunning) {
        IsAllCruiseFuelEngineRunning = other.IsAllCruiseFuelEngineRunning;
      }
      if (other.HasFlightControlUseAirspeedSensor) {
        FlightControlUseAirspeedSensor = other.FlightControlUseAirspeedSensor;
      }
      if (other.HasIsUsePitotTube) {
        IsUsePitotTube = other.IsUsePitotTube;
      }
      if (other.HasIsInSafeMode) {
        IsInSafeMode = other.IsInSafeMode;
      }
      if (other.HasDoNotUseBaroSensor) {
        DoNotUseBaroSensor = other.DoNotUseBaroSensor;
      }
      if (other.HasTotalRotorAndCruisePower) {
        TotalRotorAndCruisePower = other.TotalRotorAndCruisePower;
      }
      if (other.HasMinMotorVoltage) {
        MinMotorVoltage = other.MinMotorVoltage;
      }
      if (other.HasMinBatteryRemainEnergyRatio) {
        MinBatteryRemainEnergyRatio = other.MinBatteryRemainEnergyRatio;
      }
      if (other.HasShowFullBatteryEndurance) {
        ShowFullBatteryEndurance = other.ShowFullBatteryEndurance;
      }
      if (other.HasIsOnGround) {
        IsOnGround = other.IsOnGround;
      }
      if (other.HasAutoLandEnergyRatio) {
        AutoLandEnergyRatio = other.AutoLandEnergyRatio;
      }
      if (other.HasEnableBatteryEnergyLowAutoReturn) {
        EnableBatteryEnergyLowAutoReturn = other.EnableBatteryEnergyLowAutoReturn;
      }
      if (other.HasAutoReturnBatteryEnergyRatio) {
        AutoReturnBatteryEnergyRatio = other.AutoReturnBatteryEnergyRatio;
      }
      if (other.HasRemainCruiseEnergyWh) {
        RemainCruiseEnergyWh = other.RemainCruiseEnergyWh;
      }
      if (other.HasRemainRotorEnergyWh) {
        RemainRotorEnergyWh = other.RemainRotorEnergyWh;
      }
      if (other.HasLonInnerMode) {
        LonInnerMode = other.LonInnerMode;
      }
      if (other.HasAircraftMass) {
        AircraftMass = other.AircraftMass;
      }
      if (other.HasTargetFlySpeed) {
        TargetFlySpeed = other.TargetFlySpeed;
      }
      if (other.HasCruisePowerEstimation) {
        CruisePowerEstimation = other.CruisePowerEstimation;
      }
      if (other.HasCruiseEnergyPerMeter) {
        CruiseEnergyPerMeter = other.CruiseEnergyPerMeter;
      }
      if (other.HasRemainCruiseTime) {
        RemainCruiseTime = other.RemainCruiseTime;
      }
      if (other.HasRemainCruiseDist) {
        RemainCruiseDist = other.RemainCruiseDist;
      }
      if (other.HasVTOLPowerEstimation) {
        VTOLPowerEstimation = other.VTOLPowerEstimation;
      }
      if (other.HasAirDensity) {
        AirDensity = other.AirDensity;
      }
      if (other.HasRemainVTOLTime) {
        RemainVTOLTime = other.RemainVTOLTime;
      }
      if (other.HasAircraftHorizDistToLandAlongFlightPlan) {
        AircraftHorizDistToLandAlongFlightPlan = other.AircraftHorizDistToLandAlongFlightPlan;
      }
      if (other.HasHasFixedWingModes) {
        HasFixedWingModes = other.HasFixedWingModes;
      }
      if (other.HasRotorExpandState) {
        RotorExpandState = other.RotorExpandState;
      }
      if (other.HasHasRetractableRotors) {
        HasRetractableRotors = other.HasRetractableRotors;
      }
      if (other.HasIsAutoRetractLandingGear) {
        IsAutoRetractLandingGear = other.IsAutoRetractLandingGear;
      }
      if (other.HasIsLandingGearRetracted) {
        IsLandingGearRetracted = other.IsLandingGearRetracted;
      }
      if (other.HasRTKSolutionState) {
        RTKSolutionState = other.RTKSolutionState;
      }
      if (other.lLA_ != null) {
        if (lLA_ == null) {
          LLA = new global::MetaData.Proto_LLA();
        }
        LLA.MergeFrom(other.LLA);
      }
      if (other.eulerAnglesF_ != null) {
        if (eulerAnglesF_ == null) {
          EulerAnglesF = new global::MetaData.Proto_EulerAnglesF();
        }
        EulerAnglesF.MergeFrom(other.EulerAnglesF);
      }
      if (other.HasTargetAltitude) {
        TargetAltitude = other.TargetAltitude;
      }
      if (other.HasReferenceAltitude) {
        ReferenceAltitude = other.ReferenceAltitude;
      }
      if (other.HasTrueAirSpeed) {
        TrueAirSpeed = other.TrueAirSpeed;
      }
      if (other.HasGround2DSpeed) {
        Ground2DSpeed = other.Ground2DSpeed;
      }
      if (other.HasStraightDistToTakeOff) {
        StraightDistToTakeOff = other.StraightDistToTakeOff;
      }
      if (other.HasFlyDistance) {
        FlyDistance = other.FlyDistance;
      }
      if (other.HasFlySeconds) {
        FlySeconds = other.FlySeconds;
      }
      if (other.HasHasEstimatedWind) {
        HasEstimatedWind = other.HasEstimatedWind;
      }
      if (other.HasEstimatedWindAngle) {
        EstimatedWindAngle = other.EstimatedWindAngle;
      }
      if (other.HasEstimatedWindSpeed) {
        EstimatedWindSpeed = other.EstimatedWindSpeed;
      }
      if (other.HasWriteCameraPosDataToFile) {
        WriteCameraPosDataToFile = other.WriteCameraPosDataToFile;
      }
      if (other.HasUndownloadedPosDataCount) {
        UndownloadedPosDataCount = other.UndownloadedPosDataCount;
      }
      if (other.HasAverageRotorThrustRatioFor1G) {
        AverageRotorThrustRatioFor1G = other.AverageRotorThrustRatioFor1G;
      }
      if (other.planeENUSpeed_ != null) {
        if (planeENUSpeed_ == null) {
          PlaneENUSpeed = new global::MetaData.Proto_Vector3F();
        }
        PlaneENUSpeed.MergeFrom(other.PlaneENUSpeed);
      }
      if (other.HasIsGNSS2DAvailable) {
        IsGNSS2DAvailable = other.IsGNSS2DAvailable;
      }
      if (other.HasIsGNSSAltAvailable) {
        IsGNSSAltAvailable = other.IsGNSSAltAvailable;
      }
      if (other.HasUsingGnssSateNum) {
        UsingGnssSateNum = other.UsingGnssSateNum;
      }
      if (other.HasIsGNSSDataQualityGood) {
        IsGNSSDataQualityGood = other.IsGNSSDataQualityGood;
      }
      if (other.HasGNSSsomeNotUsable) {
        GNSSsomeNotUsable = other.GNSSsomeNotUsable;
      }
      if (other.HasIsIRSReadyForTakeoff) {
        IsIRSReadyForTakeoff = other.IsIRSReadyForTakeoff;
      }
      if (other.HasIsInSensorCalibrationMode) {
        IsInSensorCalibrationMode = other.IsInSensorCalibrationMode;
      }
      if (other.HasIsInNoMagMode) {
        IsInNoMagMode = other.IsInNoMagMode;
      }
      if (other.HasIsUsingVisualPositionSystemForIRS) {
        IsUsingVisualPositionSystemForIRS = other.IsUsingVisualPositionSystemForIRS;
      }
      if (other.HasIsFlyTestParamsModified) {
        IsFlyTestParamsModified = other.IsFlyTestParamsModified;
      }
      if (other.HasIsInAutoVertPortOperationMode) {
        IsInAutoVertPortOperationMode = other.IsInAutoVertPortOperationMode;
      }
      if (other.HasIsAutoPortLandElseAlterLand) {
        IsAutoPortLandElseAlterLand = other.IsAutoPortLandElseAlterLand;
      }
      if (other.HasIsVerticalLanding) {
        IsVerticalLanding = other.IsVerticalLanding;
      }
      if (other.HasIsInLandingConstDescentAndAlignPhase) {
        IsInLandingConstDescentAndAlignPhase = other.IsInLandingConstDescentAndAlignPhase;
      }
      if (other.HasIsVertLandPauseTouchDownForAlignment) {
        IsVertLandPauseTouchDownForAlignment = other.IsVertLandPauseTouchDownForAlignment;
      }
      if (other.precisionLandMaxAllowableErrors_ != null) {
        if (precisionLandMaxAllowableErrors_ == null) {
          PrecisionLandMaxAllowableErrors = new global::MetaData.Proto_PrecisionLandMaxAllowableErrors();
        }
        PrecisionLandMaxAllowableErrors.MergeFrom(other.PrecisionLandMaxAllowableErrors);
      }
      if (other.HasLandingGlobal2DPosError) {
        LandingGlobal2DPosError = other.LandingGlobal2DPosError;
      }
      if (other.HasLandActiveYawAlign) {
        LandActiveYawAlign = other.LandActiveYawAlign;
      }
      if (other.HasLandPassiveYawAlign) {
        LandPassiveYawAlign = other.LandPassiveYawAlign;
      }
      if (other.HasPortTableHeadingAngle) {
        PortTableHeadingAngle = other.PortTableHeadingAngle;
      }
      if (other.HasYawAngleAlignError) {
        YawAngleAlignError = other.YawAngleAlignError;
      }
      if (other.HasIsProtocolVersionConflict) {
        IsProtocolVersionConflict = other.IsProtocolVersionConflict;
      }
      if (other.HasCanEnterHighPosAccuRotorMode) {
        CanEnterHighPosAccuRotorMode = other.CanEnterHighPosAccuRotorMode;
      }
      if (other.HasServerErrorsHasMessage) {
        ServerErrorsHasMessage = other.ServerErrorsHasMessage;
      }
      if (other.HasReceivedAircraftMessagesErrorCount) {
        ReceivedAircraftMessagesErrorCount = other.ReceivedAircraftMessagesErrorCount;
      }
      if (other.HasReceivedAircraftMessagesWarningCount) {
        ReceivedAircraftMessagesWarningCount = other.ReceivedAircraftMessagesWarningCount;
      }
      if (other.HasIsInEngineerMode) {
        IsInEngineerMode = other.IsInEngineerMode;
      }
      if (other.HasIsLowNzProtectionActivated) {
        IsLowNzProtectionActivated = other.IsLowNzProtectionActivated;
      }
      if (other.HasIsHighAoAProtectionActivated) {
        IsHighAoAProtectionActivated = other.IsHighAoAProtectionActivated;
      }
      if (other.HasIsHighStructNzProtectionActivated) {
        IsHighStructNzProtectionActivated = other.IsHighStructNzProtectionActivated;
      }
      if (other.HasIsLowSpeedPSPActivated) {
        IsLowSpeedPSPActivated = other.IsLowSpeedPSPActivated;
      }
      if (other.HasIsHighSpeedPSPActivated) {
        IsHighSpeedPSPActivated = other.IsHighSpeedPSPActivated;
      }
      if (other.HasIsAltitudeDropFloorActivated) {
        IsAltitudeDropFloorActivated = other.IsAltitudeDropFloorActivated;
      }
      if (other.HasIsAltitudeRiseCeilingActivated) {
        IsAltitudeRiseCeilingActivated = other.IsAltitudeRiseCeilingActivated;
      }
      if (other.HasAltitudeDeviation) {
        AltitudeDeviation = other.AltitudeDeviation;
      }
      if (other.HasIsAltitudeDeviationHigh) {
        IsAltitudeDeviationHigh = other.IsAltitudeDeviationHigh;
      }
      if (other.HasIsAltitudeDeviationLow) {
        IsAltitudeDeviationLow = other.IsAltitudeDeviationLow;
      }
      if (other.HasIsRollLostControl) {
        IsRollLostControl = other.IsRollLostControl;
      }
      if (other.HasIsPitchLostControl) {
        IsPitchLostControl = other.IsPitchLostControl;
      }
      if (other.HasEmergencyLandBecauseBatteryLow) {
        EmergencyLandBecauseBatteryLow = other.EmergencyLandBecauseBatteryLow;
      }
      if (other.HasEmergencyLandBecauseFlyTimeHigh) {
        EmergencyLandBecauseFlyTimeHigh = other.EmergencyLandBecauseFlyTimeHigh;
      }
      if (other.HasIsRejectingTakeOff) {
        IsRejectingTakeOff = other.IsRejectingTakeOff;
      }
      if (other.gyroHFRMSDPS_ != null) {
        if (gyroHFRMSDPS_ == null) {
          GyroHFRMSDPS = new global::MetaData.Proto_GyroHFRMSDPS();
        }
        GyroHFRMSDPS.MergeFrom(other.GyroHFRMSDPS);
      }
      if (other.HasIsLogFileAlmostFull) {
        IsLogFileAlmostFull = other.IsLogFileAlmostFull;
      }
      if (other.HasEnableOnGndFastFileTransmit) {
        EnableOnGndFastFileTransmit = other.EnableOnGndFastFileTransmit;
      }
      if (other.HasMinimumRemainRatio) {
        MinimumRemainRatio = other.MinimumRemainRatio;
      }
      if (other.HasWarningRemainRatio) {
        WarningRemainRatio = other.WarningRemainRatio;
      }
      if (other.HasDateTimeNow) {
        DateTimeNow = other.DateTimeNow;
      }
      if (other.HasDebugCurveLastReceiveTime) {
        DebugCurveLastReceiveTime = other.DebugCurveLastReceiveTime;
      }
      if (other.HasLastReceivingGNSSRawDataTime) {
        LastReceivingGNSSRawDataTime = other.LastReceivingGNSSRawDataTime;
      }
      if (other.HasAllGNSSRawDataCounter) {
        AllGNSSRawDataCounter = other.AllGNSSRawDataCounter;
      }
      if (other.HasIsRequestOpenOnboardLog) {
        IsRequestOpenOnboardLog = other.IsRequestOpenOnboardLog;
      }
      if (other.HasIsOnboardLogOpen) {
        IsOnboardLogOpen = other.IsOnboardLogOpen;
      }
      if (other.HasIsWingCruiseHasFailed) {
        IsWingCruiseHasFailed = other.IsWingCruiseHasFailed;
      }
      if (other.HasIsEmergencyLand) {
        IsEmergencyLand = other.IsEmergencyLand;
      }
      if (other.HasIsEmergencyLandRequested) {
        IsEmergencyLandRequested = other.IsEmergencyLandRequested;
      }
      if (other.HasDisableEmergencyAutoLand) {
        DisableEmergencyAutoLand = other.DisableEmergencyAutoLand;
      }
      if (other.HasEnableGroundDistLowWarning) {
        EnableGroundDistLowWarning = other.EnableGroundDistLowWarning;
      }
      if (other.HasIsLowGndDistWarning) {
        IsLowGndDistWarning = other.IsLowGndDistWarning;
      }
      if (other.HasIsAGLBySonarAvailable) {
        IsAGLBySonarAvailable = other.IsAGLBySonarAvailable;
      }
      if (other.HasLandingGearAltAGLByRadar) {
        LandingGearAltAGLByRadar = other.LandingGearAltAGLByRadar;
      }
      if (other.HasIsLowAltProtectionActive) {
        IsLowAltProtectionActive = other.IsLowAltProtectionActive;
      }
      if (other.HasIsControllerHearingFromAircraft) {
        IsControllerHearingFromAircraft = other.IsControllerHearingFromAircraft;
      }
      if (other.HasIsAircraftHearingFromController) {
        IsAircraftHearingFromController = other.IsAircraftHearingFromController;
      }
      if (other.HasIsInOnGroundActionLayerCommandMode) {
        IsInOnGroundActionLayerCommandMode = other.IsInOnGroundActionLayerCommandMode;
      }
      if (other.HasHasManualRCReceiver) {
        HasManualRCReceiver = other.HasManualRCReceiver;
      }
      if (other.HasHasManualControlInputs) {
        HasManualControlInputs = other.HasManualControlInputs;
      }
      if (other.HasEnableExceptionWhenRCReceiverNoSignal) {
        EnableExceptionWhenRCReceiverNoSignal = other.EnableExceptionWhenRCReceiverNoSignal;
      }
      if (other.HasSensorInvalidMessage) {
        SensorInvalidMessage = other.SensorInvalidMessage;
      }
      if (other.HasTaskMode) {
        TaskMode = other.TaskMode;
      }
      if (other.HasIsPilotControlActive) {
        IsPilotControlActive = other.IsPilotControlActive;
      }
      if (other.HasManualControlInDisableMotorServoState) {
        ManualControlInDisableMotorServoState = other.ManualControlInDisableMotorServoState;
      }
      if (other.HasCanEnterWingFlyWithRotorMode) {
        CanEnterWingFlyWithRotorMode = other.CanEnterWingFlyWithRotorMode;
      }
      if (other.HasCanEnterWingCruiseMode) {
        CanEnterWingCruiseMode = other.CanEnterWingCruiseMode;
      }
      if (other.HasCruiseMotorCount) {
        CruiseMotorCount = other.CruiseMotorCount;
      }
      if (other.HasEnableCruiseMotorInRotorHoverMode) {
        EnableCruiseMotorInRotorHoverMode = other.EnableCruiseMotorInRotorHoverMode;
      }
      if (other.HasEnforceRTKTakeOffAndLand) {
        EnforceRTKTakeOffAndLand = other.EnforceRTKTakeOffAndLand;
      }
      if (other.HasIsRTKAndIRSPrecisionOKForAutoPortTakeOff) {
        IsRTKAndIRSPrecisionOKForAutoPortTakeOff = other.IsRTKAndIRSPrecisionOKForAutoPortTakeOff;
      }
      if (other.HasIsGimbalCamSDCardDestroyPowerOn) {
        IsGimbalCamSDCardDestroyPowerOn = other.IsGimbalCamSDCardDestroyPowerOn;
      }
      if (other.HasIsGimbalCameraNotDetected) {
        IsGimbalCameraNotDetected = other.IsGimbalCameraNotDetected;
      }
      if (other.HasTargetAltitudeHMSLOffset) {
        TargetAltitudeHMSLOffset = other.TargetAltitudeHMSLOffset;
      }
      if (other.HasTargetAltitudeAGLOffset) {
        TargetAltitudeAGLOffset = other.TargetAltitudeAGLOffset;
      }
      if (other.HasIsWingCruiseAirspeedPriorToHeight) {
        IsWingCruiseAirspeedPriorToHeight = other.IsWingCruiseAirspeedPriorToHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsReceivingHot = input.ReadBool();
            break;
          }
          case 16: {
            IsMotorsAndServosEnabled = input.ReadBool();
            break;
          }
          case 24: {
            IsInTestMotorServoMode = input.ReadBool();
            break;
          }
          case 33: {
            ReceivedBytesPerSecond = input.ReadDouble();
            break;
          }
          case 41: {
            SentBytesPerSecond = input.ReadDouble();
            break;
          }
          case 50: {
            ConnectedDataLinkName = input.ReadString();
            break;
          }
          case 56: {
            AircraftUseFuelEngineForFixedWingCruise = input.ReadBool();
            break;
          }
          case 66:
          case 69: {
            actualThrottleServoPosition_.AddEntriesFrom(input, _repeated_actualThrottleServoPosition_codec);
            break;
          }
          case 74:
          case 77: {
            cylinderHeadMaxTemperature_.AddEntriesFrom(input, _repeated_cylinderHeadMaxTemperature_codec);
            break;
          }
          case 82:
          case 85: {
            estimatedPropellerThrustN_.AddEntriesFrom(input, _repeated_estimatedPropellerThrustN_codec);
            break;
          }
          case 90:
          case 88: {
            cruiseFuelEngineRPMs_.AddEntriesFrom(input, _repeated_cruiseFuelEngineRPMs_codec);
            break;
          }
          case 96: {
            ShouldCruiseEngineAvailable = input.ReadBool();
            break;
          }
          case 104: {
            IsAllCruiseFuelEnginePowerOn = input.ReadBool();
            break;
          }
          case 112: {
            IsAllCruiseFuelEngineRunning = input.ReadBool();
            break;
          }
          case 120: {
            FlightControlUseAirspeedSensor = input.ReadBool();
            break;
          }
          case 128: {
            IsUsePitotTube = input.ReadBool();
            break;
          }
          case 136: {
            IsInSafeMode = input.ReadBool();
            break;
          }
          case 144: {
            DoNotUseBaroSensor = input.ReadBool();
            break;
          }
          case 157: {
            TotalRotorAndCruisePower = input.ReadFloat();
            break;
          }
          case 165: {
            MinMotorVoltage = input.ReadFloat();
            break;
          }
          case 173: {
            MinBatteryRemainEnergyRatio = input.ReadFloat();
            break;
          }
          case 176: {
            ShowFullBatteryEndurance = input.ReadBool();
            break;
          }
          case 184: {
            IsOnGround = input.ReadBool();
            break;
          }
          case 197: {
            AutoLandEnergyRatio = input.ReadFloat();
            break;
          }
          case 200: {
            EnableBatteryEnergyLowAutoReturn = input.ReadBool();
            break;
          }
          case 213: {
            AutoReturnBatteryEnergyRatio = input.ReadFloat();
            break;
          }
          case 221: {
            RemainCruiseEnergyWh = input.ReadFloat();
            break;
          }
          case 229: {
            RemainRotorEnergyWh = input.ReadFloat();
            break;
          }
          case 232: {
            LonInnerMode = (global::MetaData.Proto_FCControlInnerLoopLonModes) input.ReadEnum();
            break;
          }
          case 245: {
            AircraftMass = input.ReadFloat();
            break;
          }
          case 253: {
            TargetFlySpeed = input.ReadFloat();
            break;
          }
          case 257: {
            CruisePowerEstimation = input.ReadDouble();
            break;
          }
          case 265: {
            CruiseEnergyPerMeter = input.ReadDouble();
            break;
          }
          case 273: {
            RemainCruiseTime = input.ReadDouble();
            break;
          }
          case 281: {
            RemainCruiseDist = input.ReadDouble();
            break;
          }
          case 289: {
            VTOLPowerEstimation = input.ReadDouble();
            break;
          }
          case 301: {
            AirDensity = input.ReadFloat();
            break;
          }
          case 305: {
            RemainVTOLTime = input.ReadDouble();
            break;
          }
          case 317: {
            AircraftHorizDistToLandAlongFlightPlan = input.ReadFloat();
            break;
          }
          case 320: {
            HasFixedWingModes = input.ReadBool();
            break;
          }
          case 328: {
            RotorExpandState = (global::MetaData.Proto_RotorFoldingStates) input.ReadEnum();
            break;
          }
          case 336: {
            HasRetractableRotors = input.ReadBool();
            break;
          }
          case 344: {
            IsAutoRetractLandingGear = input.ReadBool();
            break;
          }
          case 352: {
            IsLandingGearRetracted = input.ReadBool();
            break;
          }
          case 360: {
            RTKSolutionState = (global::MetaData.Proto_RTKSolutionState) input.ReadEnum();
            break;
          }
          case 370: {
            if (lLA_ == null) {
              LLA = new global::MetaData.Proto_LLA();
            }
            input.ReadMessage(LLA);
            break;
          }
          case 378: {
            if (eulerAnglesF_ == null) {
              EulerAnglesF = new global::MetaData.Proto_EulerAnglesF();
            }
            input.ReadMessage(EulerAnglesF);
            break;
          }
          case 385: {
            TargetAltitude = input.ReadDouble();
            break;
          }
          case 393: {
            ReferenceAltitude = input.ReadDouble();
            break;
          }
          case 405: {
            TrueAirSpeed = input.ReadFloat();
            break;
          }
          case 413: {
            Ground2DSpeed = input.ReadFloat();
            break;
          }
          case 421: {
            StraightDistToTakeOff = input.ReadFloat();
            break;
          }
          case 425: {
            FlyDistance = input.ReadDouble();
            break;
          }
          case 432: {
            FlySeconds = input.ReadUInt32();
            break;
          }
          case 440: {
            HasEstimatedWind = input.ReadBool();
            break;
          }
          case 449: {
            EstimatedWindAngle = input.ReadDouble();
            break;
          }
          case 457: {
            EstimatedWindSpeed = input.ReadDouble();
            break;
          }
          case 464: {
            WriteCameraPosDataToFile = input.ReadBool();
            break;
          }
          case 472: {
            UndownloadedPosDataCount = input.ReadUInt32();
            break;
          }
          case 485: {
            AverageRotorThrustRatioFor1G = input.ReadFloat();
            break;
          }
          case 490: {
            if (planeENUSpeed_ == null) {
              PlaneENUSpeed = new global::MetaData.Proto_Vector3F();
            }
            input.ReadMessage(PlaneENUSpeed);
            break;
          }
          case 496: {
            IsGNSS2DAvailable = input.ReadBool();
            break;
          }
          case 504: {
            IsGNSSAltAvailable = input.ReadBool();
            break;
          }
          case 512: {
            UsingGnssSateNum = input.ReadInt32();
            break;
          }
          case 520: {
            IsGNSSDataQualityGood = input.ReadBool();
            break;
          }
          case 528: {
            GNSSsomeNotUsable = input.ReadBool();
            break;
          }
          case 536: {
            IsIRSReadyForTakeoff = input.ReadBool();
            break;
          }
          case 544: {
            IsInSensorCalibrationMode = input.ReadBool();
            break;
          }
          case 552: {
            IsInNoMagMode = input.ReadBool();
            break;
          }
          case 560: {
            IsUsingVisualPositionSystemForIRS = input.ReadBool();
            break;
          }
          case 568: {
            IsFlyTestParamsModified = input.ReadBool();
            break;
          }
          case 576: {
            IsInAutoVertPortOperationMode = input.ReadBool();
            break;
          }
          case 584: {
            IsAutoPortLandElseAlterLand = input.ReadBool();
            break;
          }
          case 592: {
            IsVerticalLanding = input.ReadBool();
            break;
          }
          case 600: {
            IsInLandingConstDescentAndAlignPhase = input.ReadBool();
            break;
          }
          case 608: {
            IsVertLandPauseTouchDownForAlignment = input.ReadBool();
            break;
          }
          case 618: {
            if (precisionLandMaxAllowableErrors_ == null) {
              PrecisionLandMaxAllowableErrors = new global::MetaData.Proto_PrecisionLandMaxAllowableErrors();
            }
            input.ReadMessage(PrecisionLandMaxAllowableErrors);
            break;
          }
          case 625: {
            LandingGlobal2DPosError = input.ReadDouble();
            break;
          }
          case 632: {
            LandActiveYawAlign = input.ReadBool();
            break;
          }
          case 640: {
            LandPassiveYawAlign = input.ReadBool();
            break;
          }
          case 649: {
            PortTableHeadingAngle = input.ReadDouble();
            break;
          }
          case 657: {
            YawAngleAlignError = input.ReadDouble();
            break;
          }
          case 664: {
            IsProtocolVersionConflict = input.ReadBool();
            break;
          }
          case 672: {
            CanEnterHighPosAccuRotorMode = input.ReadBool();
            break;
          }
          case 680: {
            ServerErrorsHasMessage = input.ReadBool();
            break;
          }
          case 688: {
            ReceivedAircraftMessagesErrorCount = input.ReadInt32();
            break;
          }
          case 696: {
            ReceivedAircraftMessagesWarningCount = input.ReadInt32();
            break;
          }
          case 704: {
            IsInEngineerMode = input.ReadBool();
            break;
          }
          case 712: {
            IsLowNzProtectionActivated = input.ReadBool();
            break;
          }
          case 720: {
            IsHighAoAProtectionActivated = input.ReadBool();
            break;
          }
          case 728: {
            IsHighStructNzProtectionActivated = input.ReadBool();
            break;
          }
          case 736: {
            IsLowSpeedPSPActivated = input.ReadBool();
            break;
          }
          case 744: {
            IsHighSpeedPSPActivated = input.ReadBool();
            break;
          }
          case 752: {
            IsAltitudeDropFloorActivated = input.ReadBool();
            break;
          }
          case 760: {
            IsAltitudeRiseCeilingActivated = input.ReadBool();
            break;
          }
          case 773: {
            AltitudeDeviation = input.ReadFloat();
            break;
          }
          case 776: {
            IsAltitudeDeviationHigh = input.ReadBool();
            break;
          }
          case 784: {
            IsAltitudeDeviationLow = input.ReadBool();
            break;
          }
          case 792: {
            IsRollLostControl = input.ReadBool();
            break;
          }
          case 800: {
            IsPitchLostControl = input.ReadBool();
            break;
          }
          case 808: {
            EmergencyLandBecauseBatteryLow = input.ReadBool();
            break;
          }
          case 816: {
            EmergencyLandBecauseFlyTimeHigh = input.ReadBool();
            break;
          }
          case 824: {
            IsRejectingTakeOff = input.ReadBool();
            break;
          }
          case 834: {
            if (gyroHFRMSDPS_ == null) {
              GyroHFRMSDPS = new global::MetaData.Proto_GyroHFRMSDPS();
            }
            input.ReadMessage(GyroHFRMSDPS);
            break;
          }
          case 840: {
            IsLogFileAlmostFull = input.ReadBool();
            break;
          }
          case 848: {
            EnableOnGndFastFileTransmit = input.ReadBool();
            break;
          }
          case 857: {
            MinimumRemainRatio = input.ReadDouble();
            break;
          }
          case 865: {
            WarningRemainRatio = input.ReadDouble();
            break;
          }
          case 872: {
            DateTimeNow = input.ReadInt64();
            break;
          }
          case 880: {
            DebugCurveLastReceiveTime = input.ReadInt64();
            break;
          }
          case 888: {
            LastReceivingGNSSRawDataTime = input.ReadInt64();
            break;
          }
          case 896: {
            AllGNSSRawDataCounter = input.ReadUInt64();
            break;
          }
          case 904: {
            IsRequestOpenOnboardLog = input.ReadBool();
            break;
          }
          case 912: {
            IsOnboardLogOpen = input.ReadBool();
            break;
          }
          case 920: {
            IsWingCruiseHasFailed = input.ReadBool();
            break;
          }
          case 928: {
            IsEmergencyLand = input.ReadBool();
            break;
          }
          case 936: {
            IsEmergencyLandRequested = input.ReadBool();
            break;
          }
          case 944: {
            DisableEmergencyAutoLand = input.ReadBool();
            break;
          }
          case 952: {
            EnableGroundDistLowWarning = input.ReadBool();
            break;
          }
          case 960: {
            IsLowGndDistWarning = input.ReadBool();
            break;
          }
          case 968: {
            IsAGLBySonarAvailable = input.ReadBool();
            break;
          }
          case 981: {
            LandingGearAltAGLByRadar = input.ReadFloat();
            break;
          }
          case 984: {
            IsLowAltProtectionActive = input.ReadBool();
            break;
          }
          case 992: {
            IsControllerHearingFromAircraft = input.ReadBool();
            break;
          }
          case 1000: {
            IsAircraftHearingFromController = input.ReadBool();
            break;
          }
          case 1008: {
            IsInOnGroundActionLayerCommandMode = input.ReadBool();
            break;
          }
          case 1016: {
            HasManualRCReceiver = input.ReadBool();
            break;
          }
          case 1024: {
            HasManualControlInputs = input.ReadBool();
            break;
          }
          case 1032: {
            EnableExceptionWhenRCReceiverNoSignal = input.ReadBool();
            break;
          }
          case 1042: {
            SensorInvalidMessage = input.ReadString();
            break;
          }
          case 1048: {
            TaskMode = (global::MetaData.Proto_ControlTaskModes) input.ReadEnum();
            break;
          }
          case 1056: {
            IsPilotControlActive = input.ReadBool();
            break;
          }
          case 1064: {
            ManualControlInDisableMotorServoState = input.ReadBool();
            break;
          }
          case 1072: {
            CanEnterWingFlyWithRotorMode = input.ReadBool();
            break;
          }
          case 1080: {
            CanEnterWingCruiseMode = input.ReadBool();
            break;
          }
          case 1088: {
            CruiseMotorCount = input.ReadInt32();
            break;
          }
          case 1096: {
            EnableCruiseMotorInRotorHoverMode = input.ReadBool();
            break;
          }
          case 1104: {
            EnforceRTKTakeOffAndLand = input.ReadBool();
            break;
          }
          case 1112: {
            IsRTKAndIRSPrecisionOKForAutoPortTakeOff = input.ReadBool();
            break;
          }
          case 1120: {
            IsGimbalCamSDCardDestroyPowerOn = input.ReadBool();
            break;
          }
          case 1128: {
            IsGimbalCameraNotDetected = input.ReadBool();
            break;
          }
          case 1141: {
            TargetAltitudeHMSLOffset = input.ReadFloat();
            break;
          }
          case 1149: {
            TargetAltitudeAGLOffset = input.ReadFloat();
            break;
          }
          case 1152: {
            IsWingCruiseAirspeedPriorToHeight = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsReceivingHot = input.ReadBool();
            break;
          }
          case 16: {
            IsMotorsAndServosEnabled = input.ReadBool();
            break;
          }
          case 24: {
            IsInTestMotorServoMode = input.ReadBool();
            break;
          }
          case 33: {
            ReceivedBytesPerSecond = input.ReadDouble();
            break;
          }
          case 41: {
            SentBytesPerSecond = input.ReadDouble();
            break;
          }
          case 50: {
            ConnectedDataLinkName = input.ReadString();
            break;
          }
          case 56: {
            AircraftUseFuelEngineForFixedWingCruise = input.ReadBool();
            break;
          }
          case 66:
          case 69: {
            actualThrottleServoPosition_.AddEntriesFrom(ref input, _repeated_actualThrottleServoPosition_codec);
            break;
          }
          case 74:
          case 77: {
            cylinderHeadMaxTemperature_.AddEntriesFrom(ref input, _repeated_cylinderHeadMaxTemperature_codec);
            break;
          }
          case 82:
          case 85: {
            estimatedPropellerThrustN_.AddEntriesFrom(ref input, _repeated_estimatedPropellerThrustN_codec);
            break;
          }
          case 90:
          case 88: {
            cruiseFuelEngineRPMs_.AddEntriesFrom(ref input, _repeated_cruiseFuelEngineRPMs_codec);
            break;
          }
          case 96: {
            ShouldCruiseEngineAvailable = input.ReadBool();
            break;
          }
          case 104: {
            IsAllCruiseFuelEnginePowerOn = input.ReadBool();
            break;
          }
          case 112: {
            IsAllCruiseFuelEngineRunning = input.ReadBool();
            break;
          }
          case 120: {
            FlightControlUseAirspeedSensor = input.ReadBool();
            break;
          }
          case 128: {
            IsUsePitotTube = input.ReadBool();
            break;
          }
          case 136: {
            IsInSafeMode = input.ReadBool();
            break;
          }
          case 144: {
            DoNotUseBaroSensor = input.ReadBool();
            break;
          }
          case 157: {
            TotalRotorAndCruisePower = input.ReadFloat();
            break;
          }
          case 165: {
            MinMotorVoltage = input.ReadFloat();
            break;
          }
          case 173: {
            MinBatteryRemainEnergyRatio = input.ReadFloat();
            break;
          }
          case 176: {
            ShowFullBatteryEndurance = input.ReadBool();
            break;
          }
          case 184: {
            IsOnGround = input.ReadBool();
            break;
          }
          case 197: {
            AutoLandEnergyRatio = input.ReadFloat();
            break;
          }
          case 200: {
            EnableBatteryEnergyLowAutoReturn = input.ReadBool();
            break;
          }
          case 213: {
            AutoReturnBatteryEnergyRatio = input.ReadFloat();
            break;
          }
          case 221: {
            RemainCruiseEnergyWh = input.ReadFloat();
            break;
          }
          case 229: {
            RemainRotorEnergyWh = input.ReadFloat();
            break;
          }
          case 232: {
            LonInnerMode = (global::MetaData.Proto_FCControlInnerLoopLonModes) input.ReadEnum();
            break;
          }
          case 245: {
            AircraftMass = input.ReadFloat();
            break;
          }
          case 253: {
            TargetFlySpeed = input.ReadFloat();
            break;
          }
          case 257: {
            CruisePowerEstimation = input.ReadDouble();
            break;
          }
          case 265: {
            CruiseEnergyPerMeter = input.ReadDouble();
            break;
          }
          case 273: {
            RemainCruiseTime = input.ReadDouble();
            break;
          }
          case 281: {
            RemainCruiseDist = input.ReadDouble();
            break;
          }
          case 289: {
            VTOLPowerEstimation = input.ReadDouble();
            break;
          }
          case 301: {
            AirDensity = input.ReadFloat();
            break;
          }
          case 305: {
            RemainVTOLTime = input.ReadDouble();
            break;
          }
          case 317: {
            AircraftHorizDistToLandAlongFlightPlan = input.ReadFloat();
            break;
          }
          case 320: {
            HasFixedWingModes = input.ReadBool();
            break;
          }
          case 328: {
            RotorExpandState = (global::MetaData.Proto_RotorFoldingStates) input.ReadEnum();
            break;
          }
          case 336: {
            HasRetractableRotors = input.ReadBool();
            break;
          }
          case 344: {
            IsAutoRetractLandingGear = input.ReadBool();
            break;
          }
          case 352: {
            IsLandingGearRetracted = input.ReadBool();
            break;
          }
          case 360: {
            RTKSolutionState = (global::MetaData.Proto_RTKSolutionState) input.ReadEnum();
            break;
          }
          case 370: {
            if (lLA_ == null) {
              LLA = new global::MetaData.Proto_LLA();
            }
            input.ReadMessage(LLA);
            break;
          }
          case 378: {
            if (eulerAnglesF_ == null) {
              EulerAnglesF = new global::MetaData.Proto_EulerAnglesF();
            }
            input.ReadMessage(EulerAnglesF);
            break;
          }
          case 385: {
            TargetAltitude = input.ReadDouble();
            break;
          }
          case 393: {
            ReferenceAltitude = input.ReadDouble();
            break;
          }
          case 405: {
            TrueAirSpeed = input.ReadFloat();
            break;
          }
          case 413: {
            Ground2DSpeed = input.ReadFloat();
            break;
          }
          case 421: {
            StraightDistToTakeOff = input.ReadFloat();
            break;
          }
          case 425: {
            FlyDistance = input.ReadDouble();
            break;
          }
          case 432: {
            FlySeconds = input.ReadUInt32();
            break;
          }
          case 440: {
            HasEstimatedWind = input.ReadBool();
            break;
          }
          case 449: {
            EstimatedWindAngle = input.ReadDouble();
            break;
          }
          case 457: {
            EstimatedWindSpeed = input.ReadDouble();
            break;
          }
          case 464: {
            WriteCameraPosDataToFile = input.ReadBool();
            break;
          }
          case 472: {
            UndownloadedPosDataCount = input.ReadUInt32();
            break;
          }
          case 485: {
            AverageRotorThrustRatioFor1G = input.ReadFloat();
            break;
          }
          case 490: {
            if (planeENUSpeed_ == null) {
              PlaneENUSpeed = new global::MetaData.Proto_Vector3F();
            }
            input.ReadMessage(PlaneENUSpeed);
            break;
          }
          case 496: {
            IsGNSS2DAvailable = input.ReadBool();
            break;
          }
          case 504: {
            IsGNSSAltAvailable = input.ReadBool();
            break;
          }
          case 512: {
            UsingGnssSateNum = input.ReadInt32();
            break;
          }
          case 520: {
            IsGNSSDataQualityGood = input.ReadBool();
            break;
          }
          case 528: {
            GNSSsomeNotUsable = input.ReadBool();
            break;
          }
          case 536: {
            IsIRSReadyForTakeoff = input.ReadBool();
            break;
          }
          case 544: {
            IsInSensorCalibrationMode = input.ReadBool();
            break;
          }
          case 552: {
            IsInNoMagMode = input.ReadBool();
            break;
          }
          case 560: {
            IsUsingVisualPositionSystemForIRS = input.ReadBool();
            break;
          }
          case 568: {
            IsFlyTestParamsModified = input.ReadBool();
            break;
          }
          case 576: {
            IsInAutoVertPortOperationMode = input.ReadBool();
            break;
          }
          case 584: {
            IsAutoPortLandElseAlterLand = input.ReadBool();
            break;
          }
          case 592: {
            IsVerticalLanding = input.ReadBool();
            break;
          }
          case 600: {
            IsInLandingConstDescentAndAlignPhase = input.ReadBool();
            break;
          }
          case 608: {
            IsVertLandPauseTouchDownForAlignment = input.ReadBool();
            break;
          }
          case 618: {
            if (precisionLandMaxAllowableErrors_ == null) {
              PrecisionLandMaxAllowableErrors = new global::MetaData.Proto_PrecisionLandMaxAllowableErrors();
            }
            input.ReadMessage(PrecisionLandMaxAllowableErrors);
            break;
          }
          case 625: {
            LandingGlobal2DPosError = input.ReadDouble();
            break;
          }
          case 632: {
            LandActiveYawAlign = input.ReadBool();
            break;
          }
          case 640: {
            LandPassiveYawAlign = input.ReadBool();
            break;
          }
          case 649: {
            PortTableHeadingAngle = input.ReadDouble();
            break;
          }
          case 657: {
            YawAngleAlignError = input.ReadDouble();
            break;
          }
          case 664: {
            IsProtocolVersionConflict = input.ReadBool();
            break;
          }
          case 672: {
            CanEnterHighPosAccuRotorMode = input.ReadBool();
            break;
          }
          case 680: {
            ServerErrorsHasMessage = input.ReadBool();
            break;
          }
          case 688: {
            ReceivedAircraftMessagesErrorCount = input.ReadInt32();
            break;
          }
          case 696: {
            ReceivedAircraftMessagesWarningCount = input.ReadInt32();
            break;
          }
          case 704: {
            IsInEngineerMode = input.ReadBool();
            break;
          }
          case 712: {
            IsLowNzProtectionActivated = input.ReadBool();
            break;
          }
          case 720: {
            IsHighAoAProtectionActivated = input.ReadBool();
            break;
          }
          case 728: {
            IsHighStructNzProtectionActivated = input.ReadBool();
            break;
          }
          case 736: {
            IsLowSpeedPSPActivated = input.ReadBool();
            break;
          }
          case 744: {
            IsHighSpeedPSPActivated = input.ReadBool();
            break;
          }
          case 752: {
            IsAltitudeDropFloorActivated = input.ReadBool();
            break;
          }
          case 760: {
            IsAltitudeRiseCeilingActivated = input.ReadBool();
            break;
          }
          case 773: {
            AltitudeDeviation = input.ReadFloat();
            break;
          }
          case 776: {
            IsAltitudeDeviationHigh = input.ReadBool();
            break;
          }
          case 784: {
            IsAltitudeDeviationLow = input.ReadBool();
            break;
          }
          case 792: {
            IsRollLostControl = input.ReadBool();
            break;
          }
          case 800: {
            IsPitchLostControl = input.ReadBool();
            break;
          }
          case 808: {
            EmergencyLandBecauseBatteryLow = input.ReadBool();
            break;
          }
          case 816: {
            EmergencyLandBecauseFlyTimeHigh = input.ReadBool();
            break;
          }
          case 824: {
            IsRejectingTakeOff = input.ReadBool();
            break;
          }
          case 834: {
            if (gyroHFRMSDPS_ == null) {
              GyroHFRMSDPS = new global::MetaData.Proto_GyroHFRMSDPS();
            }
            input.ReadMessage(GyroHFRMSDPS);
            break;
          }
          case 840: {
            IsLogFileAlmostFull = input.ReadBool();
            break;
          }
          case 848: {
            EnableOnGndFastFileTransmit = input.ReadBool();
            break;
          }
          case 857: {
            MinimumRemainRatio = input.ReadDouble();
            break;
          }
          case 865: {
            WarningRemainRatio = input.ReadDouble();
            break;
          }
          case 872: {
            DateTimeNow = input.ReadInt64();
            break;
          }
          case 880: {
            DebugCurveLastReceiveTime = input.ReadInt64();
            break;
          }
          case 888: {
            LastReceivingGNSSRawDataTime = input.ReadInt64();
            break;
          }
          case 896: {
            AllGNSSRawDataCounter = input.ReadUInt64();
            break;
          }
          case 904: {
            IsRequestOpenOnboardLog = input.ReadBool();
            break;
          }
          case 912: {
            IsOnboardLogOpen = input.ReadBool();
            break;
          }
          case 920: {
            IsWingCruiseHasFailed = input.ReadBool();
            break;
          }
          case 928: {
            IsEmergencyLand = input.ReadBool();
            break;
          }
          case 936: {
            IsEmergencyLandRequested = input.ReadBool();
            break;
          }
          case 944: {
            DisableEmergencyAutoLand = input.ReadBool();
            break;
          }
          case 952: {
            EnableGroundDistLowWarning = input.ReadBool();
            break;
          }
          case 960: {
            IsLowGndDistWarning = input.ReadBool();
            break;
          }
          case 968: {
            IsAGLBySonarAvailable = input.ReadBool();
            break;
          }
          case 981: {
            LandingGearAltAGLByRadar = input.ReadFloat();
            break;
          }
          case 984: {
            IsLowAltProtectionActive = input.ReadBool();
            break;
          }
          case 992: {
            IsControllerHearingFromAircraft = input.ReadBool();
            break;
          }
          case 1000: {
            IsAircraftHearingFromController = input.ReadBool();
            break;
          }
          case 1008: {
            IsInOnGroundActionLayerCommandMode = input.ReadBool();
            break;
          }
          case 1016: {
            HasManualRCReceiver = input.ReadBool();
            break;
          }
          case 1024: {
            HasManualControlInputs = input.ReadBool();
            break;
          }
          case 1032: {
            EnableExceptionWhenRCReceiverNoSignal = input.ReadBool();
            break;
          }
          case 1042: {
            SensorInvalidMessage = input.ReadString();
            break;
          }
          case 1048: {
            TaskMode = (global::MetaData.Proto_ControlTaskModes) input.ReadEnum();
            break;
          }
          case 1056: {
            IsPilotControlActive = input.ReadBool();
            break;
          }
          case 1064: {
            ManualControlInDisableMotorServoState = input.ReadBool();
            break;
          }
          case 1072: {
            CanEnterWingFlyWithRotorMode = input.ReadBool();
            break;
          }
          case 1080: {
            CanEnterWingCruiseMode = input.ReadBool();
            break;
          }
          case 1088: {
            CruiseMotorCount = input.ReadInt32();
            break;
          }
          case 1096: {
            EnableCruiseMotorInRotorHoverMode = input.ReadBool();
            break;
          }
          case 1104: {
            EnforceRTKTakeOffAndLand = input.ReadBool();
            break;
          }
          case 1112: {
            IsRTKAndIRSPrecisionOKForAutoPortTakeOff = input.ReadBool();
            break;
          }
          case 1120: {
            IsGimbalCamSDCardDestroyPowerOn = input.ReadBool();
            break;
          }
          case 1128: {
            IsGimbalCameraNotDetected = input.ReadBool();
            break;
          }
          case 1141: {
            TargetAltitudeHMSLOffset = input.ReadFloat();
            break;
          }
          case 1149: {
            TargetAltitudeAGLOffset = input.ReadFloat();
            break;
          }
          case 1152: {
            IsWingCruiseAirspeedPriorToHeight = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
